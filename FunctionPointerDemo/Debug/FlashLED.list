
FlashLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000234  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e0  080003e8  000103e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e0  080003e0  000103e8  2**0
                  CONTENTS
  4 .ARM          00000000  080003e0  080003e0  000103e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e0  080003e8  000103e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e0  080003e0  000103e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003e4  080003e4  000103e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103e8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010418  2**0
                  CONTENTS, READONLY
 14 .debug_info   000003ea  00000000  00000000  0001045b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000131  00000000  00000000  00010845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000068  00000000  00000000  00010978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000045  00000000  00000000  000109e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001a235  00000000  00000000  00010a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000005ee  00000000  00000000  0002ac5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00092d5a  00000000  00000000  0002b248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000000d0  00000000  00000000  000bdfa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  000be074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080003c8 	.word	0x080003c8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080003c8 	.word	0x080003c8

080001ec <Flash_LED>:
void Initialise_External_Clock (void);


//__attribute__( (section(".data") ) )
void Flash_LED (void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIOG->ODR ^=LED_PIN;//inverts the specific bit
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <Flash_LED+0x28>)
 80001f4:	695b      	ldr	r3, [r3, #20]
 80001f6:	4a07      	ldr	r2, [pc, #28]	; (8000214 <Flash_LED+0x28>)
 80001f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80001fc:	6153      	str	r3, [r2, #20]
		for (int i = 0; i < 100; i ++);
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e002      	b.n	800020a <Flash_LED+0x1e>
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b63      	cmp	r3, #99	; 0x63
 800020e:	ddf9      	ble.n	8000204 <Flash_LED+0x18>
		GPIOG->ODR ^=LED_PIN;//inverts the specific bit
 8000210:	e7ef      	b.n	80001f2 <Flash_LED+0x6>
 8000212:	bf00      	nop
 8000214:	40021800 	.word	0x40021800

08000218 <main>:
 * @brief main
 * Main entry point, carries out initialisation and calling all sub-systems within eternal loop.
 * @param None
 * @retval None
 */
int main(void){
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	//Initialise to use external clock , enable relevant gpio and peripheral etc.
	Micro_Initialisation();
 800021c:	f000 f803 	bl	8000226 <Micro_Initialisation>

    /******************/
    /* Loop forever */
	while(1)
	{
		Flash_LED();
 8000220:	f7ff ffe4 	bl	80001ec <Flash_LED>
 8000224:	e7fc      	b.n	8000220 <main+0x8>

08000226 <Micro_Initialisation>:
 * @brief   Micro_Initialisation
 * This function configures the micro clocks ,gpio and peripherals used by the system
 * @param None
 * @retval None
 */
void Micro_Initialisation(void){
 8000226:	b580      	push	{r7, lr}
 8000228:	af00      	add	r7, sp, #0
	//configure chip to use external clock source.
	Initialise_External_Clock();
 800022a:	f000 f805 	bl	8000238 <Initialise_External_Clock>

	//Initialise any GPIO required.
	Initialise_GPIO();
 800022e:	f000 f85f 	bl	80002f0 <Initialise_GPIO>
}
 8000232:	bf00      	nop
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <Initialise_External_Clock>:
 * @brief Initialise External Clock
 * This function configures the mirco to use external 8MHz clock source.
 * @param None
 * @retval None
 */
void Initialise_External_Clock (void){
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0


    //Enable HSE and wait for the HSE to become ready
	RCC->CR |= RCC_CR_HSEON;
 800023c:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <Initialise_External_Clock+0xa8>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a27      	ldr	r2, [pc, #156]	; (80002e0 <Initialise_External_Clock+0xa8>)
 8000242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000246:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 8000248:	bf00      	nop
 800024a:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <Initialise_External_Clock+0xa8>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000252:	2b00      	cmp	r3, #0
 8000254:	d0f9      	beq.n	800024a <Initialise_External_Clock+0x12>


	//Set the power enable clock and voltage regulator
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000256:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <Initialise_External_Clock+0xa8>)
 8000258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800025a:	4a21      	ldr	r2, [pc, #132]	; (80002e0 <Initialise_External_Clock+0xa8>)
 800025c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000260:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= PWR_CR_VOS;
 8000262:	4b20      	ldr	r3, [pc, #128]	; (80002e4 <Initialise_External_Clock+0xac>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a1f      	ldr	r2, [pc, #124]	; (80002e4 <Initialise_External_Clock+0xac>)
 8000268:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800026c:	6013      	str	r3, [r2, #0]

	//Configure the FLASH Pre-fetch and Latency related settings
	FLASH->ACR |= FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN
 800026e:	4b1e      	ldr	r3, [pc, #120]	; (80002e8 <Initialise_External_Clock+0xb0>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a1d      	ldr	r2, [pc, #116]	; (80002e8 <Initialise_External_Clock+0xb0>)
 8000274:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000278:	f043 0304 	orr.w	r3, r3, #4
 800027c:	6013      	str	r3, [r2, #0]
			 | FLASH_ACR_LATENCY_4WS;//FLASH_ACR_LATENCY_2WS;

    //Configure the Prescalers HCLK,PCLK1 AND PCLK2
    //AHB Prescaler
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800027e:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <Initialise_External_Clock+0xa8>)
 8000280:	4a17      	ldr	r2, [pc, #92]	; (80002e0 <Initialise_External_Clock+0xa8>)
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	6093      	str	r3, [r2, #8]
    //APB1 Prescaler
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000286:	4b16      	ldr	r3, [pc, #88]	; (80002e0 <Initialise_External_Clock+0xa8>)
 8000288:	689b      	ldr	r3, [r3, #8]
 800028a:	4a15      	ldr	r2, [pc, #84]	; (80002e0 <Initialise_External_Clock+0xa8>)
 800028c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000290:	6093      	str	r3, [r2, #8]
    //APB2 Prescaler
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000292:	4b13      	ldr	r3, [pc, #76]	; (80002e0 <Initialise_External_Clock+0xa8>)
 8000294:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <Initialise_External_Clock+0xa8>)
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	6093      	str	r3, [r2, #8]

    //Configure the Main PLL
	RCC->PLLCFGR = (PLL_M << 0) | (PLL_N << 6) | (PLL_P << 16) | (PLL_Q << 24)
 800029a:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <Initialise_External_Clock+0xa8>)
 800029c:	4a13      	ldr	r2, [pc, #76]	; (80002ec <Initialise_External_Clock+0xb4>)
 800029e:	605a      	str	r2, [r3, #4]
			| (PLL_SRC << 22);

    //Enable the PLL and wait ready
	RCC->CR |= RCC_CR_PLLON;
 80002a0:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <Initialise_External_Clock+0xa8>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <Initialise_External_Clock+0xa8>)
 80002a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002aa:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY));
 80002ac:	bf00      	nop
 80002ae:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <Initialise_External_Clock+0xa8>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d0f9      	beq.n	80002ae <Initialise_External_Clock+0x76>


    //Select the clock source and wait for it to be set
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002ba:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <Initialise_External_Clock+0xa8>)
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	4a08      	ldr	r2, [pc, #32]	; (80002e0 <Initialise_External_Clock+0xa8>)
 80002c0:	f043 0302 	orr.w	r3, r3, #2
 80002c4:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80002c6:	bf00      	nop
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <Initialise_External_Clock+0xa8>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	f003 030c 	and.w	r3, r3, #12
 80002d0:	2b08      	cmp	r3, #8
 80002d2:	d1f9      	bne.n	80002c8 <Initialise_External_Clock+0x90>

}
 80002d4:	bf00      	nop
 80002d6:	bf00      	nop
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	40023800 	.word	0x40023800
 80002e4:	40007000 	.word	0x40007000
 80002e8:	40023c00 	.word	0x40023c00
 80002ec:	03401204 	.word	0x03401204

080002f0 <Initialise_GPIO>:
 * PG13: Green LED.
 *
 * @param None
 * @retval None
 */
void Initialise_GPIO (void){
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
    //Enable clock access to GPIOG
     RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 80002f4:	4b0b      	ldr	r3, [pc, #44]	; (8000324 <Initialise_GPIO+0x34>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <Initialise_GPIO+0x34>)
 80002fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
     //Set PG13 as output
	 GPIOG->MODER |= (1 << 26);
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <Initialise_GPIO+0x38>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a08      	ldr	r2, [pc, #32]	; (8000328 <Initialise_GPIO+0x38>)
 8000306:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800030a:	6013      	str	r3, [r2, #0]
	 GPIOG->MODER &= ~(1 << 27);
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <Initialise_GPIO+0x38>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a05      	ldr	r2, [pc, #20]	; (8000328 <Initialise_GPIO+0x38>)
 8000312:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000316:	6013      	str	r3, [r2, #0]
  }
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40023800 	.word	0x40023800
 8000328:	40021800 	.word	0x40021800

0800032c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800032c:	480d      	ldr	r0, [pc, #52]	; (8000364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000330:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000334:	480c      	ldr	r0, [pc, #48]	; (8000368 <LoopForever+0x6>)
  ldr r1, =_edata
 8000336:	490d      	ldr	r1, [pc, #52]	; (800036c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000338:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <LoopForever+0xe>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800033c:	e002      	b.n	8000344 <LoopCopyDataInit>

0800033e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000342:	3304      	adds	r3, #4

08000344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000348:	d3f9      	bcc.n	800033e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034a:	4a0a      	ldr	r2, [pc, #40]	; (8000374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800034c:	4c0a      	ldr	r4, [pc, #40]	; (8000378 <LoopForever+0x16>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000350:	e001      	b.n	8000356 <LoopFillZerobss>

08000352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000354:	3204      	adds	r2, #4

08000356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000358:	d3fb      	bcc.n	8000352 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035a:	f000 f811 	bl	8000380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035e:	f7ff ff5b 	bl	8000218 <main>

08000362 <LoopForever>:

LoopForever:
  b LoopForever
 8000362:	e7fe      	b.n	8000362 <LoopForever>
  ldr   r0, =_estack
 8000364:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800036c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000370:	080003e8 	.word	0x080003e8
  ldr r2, =_sbss
 8000374:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000378:	2000001c 	.word	0x2000001c

0800037c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800037c:	e7fe      	b.n	800037c <ADC_IRQHandler>
	...

08000380 <__libc_init_array>:
 8000380:	b570      	push	{r4, r5, r6, lr}
 8000382:	4d0d      	ldr	r5, [pc, #52]	; (80003b8 <__libc_init_array+0x38>)
 8000384:	4c0d      	ldr	r4, [pc, #52]	; (80003bc <__libc_init_array+0x3c>)
 8000386:	1b64      	subs	r4, r4, r5
 8000388:	10a4      	asrs	r4, r4, #2
 800038a:	2600      	movs	r6, #0
 800038c:	42a6      	cmp	r6, r4
 800038e:	d109      	bne.n	80003a4 <__libc_init_array+0x24>
 8000390:	4d0b      	ldr	r5, [pc, #44]	; (80003c0 <__libc_init_array+0x40>)
 8000392:	4c0c      	ldr	r4, [pc, #48]	; (80003c4 <__libc_init_array+0x44>)
 8000394:	f000 f818 	bl	80003c8 <_init>
 8000398:	1b64      	subs	r4, r4, r5
 800039a:	10a4      	asrs	r4, r4, #2
 800039c:	2600      	movs	r6, #0
 800039e:	42a6      	cmp	r6, r4
 80003a0:	d105      	bne.n	80003ae <__libc_init_array+0x2e>
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a8:	4798      	blx	r3
 80003aa:	3601      	adds	r6, #1
 80003ac:	e7ee      	b.n	800038c <__libc_init_array+0xc>
 80003ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b2:	4798      	blx	r3
 80003b4:	3601      	adds	r6, #1
 80003b6:	e7f2      	b.n	800039e <__libc_init_array+0x1e>
 80003b8:	080003e0 	.word	0x080003e0
 80003bc:	080003e0 	.word	0x080003e0
 80003c0:	080003e0 	.word	0x080003e0
 80003c4:	080003e4 	.word	0x080003e4

080003c8 <_init>:
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	bf00      	nop
 80003cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ce:	bc08      	pop	{r3}
 80003d0:	469e      	mov	lr, r3
 80003d2:	4770      	bx	lr

080003d4 <_fini>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr
