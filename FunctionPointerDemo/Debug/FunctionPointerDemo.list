
FunctionPointerDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800035c  08000364  00010364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800035c  0800035c  00010364  2**0
                  CONTENTS
  4 .ARM          00000000  0800035c  0800035c  00010364  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800035c  08000364  00010364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800035c  0800035c  0001035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000360  08000360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010364  2**0
                  CONTENTS
 10 .bss          0000002c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010364  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010394  2**0
                  CONTENTS, READONLY
 14 .debug_info   000004d7  00000000  00000000  000103d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000025e  00000000  00000000  000108ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000080  00000000  00000000  00010b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000051  00000000  00000000  00010b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001a31c  00000000  00000000  00010be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000a4a  00000000  00000000  0002aefd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00092eac  00000000  00000000  0002b947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000100  00000000  00000000  000be7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  000be8f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000344 	.word	0x08000344

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000344 	.word	0x08000344

080001ec <DIOHandler_Run>:

///////////////
// Main entry point - Read all digital inputs
// Note: This function would be reading and de-bouncing multiple digital inputs
void DIOHandler_Run(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af00      	add	r7, sp, #0

	// A module like this would also de-bounce the inputs and take care of ALL digital inputs.
	// Here it's kept simple for the sake of this demo and are only checking the current state of the User Button (PA0).

	// Here we simply record the current state of the User Button input and check for a change.
	uint8_t DIStateLT = DI_States[DI_USER_BUTTON_ID];
 80001f2:	4b0e      	ldr	r3, [pc, #56]	; (800022c <DIOHandler_Run+0x40>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	71fb      	strb	r3, [r7, #7]
	uint8_t DIStateNow = GPIOA->IDR & 0x01;
 80001f8:	4b0d      	ldr	r3, [pc, #52]	; (8000230 <DIOHandler_Run+0x44>)
 80001fa:	691b      	ldr	r3, [r3, #16]
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	f003 0301 	and.w	r3, r3, #1
 8000202:	71bb      	strb	r3, [r7, #6]
	// State changed?
	if (DIStateLT != DIStateNow)
 8000204:	79fa      	ldrb	r2, [r7, #7]
 8000206:	79bb      	ldrb	r3, [r7, #6]
 8000208:	429a      	cmp	r2, r3
 800020a:	d00a      	beq.n	8000222 <DIOHandler_Run+0x36>
	{
		// Save the new state - Here would be de-bouncing for instance.
		DI_States[DI_USER_BUTTON_ID] = DIStateNow;
 800020c:	4a07      	ldr	r2, [pc, #28]	; (800022c <DIOHandler_Run+0x40>)
 800020e:	79bb      	ldrb	r3, [r7, #6]
 8000210:	7013      	strb	r3, [r2, #0]

		// Run the callback function if it exists / has been configured
		if (FunctionPointer_AssignedWithTheAddressOfAFunctionToCall != NULL)
 8000212:	4b08      	ldr	r3, [pc, #32]	; (8000234 <DIOHandler_Run+0x48>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d003      	beq.n	8000222 <DIOHandler_Run+0x36>
		{
			// Function pointer has been assigned the address of a function to call, so call it!
			// Include the ID of the input that's changed.
			FunctionPointer_AssignedWithTheAddressOfAFunctionToCall(DI_USER_BUTTON_ID);
 800021a:	4b06      	ldr	r3, [pc, #24]	; (8000234 <DIOHandler_Run+0x48>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2000      	movs	r0, #0
 8000220:	4798      	blx	r3
		}
	}
}
 8000222:	bf00      	nop
 8000224:	3708      	adds	r7, #8
 8000226:	46bd      	mov	sp, r7
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	2000001c 	.word	0x2000001c
 8000230:	40020000 	.word	0x40020000
 8000234:	20000024 	.word	0x20000024

08000238 <DIOHandler_Get_Digital_Input_State>:

/////////////////////////
// Return last read state of a digital input.
uint8_t DIOHandler_Get_Digital_Input_State (uint8_t InputID)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	71fb      	strb	r3, [r7, #7]
	// Return the requested state.
	// Note: Would normally check for out of bounds here.
	return DI_States[InputID];
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	4a03      	ldr	r2, [pc, #12]	; (8000254 <DIOHandler_Get_Digital_Input_State+0x1c>)
 8000246:	5cd3      	ldrb	r3, [r2, r3]
}
 8000248:	4618      	mov	r0, r3
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	2000001c 	.word	0x2000001c

08000258 <UserButtonStateChanged>:

////////////////////////////////////
// Target function for either method -
// This function should get called whenever the user button (blue) is pressed or released.
void UserButtonStateChanged(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
	// Add a line the debugger can break on
	// Insert break point on next line when debugging
	asm("nop");
 800025c:	bf00      	nop
}
 800025e:	bf00      	nop
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr

08000268 <main>:

#ifdef POLLING_METHOD

////////////////////
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
	static uint8_t UserButtonLT;
	uint8_t UserButtonNow;

	// Initialise GPIOA clock for our input
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 800026e:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <main+0x38>)
 8000270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000272:	4a0b      	ldr	r2, [pc, #44]	; (80002a0 <main+0x38>)
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	6313      	str	r3, [r2, #48]	; 0x30
    /******************/
    /* Loop forever */
	while(1)
	{
		// Run the DIO Handler module.
		DIOHandler_Run();
 800027a:	f7ff ffb7 	bl	80001ec <DIOHandler_Run>

		// Check for change in state of the user button...

		// Get the current state
		UserButtonNow = DIOHandler_Get_Digital_Input_State(DI_USER_BUTTON_ID);
 800027e:	2000      	movs	r0, #0
 8000280:	f7ff ffda 	bl	8000238 <DIOHandler_Get_Digital_Input_State>
 8000284:	4603      	mov	r3, r0
 8000286:	71fb      	strb	r3, [r7, #7]

		// Check current state against last known state.
		if (UserButtonLT != UserButtonNow)
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <main+0x3c>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	79fa      	ldrb	r2, [r7, #7]
 800028e:	429a      	cmp	r2, r3
 8000290:	d0f3      	beq.n	800027a <main+0x12>
		{
			// Record new state
			UserButtonLT = UserButtonNow;
 8000292:	4a04      	ldr	r2, [pc, #16]	; (80002a4 <main+0x3c>)
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	7013      	strb	r3, [r2, #0]

			// Call our target function to indicate user button state has changed.
			UserButtonStateChanged();
 8000298:	f7ff ffde 	bl	8000258 <UserButtonStateChanged>
		DIOHandler_Run();
 800029c:	e7ed      	b.n	800027a <main+0x12>
 800029e:	bf00      	nop
 80002a0:	40023800 	.word	0x40023800
 80002a4:	20000028 	.word	0x20000028

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	; (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	; (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 f811 	bl	80002fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ffc5 	bl	8000268 <main>

080002de <LoopForever>:

LoopForever:
  b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ec:	08000364 	.word	0x08000364
  ldr r2, =_sbss
 80002f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f4:	2000002c 	.word	0x2000002c

080002f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC_IRQHandler>
	...

080002fc <__libc_init_array>:
 80002fc:	b570      	push	{r4, r5, r6, lr}
 80002fe:	4d0d      	ldr	r5, [pc, #52]	; (8000334 <__libc_init_array+0x38>)
 8000300:	4c0d      	ldr	r4, [pc, #52]	; (8000338 <__libc_init_array+0x3c>)
 8000302:	1b64      	subs	r4, r4, r5
 8000304:	10a4      	asrs	r4, r4, #2
 8000306:	2600      	movs	r6, #0
 8000308:	42a6      	cmp	r6, r4
 800030a:	d109      	bne.n	8000320 <__libc_init_array+0x24>
 800030c:	4d0b      	ldr	r5, [pc, #44]	; (800033c <__libc_init_array+0x40>)
 800030e:	4c0c      	ldr	r4, [pc, #48]	; (8000340 <__libc_init_array+0x44>)
 8000310:	f000 f818 	bl	8000344 <_init>
 8000314:	1b64      	subs	r4, r4, r5
 8000316:	10a4      	asrs	r4, r4, #2
 8000318:	2600      	movs	r6, #0
 800031a:	42a6      	cmp	r6, r4
 800031c:	d105      	bne.n	800032a <__libc_init_array+0x2e>
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f855 3b04 	ldr.w	r3, [r5], #4
 8000324:	4798      	blx	r3
 8000326:	3601      	adds	r6, #1
 8000328:	e7ee      	b.n	8000308 <__libc_init_array+0xc>
 800032a:	f855 3b04 	ldr.w	r3, [r5], #4
 800032e:	4798      	blx	r3
 8000330:	3601      	adds	r6, #1
 8000332:	e7f2      	b.n	800031a <__libc_init_array+0x1e>
 8000334:	0800035c 	.word	0x0800035c
 8000338:	0800035c 	.word	0x0800035c
 800033c:	0800035c 	.word	0x0800035c
 8000340:	08000360 	.word	0x08000360

08000344 <_init>:
 8000344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000346:	bf00      	nop
 8000348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034a:	bc08      	pop	{r3}
 800034c:	469e      	mov	lr, r3
 800034e:	4770      	bx	lr

08000350 <_fini>:
 8000350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000352:	bf00      	nop
 8000354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000356:	bc08      	pop	{r3}
 8000358:	469e      	mov	lr, r3
 800035a:	4770      	bx	lr
