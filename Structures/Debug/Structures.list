
Structures.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001244  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080013f4  080013f4  000113f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001430  08001430  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001430  08001430  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001430  08001430  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001430  08001430  00011430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001434  08001434  00011434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001438  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000001bc  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000218  20000218  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000b90  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000003d7  00000000  00000000  00020c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000120  00000000  00000000  00021038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000c5  00000000  00000000  00021158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002c83  00000000  00000000  0002121d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001478  00000000  00000000  00023ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009949  00000000  00000000  00025318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000b68  00000000  00000000  0002ec64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0002f7cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080013dc 	.word	0x080013dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	080013dc 	.word	0x080013dc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:



// Main entry point.
int main(void)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b0d5      	sub	sp, #340	; 0x154
 8000294:	af12      	add	r7, sp, #72	; 0x48
	// Create some example structures in RAM using alias and tag.
	// "Instantiate instances".
	_STRUCTURE_ALIAS AnotherStructureWithOnlyFunctionScope = {0}; 				// Typical usage in industry
 8000296:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800029a:	2250      	movs	r2, #80	; 0x50
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 fa6d 	bl	800077e <memset>
	struct StructTag YetAnotherButBasicallySameAsAbove;							// NOT typical usage in industry
	struct StructTag *pStruct1 = &AnotherStructureWithOnlyFunctionScope;		// NOT typical usage in industry
 80002a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80002a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	_STRUCTURE_ALIAS *pStruct2 = &YetAnotherButBasicallySameAsAbove;			// Typical usage in industry
 80002ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80002b0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4


	MyStructure.StructElement1 = 1;
 80002b4:	4b28      	ldr	r3, [pc, #160]	; (8000358 <main+0xc8>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	601a      	str	r2, [r3, #0]
	AnotherStructureWithOnlyFunctionScope.StructElement1 = 2;
 80002ba:	2302      	movs	r3, #2
 80002bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	YetAnotherButBasicallySameAsAbove.StructElement1 = 3;
 80002c0:	2303      	movs	r3, #3
 80002c2:	657b      	str	r3, [r7, #84]	; 0x54


	pStruct1->StructElement1 = 4;
 80002c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80002c8:	2204      	movs	r2, #4
 80002ca:	601a      	str	r2, [r3, #0]
	pStruct2->StructElement1 = 5;
 80002cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80002d0:	2205      	movs	r2, #5
 80002d2:	601a      	str	r2, [r3, #0]

	// Pass structure in / out. Original structure data 'protected'.
	// All data is 'copied' into and out of the function.
	// Much slower
	_STRUCTURE_ALIAS ANewStruct;
	for (int i = 0; i < 1000000; i++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80002da:	e015      	b.n	8000308 <main+0x78>
	{
		ANewStruct = PassWholeStructureInOut(AnotherStructureWithOnlyFunctionScope);
 80002dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80002e0:	f5a3 7482 	sub.w	r4, r3, #260	; 0x104
 80002e4:	4668      	mov	r0, sp
 80002e6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80002ea:	2244      	movs	r2, #68	; 0x44
 80002ec:	4619      	mov	r1, r3
 80002ee:	f000 fac2 	bl	8000876 <memcpy>
 80002f2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80002f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80002f8:	4620      	mov	r0, r4
 80002fa:	f000 f833 	bl	8000364 <PassWholeStructureInOut>
	for (int i = 0; i < 1000000; i++)
 80002fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000302:	3301      	adds	r3, #1
 8000304:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800030c:	4a13      	ldr	r2, [pc, #76]	; (800035c <main+0xcc>)
 800030e:	4293      	cmp	r3, r2
 8000310:	dde4      	ble.n	80002dc <main+0x4c>

	// Pass structure pointer in / out. Original data can be manipulated.
	// Only one 32-bit pointer passed in / out, the pointer to the original structure.
	// Much faster
	_STRUCTURE_ALIAS *pANewStruct;
	for (int i = 0; i < 1000000; i++)
 8000312:	2300      	movs	r3, #0
 8000314:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000318:	e00b      	b.n	8000332 <main+0xa2>
	{
		pANewStruct = PassStructurePointerInOut(&AnotherStructureWithOnlyFunctionScope);
 800031a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800031e:	4618      	mov	r0, r3
 8000320:	f000 f83a 	bl	8000398 <PassStructurePointerInOut>
 8000324:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
	for (int i = 0; i < 1000000; i++)
 8000328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800032c:	3301      	adds	r3, #1
 800032e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000336:	4a09      	ldr	r2, [pc, #36]	; (800035c <main+0xcc>)
 8000338:	4293      	cmp	r3, r2
 800033a:	ddee      	ble.n	800031a <main+0x8a>
	}

	printf ("%i,%i,%i",
 800033c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8000340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000344:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000348:	685a      	ldr	r2, [r3, #4]
 800034a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	4803      	ldr	r0, [pc, #12]	; (8000360 <main+0xd0>)
 8000352:	f000 f9bf 	bl	80006d4 <iprintf>
			AnotherStructureWithOnlyFunctionScope.StructElement1,
			ANewStruct.StructElement2,
			pANewStruct->StructElement2);

    /* Loop forever */
	for(;;);
 8000356:	e7fe      	b.n	8000356 <main+0xc6>
 8000358:	20000078 	.word	0x20000078
 800035c:	000f423f 	.word	0x000f423f
 8000360:	080013f4 	.word	0x080013f4

08000364 <PassWholeStructureInOut>:
}

// Example function
_STRUCTURE_ALIAS PassWholeStructureInOut (_STRUCTURE_ALIAS StructIn)
{
 8000364:	b084      	sub	sp, #16
 8000366:	b580      	push	{r7, lr}
 8000368:	b082      	sub	sp, #8
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
 800036e:	f107 0014 	add.w	r0, r7, #20
 8000372:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// Do Work.
	StructIn.StructElement1 = 7;
 8000376:	2307      	movs	r3, #7
 8000378:	617b      	str	r3, [r7, #20]

	// Return the input structure back out again...
	return StructIn;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4618      	mov	r0, r3
 800037e:	f107 0314 	add.w	r3, r7, #20
 8000382:	2250      	movs	r2, #80	; 0x50
 8000384:	4619      	mov	r1, r3
 8000386:	f000 fa76 	bl	8000876 <memcpy>
}
 800038a:	6878      	ldr	r0, [r7, #4]
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000394:	b004      	add	sp, #16
 8000396:	4770      	bx	lr

08000398 <PassStructurePointerInOut>:

// Example function
_STRUCTURE_ALIAS *PassStructurePointerInOut (_STRUCTURE_ALIAS *pStructIn)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	// Do work.
	pStructIn->StructElement1 = 8;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2208      	movs	r2, #8
 80003a4:	601a      	str	r2, [r3, #0]

	// Return the pointer passed in back out again...
	return pStructIn;
 80003a6:	687b      	ldr	r3, [r7, #4]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr

080003b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	60f8      	str	r0, [r7, #12]
 80003bc:	60b9      	str	r1, [r7, #8]
 80003be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]
 80003c4:	e00a      	b.n	80003dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003c6:	f3af 8000 	nop.w
 80003ca:	4601      	mov	r1, r0
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	1c5a      	adds	r2, r3, #1
 80003d0:	60ba      	str	r2, [r7, #8]
 80003d2:	b2ca      	uxtb	r2, r1
 80003d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	3301      	adds	r3, #1
 80003da:	617b      	str	r3, [r7, #20]
 80003dc:	697a      	ldr	r2, [r7, #20]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	dbf0      	blt.n	80003c6 <_read+0x12>
  }

  return len;
 80003e4:	687b      	ldr	r3, [r7, #4]
}
 80003e6:	4618      	mov	r0, r3
 80003e8:	3718      	adds	r7, #24
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}

080003ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b086      	sub	sp, #24
 80003f2:	af00      	add	r7, sp, #0
 80003f4:	60f8      	str	r0, [r7, #12]
 80003f6:	60b9      	str	r1, [r7, #8]
 80003f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]
 80003fe:	e009      	b.n	8000414 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	1c5a      	adds	r2, r3, #1
 8000404:	60ba      	str	r2, [r7, #8]
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	4618      	mov	r0, r3
 800040a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	3301      	adds	r3, #1
 8000412:	617b      	str	r3, [r7, #20]
 8000414:	697a      	ldr	r2, [r7, #20]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	429a      	cmp	r2, r3
 800041a:	dbf1      	blt.n	8000400 <_write+0x12>
  }
  return len;
 800041c:	687b      	ldr	r3, [r7, #4]
}
 800041e:	4618      	mov	r0, r3
 8000420:	3718      	adds	r7, #24
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}

08000426 <_close>:

int _close(int file)
{
 8000426:	b480      	push	{r7}
 8000428:	b083      	sub	sp, #12
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800042e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000432:	4618      	mov	r0, r3
 8000434:	370c      	adds	r7, #12
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr

0800043e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800043e:	b480      	push	{r7}
 8000440:	b083      	sub	sp, #12
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
 8000446:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800044e:	605a      	str	r2, [r3, #4]
  return 0;
 8000450:	2300      	movs	r3, #0
}
 8000452:	4618      	mov	r0, r3
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr

0800045e <_isatty>:

int _isatty(int file)
{
 800045e:	b480      	push	{r7}
 8000460:	b083      	sub	sp, #12
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000466:	2301      	movs	r3, #1
}
 8000468:	4618      	mov	r0, r3
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr

08000474 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000480:	2300      	movs	r3, #0
}
 8000482:	4618      	mov	r0, r3
 8000484:	3714      	adds	r7, #20
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
	...

08000490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b086      	sub	sp, #24
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000498:	4a14      	ldr	r2, [pc, #80]	; (80004ec <_sbrk+0x5c>)
 800049a:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <_sbrk+0x60>)
 800049c:	1ad3      	subs	r3, r2, r3
 800049e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <_sbrk+0x64>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d102      	bne.n	80004b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <_sbrk+0x64>)
 80004ae:	4a12      	ldr	r2, [pc, #72]	; (80004f8 <_sbrk+0x68>)
 80004b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <_sbrk+0x64>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4413      	add	r3, r2
 80004ba:	693a      	ldr	r2, [r7, #16]
 80004bc:	429a      	cmp	r2, r3
 80004be:	d207      	bcs.n	80004d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004c0:	f000 f9ac 	bl	800081c <__errno>
 80004c4:	4603      	mov	r3, r0
 80004c6:	220c      	movs	r2, #12
 80004c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004ca:	f04f 33ff 	mov.w	r3, #4294967295
 80004ce:	e009      	b.n	80004e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <_sbrk+0x64>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <_sbrk+0x64>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4413      	add	r3, r2
 80004de:	4a05      	ldr	r2, [pc, #20]	; (80004f4 <_sbrk+0x64>)
 80004e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004e2:	68fb      	ldr	r3, [r7, #12]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3718      	adds	r7, #24
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20030000 	.word	0x20030000
 80004f0:	00000400 	.word	0x00000400
 80004f4:	200000c8 	.word	0x200000c8
 80004f8:	20000218 	.word	0x20000218

080004fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000500:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <LoopForever+0x6>)
  ldr r1, =_edata
 8000506:	490d      	ldr	r1, [pc, #52]	; (800053c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <LoopForever+0xe>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800050c:	e002      	b.n	8000514 <LoopCopyDataInit>

0800050e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000512:	3304      	adds	r3, #4

08000514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000518:	d3f9      	bcc.n	800050e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <LoopForever+0x12>)
  ldr r4, =_ebss
 800051c:	4c0a      	ldr	r4, [pc, #40]	; (8000548 <LoopForever+0x16>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000520:	e001      	b.n	8000526 <LoopFillZerobss>

08000522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000524:	3204      	adds	r2, #4

08000526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000528:	d3fb      	bcc.n	8000522 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800052a:	f000 f97d 	bl	8000828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052e:	f7ff feaf 	bl	8000290 <main>

08000532 <LoopForever>:

LoopForever:
  b LoopForever
 8000532:	e7fe      	b.n	8000532 <LoopForever>
  ldr   r0, =_estack
 8000534:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800053c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000540:	08001438 	.word	0x08001438
  ldr r2, =_sbss
 8000544:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000548:	20000218 	.word	0x20000218

0800054c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800054c:	e7fe      	b.n	800054c <ADC_IRQHandler>
	...

08000550 <std>:
 8000550:	2300      	movs	r3, #0
 8000552:	b510      	push	{r4, lr}
 8000554:	4604      	mov	r4, r0
 8000556:	e9c0 3300 	strd	r3, r3, [r0]
 800055a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800055e:	6083      	str	r3, [r0, #8]
 8000560:	8181      	strh	r1, [r0, #12]
 8000562:	6643      	str	r3, [r0, #100]	; 0x64
 8000564:	81c2      	strh	r2, [r0, #14]
 8000566:	6183      	str	r3, [r0, #24]
 8000568:	4619      	mov	r1, r3
 800056a:	2208      	movs	r2, #8
 800056c:	305c      	adds	r0, #92	; 0x5c
 800056e:	f000 f906 	bl	800077e <memset>
 8000572:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <std+0x58>)
 8000574:	6263      	str	r3, [r4, #36]	; 0x24
 8000576:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <std+0x5c>)
 8000578:	62a3      	str	r3, [r4, #40]	; 0x28
 800057a:	4b0d      	ldr	r3, [pc, #52]	; (80005b0 <std+0x60>)
 800057c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800057e:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <std+0x64>)
 8000580:	6323      	str	r3, [r4, #48]	; 0x30
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <std+0x68>)
 8000584:	6224      	str	r4, [r4, #32]
 8000586:	429c      	cmp	r4, r3
 8000588:	d006      	beq.n	8000598 <std+0x48>
 800058a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800058e:	4294      	cmp	r4, r2
 8000590:	d002      	beq.n	8000598 <std+0x48>
 8000592:	33d0      	adds	r3, #208	; 0xd0
 8000594:	429c      	cmp	r4, r3
 8000596:	d105      	bne.n	80005a4 <std+0x54>
 8000598:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800059c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005a0:	f000 b966 	b.w	8000870 <__retarget_lock_init_recursive>
 80005a4:	bd10      	pop	{r4, pc}
 80005a6:	bf00      	nop
 80005a8:	080006f9 	.word	0x080006f9
 80005ac:	0800071b 	.word	0x0800071b
 80005b0:	08000753 	.word	0x08000753
 80005b4:	08000777 	.word	0x08000777
 80005b8:	200000cc 	.word	0x200000cc

080005bc <stdio_exit_handler>:
 80005bc:	4a02      	ldr	r2, [pc, #8]	; (80005c8 <stdio_exit_handler+0xc>)
 80005be:	4903      	ldr	r1, [pc, #12]	; (80005cc <stdio_exit_handler+0x10>)
 80005c0:	4803      	ldr	r0, [pc, #12]	; (80005d0 <stdio_exit_handler+0x14>)
 80005c2:	f000 b869 	b.w	8000698 <_fwalk_sglue>
 80005c6:	bf00      	nop
 80005c8:	20000000 	.word	0x20000000
 80005cc:	08001139 	.word	0x08001139
 80005d0:	2000000c 	.word	0x2000000c

080005d4 <cleanup_stdio>:
 80005d4:	6841      	ldr	r1, [r0, #4]
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <cleanup_stdio+0x34>)
 80005d8:	4299      	cmp	r1, r3
 80005da:	b510      	push	{r4, lr}
 80005dc:	4604      	mov	r4, r0
 80005de:	d001      	beq.n	80005e4 <cleanup_stdio+0x10>
 80005e0:	f000 fdaa 	bl	8001138 <_fflush_r>
 80005e4:	68a1      	ldr	r1, [r4, #8]
 80005e6:	4b09      	ldr	r3, [pc, #36]	; (800060c <cleanup_stdio+0x38>)
 80005e8:	4299      	cmp	r1, r3
 80005ea:	d002      	beq.n	80005f2 <cleanup_stdio+0x1e>
 80005ec:	4620      	mov	r0, r4
 80005ee:	f000 fda3 	bl	8001138 <_fflush_r>
 80005f2:	68e1      	ldr	r1, [r4, #12]
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <cleanup_stdio+0x3c>)
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d004      	beq.n	8000604 <cleanup_stdio+0x30>
 80005fa:	4620      	mov	r0, r4
 80005fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000600:	f000 bd9a 	b.w	8001138 <_fflush_r>
 8000604:	bd10      	pop	{r4, pc}
 8000606:	bf00      	nop
 8000608:	200000cc 	.word	0x200000cc
 800060c:	20000134 	.word	0x20000134
 8000610:	2000019c 	.word	0x2000019c

08000614 <global_stdio_init.part.0>:
 8000614:	b510      	push	{r4, lr}
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <global_stdio_init.part.0+0x30>)
 8000618:	4c0b      	ldr	r4, [pc, #44]	; (8000648 <global_stdio_init.part.0+0x34>)
 800061a:	4a0c      	ldr	r2, [pc, #48]	; (800064c <global_stdio_init.part.0+0x38>)
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	4620      	mov	r0, r4
 8000620:	2200      	movs	r2, #0
 8000622:	2104      	movs	r1, #4
 8000624:	f7ff ff94 	bl	8000550 <std>
 8000628:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800062c:	2201      	movs	r2, #1
 800062e:	2109      	movs	r1, #9
 8000630:	f7ff ff8e 	bl	8000550 <std>
 8000634:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000638:	2202      	movs	r2, #2
 800063a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800063e:	2112      	movs	r1, #18
 8000640:	f7ff bf86 	b.w	8000550 <std>
 8000644:	20000204 	.word	0x20000204
 8000648:	200000cc 	.word	0x200000cc
 800064c:	080005bd 	.word	0x080005bd

08000650 <__sfp_lock_acquire>:
 8000650:	4801      	ldr	r0, [pc, #4]	; (8000658 <__sfp_lock_acquire+0x8>)
 8000652:	f000 b90e 	b.w	8000872 <__retarget_lock_acquire_recursive>
 8000656:	bf00      	nop
 8000658:	2000020d 	.word	0x2000020d

0800065c <__sfp_lock_release>:
 800065c:	4801      	ldr	r0, [pc, #4]	; (8000664 <__sfp_lock_release+0x8>)
 800065e:	f000 b909 	b.w	8000874 <__retarget_lock_release_recursive>
 8000662:	bf00      	nop
 8000664:	2000020d 	.word	0x2000020d

08000668 <__sinit>:
 8000668:	b510      	push	{r4, lr}
 800066a:	4604      	mov	r4, r0
 800066c:	f7ff fff0 	bl	8000650 <__sfp_lock_acquire>
 8000670:	6a23      	ldr	r3, [r4, #32]
 8000672:	b11b      	cbz	r3, 800067c <__sinit+0x14>
 8000674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000678:	f7ff bff0 	b.w	800065c <__sfp_lock_release>
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <__sinit+0x28>)
 800067e:	6223      	str	r3, [r4, #32]
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <__sinit+0x2c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1f5      	bne.n	8000674 <__sinit+0xc>
 8000688:	f7ff ffc4 	bl	8000614 <global_stdio_init.part.0>
 800068c:	e7f2      	b.n	8000674 <__sinit+0xc>
 800068e:	bf00      	nop
 8000690:	080005d5 	.word	0x080005d5
 8000694:	20000204 	.word	0x20000204

08000698 <_fwalk_sglue>:
 8000698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800069c:	4607      	mov	r7, r0
 800069e:	4688      	mov	r8, r1
 80006a0:	4614      	mov	r4, r2
 80006a2:	2600      	movs	r6, #0
 80006a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006a8:	f1b9 0901 	subs.w	r9, r9, #1
 80006ac:	d505      	bpl.n	80006ba <_fwalk_sglue+0x22>
 80006ae:	6824      	ldr	r4, [r4, #0]
 80006b0:	2c00      	cmp	r4, #0
 80006b2:	d1f7      	bne.n	80006a4 <_fwalk_sglue+0xc>
 80006b4:	4630      	mov	r0, r6
 80006b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006ba:	89ab      	ldrh	r3, [r5, #12]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d907      	bls.n	80006d0 <_fwalk_sglue+0x38>
 80006c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006c4:	3301      	adds	r3, #1
 80006c6:	d003      	beq.n	80006d0 <_fwalk_sglue+0x38>
 80006c8:	4629      	mov	r1, r5
 80006ca:	4638      	mov	r0, r7
 80006cc:	47c0      	blx	r8
 80006ce:	4306      	orrs	r6, r0
 80006d0:	3568      	adds	r5, #104	; 0x68
 80006d2:	e7e9      	b.n	80006a8 <_fwalk_sglue+0x10>

080006d4 <iprintf>:
 80006d4:	b40f      	push	{r0, r1, r2, r3}
 80006d6:	b507      	push	{r0, r1, r2, lr}
 80006d8:	4906      	ldr	r1, [pc, #24]	; (80006f4 <iprintf+0x20>)
 80006da:	ab04      	add	r3, sp, #16
 80006dc:	6808      	ldr	r0, [r1, #0]
 80006de:	f853 2b04 	ldr.w	r2, [r3], #4
 80006e2:	6881      	ldr	r1, [r0, #8]
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	f000 f9f7 	bl	8000ad8 <_vfiprintf_r>
 80006ea:	b003      	add	sp, #12
 80006ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80006f0:	b004      	add	sp, #16
 80006f2:	4770      	bx	lr
 80006f4:	20000058 	.word	0x20000058

080006f8 <__sread>:
 80006f8:	b510      	push	{r4, lr}
 80006fa:	460c      	mov	r4, r1
 80006fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000700:	f000 f868 	bl	80007d4 <_read_r>
 8000704:	2800      	cmp	r0, #0
 8000706:	bfab      	itete	ge
 8000708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800070a:	89a3      	ldrhlt	r3, [r4, #12]
 800070c:	181b      	addge	r3, r3, r0
 800070e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000712:	bfac      	ite	ge
 8000714:	6563      	strge	r3, [r4, #84]	; 0x54
 8000716:	81a3      	strhlt	r3, [r4, #12]
 8000718:	bd10      	pop	{r4, pc}

0800071a <__swrite>:
 800071a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800071e:	461f      	mov	r7, r3
 8000720:	898b      	ldrh	r3, [r1, #12]
 8000722:	05db      	lsls	r3, r3, #23
 8000724:	4605      	mov	r5, r0
 8000726:	460c      	mov	r4, r1
 8000728:	4616      	mov	r6, r2
 800072a:	d505      	bpl.n	8000738 <__swrite+0x1e>
 800072c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000730:	2302      	movs	r3, #2
 8000732:	2200      	movs	r2, #0
 8000734:	f000 f83c 	bl	80007b0 <_lseek_r>
 8000738:	89a3      	ldrh	r3, [r4, #12]
 800073a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800073e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000742:	81a3      	strh	r3, [r4, #12]
 8000744:	4632      	mov	r2, r6
 8000746:	463b      	mov	r3, r7
 8000748:	4628      	mov	r0, r5
 800074a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800074e:	f000 b853 	b.w	80007f8 <_write_r>

08000752 <__sseek>:
 8000752:	b510      	push	{r4, lr}
 8000754:	460c      	mov	r4, r1
 8000756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800075a:	f000 f829 	bl	80007b0 <_lseek_r>
 800075e:	1c43      	adds	r3, r0, #1
 8000760:	89a3      	ldrh	r3, [r4, #12]
 8000762:	bf15      	itete	ne
 8000764:	6560      	strne	r0, [r4, #84]	; 0x54
 8000766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800076a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800076e:	81a3      	strheq	r3, [r4, #12]
 8000770:	bf18      	it	ne
 8000772:	81a3      	strhne	r3, [r4, #12]
 8000774:	bd10      	pop	{r4, pc}

08000776 <__sclose>:
 8000776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800077a:	f000 b809 	b.w	8000790 <_close_r>

0800077e <memset>:
 800077e:	4402      	add	r2, r0
 8000780:	4603      	mov	r3, r0
 8000782:	4293      	cmp	r3, r2
 8000784:	d100      	bne.n	8000788 <memset+0xa>
 8000786:	4770      	bx	lr
 8000788:	f803 1b01 	strb.w	r1, [r3], #1
 800078c:	e7f9      	b.n	8000782 <memset+0x4>
	...

08000790 <_close_r>:
 8000790:	b538      	push	{r3, r4, r5, lr}
 8000792:	4d06      	ldr	r5, [pc, #24]	; (80007ac <_close_r+0x1c>)
 8000794:	2300      	movs	r3, #0
 8000796:	4604      	mov	r4, r0
 8000798:	4608      	mov	r0, r1
 800079a:	602b      	str	r3, [r5, #0]
 800079c:	f7ff fe43 	bl	8000426 <_close>
 80007a0:	1c43      	adds	r3, r0, #1
 80007a2:	d102      	bne.n	80007aa <_close_r+0x1a>
 80007a4:	682b      	ldr	r3, [r5, #0]
 80007a6:	b103      	cbz	r3, 80007aa <_close_r+0x1a>
 80007a8:	6023      	str	r3, [r4, #0]
 80007aa:	bd38      	pop	{r3, r4, r5, pc}
 80007ac:	20000208 	.word	0x20000208

080007b0 <_lseek_r>:
 80007b0:	b538      	push	{r3, r4, r5, lr}
 80007b2:	4d07      	ldr	r5, [pc, #28]	; (80007d0 <_lseek_r+0x20>)
 80007b4:	4604      	mov	r4, r0
 80007b6:	4608      	mov	r0, r1
 80007b8:	4611      	mov	r1, r2
 80007ba:	2200      	movs	r2, #0
 80007bc:	602a      	str	r2, [r5, #0]
 80007be:	461a      	mov	r2, r3
 80007c0:	f7ff fe58 	bl	8000474 <_lseek>
 80007c4:	1c43      	adds	r3, r0, #1
 80007c6:	d102      	bne.n	80007ce <_lseek_r+0x1e>
 80007c8:	682b      	ldr	r3, [r5, #0]
 80007ca:	b103      	cbz	r3, 80007ce <_lseek_r+0x1e>
 80007cc:	6023      	str	r3, [r4, #0]
 80007ce:	bd38      	pop	{r3, r4, r5, pc}
 80007d0:	20000208 	.word	0x20000208

080007d4 <_read_r>:
 80007d4:	b538      	push	{r3, r4, r5, lr}
 80007d6:	4d07      	ldr	r5, [pc, #28]	; (80007f4 <_read_r+0x20>)
 80007d8:	4604      	mov	r4, r0
 80007da:	4608      	mov	r0, r1
 80007dc:	4611      	mov	r1, r2
 80007de:	2200      	movs	r2, #0
 80007e0:	602a      	str	r2, [r5, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	f7ff fde6 	bl	80003b4 <_read>
 80007e8:	1c43      	adds	r3, r0, #1
 80007ea:	d102      	bne.n	80007f2 <_read_r+0x1e>
 80007ec:	682b      	ldr	r3, [r5, #0]
 80007ee:	b103      	cbz	r3, 80007f2 <_read_r+0x1e>
 80007f0:	6023      	str	r3, [r4, #0]
 80007f2:	bd38      	pop	{r3, r4, r5, pc}
 80007f4:	20000208 	.word	0x20000208

080007f8 <_write_r>:
 80007f8:	b538      	push	{r3, r4, r5, lr}
 80007fa:	4d07      	ldr	r5, [pc, #28]	; (8000818 <_write_r+0x20>)
 80007fc:	4604      	mov	r4, r0
 80007fe:	4608      	mov	r0, r1
 8000800:	4611      	mov	r1, r2
 8000802:	2200      	movs	r2, #0
 8000804:	602a      	str	r2, [r5, #0]
 8000806:	461a      	mov	r2, r3
 8000808:	f7ff fdf1 	bl	80003ee <_write>
 800080c:	1c43      	adds	r3, r0, #1
 800080e:	d102      	bne.n	8000816 <_write_r+0x1e>
 8000810:	682b      	ldr	r3, [r5, #0]
 8000812:	b103      	cbz	r3, 8000816 <_write_r+0x1e>
 8000814:	6023      	str	r3, [r4, #0]
 8000816:	bd38      	pop	{r3, r4, r5, pc}
 8000818:	20000208 	.word	0x20000208

0800081c <__errno>:
 800081c:	4b01      	ldr	r3, [pc, #4]	; (8000824 <__errno+0x8>)
 800081e:	6818      	ldr	r0, [r3, #0]
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	20000058 	.word	0x20000058

08000828 <__libc_init_array>:
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	4d0d      	ldr	r5, [pc, #52]	; (8000860 <__libc_init_array+0x38>)
 800082c:	4c0d      	ldr	r4, [pc, #52]	; (8000864 <__libc_init_array+0x3c>)
 800082e:	1b64      	subs	r4, r4, r5
 8000830:	10a4      	asrs	r4, r4, #2
 8000832:	2600      	movs	r6, #0
 8000834:	42a6      	cmp	r6, r4
 8000836:	d109      	bne.n	800084c <__libc_init_array+0x24>
 8000838:	4d0b      	ldr	r5, [pc, #44]	; (8000868 <__libc_init_array+0x40>)
 800083a:	4c0c      	ldr	r4, [pc, #48]	; (800086c <__libc_init_array+0x44>)
 800083c:	f000 fdce 	bl	80013dc <_init>
 8000840:	1b64      	subs	r4, r4, r5
 8000842:	10a4      	asrs	r4, r4, #2
 8000844:	2600      	movs	r6, #0
 8000846:	42a6      	cmp	r6, r4
 8000848:	d105      	bne.n	8000856 <__libc_init_array+0x2e>
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000850:	4798      	blx	r3
 8000852:	3601      	adds	r6, #1
 8000854:	e7ee      	b.n	8000834 <__libc_init_array+0xc>
 8000856:	f855 3b04 	ldr.w	r3, [r5], #4
 800085a:	4798      	blx	r3
 800085c:	3601      	adds	r6, #1
 800085e:	e7f2      	b.n	8000846 <__libc_init_array+0x1e>
 8000860:	08001430 	.word	0x08001430
 8000864:	08001430 	.word	0x08001430
 8000868:	08001430 	.word	0x08001430
 800086c:	08001434 	.word	0x08001434

08000870 <__retarget_lock_init_recursive>:
 8000870:	4770      	bx	lr

08000872 <__retarget_lock_acquire_recursive>:
 8000872:	4770      	bx	lr

08000874 <__retarget_lock_release_recursive>:
 8000874:	4770      	bx	lr

08000876 <memcpy>:
 8000876:	440a      	add	r2, r1
 8000878:	4291      	cmp	r1, r2
 800087a:	f100 33ff 	add.w	r3, r0, #4294967295
 800087e:	d100      	bne.n	8000882 <memcpy+0xc>
 8000880:	4770      	bx	lr
 8000882:	b510      	push	{r4, lr}
 8000884:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000888:	f803 4f01 	strb.w	r4, [r3, #1]!
 800088c:	4291      	cmp	r1, r2
 800088e:	d1f9      	bne.n	8000884 <memcpy+0xe>
 8000890:	bd10      	pop	{r4, pc}
	...

08000894 <_free_r>:
 8000894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000896:	2900      	cmp	r1, #0
 8000898:	d044      	beq.n	8000924 <_free_r+0x90>
 800089a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800089e:	9001      	str	r0, [sp, #4]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	f1a1 0404 	sub.w	r4, r1, #4
 80008a6:	bfb8      	it	lt
 80008a8:	18e4      	addlt	r4, r4, r3
 80008aa:	f000 f8df 	bl	8000a6c <__malloc_lock>
 80008ae:	4a1e      	ldr	r2, [pc, #120]	; (8000928 <_free_r+0x94>)
 80008b0:	9801      	ldr	r0, [sp, #4]
 80008b2:	6813      	ldr	r3, [r2, #0]
 80008b4:	b933      	cbnz	r3, 80008c4 <_free_r+0x30>
 80008b6:	6063      	str	r3, [r4, #4]
 80008b8:	6014      	str	r4, [r2, #0]
 80008ba:	b003      	add	sp, #12
 80008bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80008c0:	f000 b8da 	b.w	8000a78 <__malloc_unlock>
 80008c4:	42a3      	cmp	r3, r4
 80008c6:	d908      	bls.n	80008da <_free_r+0x46>
 80008c8:	6825      	ldr	r5, [r4, #0]
 80008ca:	1961      	adds	r1, r4, r5
 80008cc:	428b      	cmp	r3, r1
 80008ce:	bf01      	itttt	eq
 80008d0:	6819      	ldreq	r1, [r3, #0]
 80008d2:	685b      	ldreq	r3, [r3, #4]
 80008d4:	1949      	addeq	r1, r1, r5
 80008d6:	6021      	streq	r1, [r4, #0]
 80008d8:	e7ed      	b.n	80008b6 <_free_r+0x22>
 80008da:	461a      	mov	r2, r3
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	b10b      	cbz	r3, 80008e4 <_free_r+0x50>
 80008e0:	42a3      	cmp	r3, r4
 80008e2:	d9fa      	bls.n	80008da <_free_r+0x46>
 80008e4:	6811      	ldr	r1, [r2, #0]
 80008e6:	1855      	adds	r5, r2, r1
 80008e8:	42a5      	cmp	r5, r4
 80008ea:	d10b      	bne.n	8000904 <_free_r+0x70>
 80008ec:	6824      	ldr	r4, [r4, #0]
 80008ee:	4421      	add	r1, r4
 80008f0:	1854      	adds	r4, r2, r1
 80008f2:	42a3      	cmp	r3, r4
 80008f4:	6011      	str	r1, [r2, #0]
 80008f6:	d1e0      	bne.n	80008ba <_free_r+0x26>
 80008f8:	681c      	ldr	r4, [r3, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	6053      	str	r3, [r2, #4]
 80008fe:	440c      	add	r4, r1
 8000900:	6014      	str	r4, [r2, #0]
 8000902:	e7da      	b.n	80008ba <_free_r+0x26>
 8000904:	d902      	bls.n	800090c <_free_r+0x78>
 8000906:	230c      	movs	r3, #12
 8000908:	6003      	str	r3, [r0, #0]
 800090a:	e7d6      	b.n	80008ba <_free_r+0x26>
 800090c:	6825      	ldr	r5, [r4, #0]
 800090e:	1961      	adds	r1, r4, r5
 8000910:	428b      	cmp	r3, r1
 8000912:	bf04      	itt	eq
 8000914:	6819      	ldreq	r1, [r3, #0]
 8000916:	685b      	ldreq	r3, [r3, #4]
 8000918:	6063      	str	r3, [r4, #4]
 800091a:	bf04      	itt	eq
 800091c:	1949      	addeq	r1, r1, r5
 800091e:	6021      	streq	r1, [r4, #0]
 8000920:	6054      	str	r4, [r2, #4]
 8000922:	e7ca      	b.n	80008ba <_free_r+0x26>
 8000924:	b003      	add	sp, #12
 8000926:	bd30      	pop	{r4, r5, pc}
 8000928:	20000210 	.word	0x20000210

0800092c <sbrk_aligned>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	4e0e      	ldr	r6, [pc, #56]	; (8000968 <sbrk_aligned+0x3c>)
 8000930:	460c      	mov	r4, r1
 8000932:	6831      	ldr	r1, [r6, #0]
 8000934:	4605      	mov	r5, r0
 8000936:	b911      	cbnz	r1, 800093e <sbrk_aligned+0x12>
 8000938:	f000 fcbc 	bl	80012b4 <_sbrk_r>
 800093c:	6030      	str	r0, [r6, #0]
 800093e:	4621      	mov	r1, r4
 8000940:	4628      	mov	r0, r5
 8000942:	f000 fcb7 	bl	80012b4 <_sbrk_r>
 8000946:	1c43      	adds	r3, r0, #1
 8000948:	d00a      	beq.n	8000960 <sbrk_aligned+0x34>
 800094a:	1cc4      	adds	r4, r0, #3
 800094c:	f024 0403 	bic.w	r4, r4, #3
 8000950:	42a0      	cmp	r0, r4
 8000952:	d007      	beq.n	8000964 <sbrk_aligned+0x38>
 8000954:	1a21      	subs	r1, r4, r0
 8000956:	4628      	mov	r0, r5
 8000958:	f000 fcac 	bl	80012b4 <_sbrk_r>
 800095c:	3001      	adds	r0, #1
 800095e:	d101      	bne.n	8000964 <sbrk_aligned+0x38>
 8000960:	f04f 34ff 	mov.w	r4, #4294967295
 8000964:	4620      	mov	r0, r4
 8000966:	bd70      	pop	{r4, r5, r6, pc}
 8000968:	20000214 	.word	0x20000214

0800096c <_malloc_r>:
 800096c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000970:	1ccd      	adds	r5, r1, #3
 8000972:	f025 0503 	bic.w	r5, r5, #3
 8000976:	3508      	adds	r5, #8
 8000978:	2d0c      	cmp	r5, #12
 800097a:	bf38      	it	cc
 800097c:	250c      	movcc	r5, #12
 800097e:	2d00      	cmp	r5, #0
 8000980:	4607      	mov	r7, r0
 8000982:	db01      	blt.n	8000988 <_malloc_r+0x1c>
 8000984:	42a9      	cmp	r1, r5
 8000986:	d905      	bls.n	8000994 <_malloc_r+0x28>
 8000988:	230c      	movs	r3, #12
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	2600      	movs	r6, #0
 800098e:	4630      	mov	r0, r6
 8000990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000994:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000a68 <_malloc_r+0xfc>
 8000998:	f000 f868 	bl	8000a6c <__malloc_lock>
 800099c:	f8d8 3000 	ldr.w	r3, [r8]
 80009a0:	461c      	mov	r4, r3
 80009a2:	bb5c      	cbnz	r4, 80009fc <_malloc_r+0x90>
 80009a4:	4629      	mov	r1, r5
 80009a6:	4638      	mov	r0, r7
 80009a8:	f7ff ffc0 	bl	800092c <sbrk_aligned>
 80009ac:	1c43      	adds	r3, r0, #1
 80009ae:	4604      	mov	r4, r0
 80009b0:	d155      	bne.n	8000a5e <_malloc_r+0xf2>
 80009b2:	f8d8 4000 	ldr.w	r4, [r8]
 80009b6:	4626      	mov	r6, r4
 80009b8:	2e00      	cmp	r6, #0
 80009ba:	d145      	bne.n	8000a48 <_malloc_r+0xdc>
 80009bc:	2c00      	cmp	r4, #0
 80009be:	d048      	beq.n	8000a52 <_malloc_r+0xe6>
 80009c0:	6823      	ldr	r3, [r4, #0]
 80009c2:	4631      	mov	r1, r6
 80009c4:	4638      	mov	r0, r7
 80009c6:	eb04 0903 	add.w	r9, r4, r3
 80009ca:	f000 fc73 	bl	80012b4 <_sbrk_r>
 80009ce:	4581      	cmp	r9, r0
 80009d0:	d13f      	bne.n	8000a52 <_malloc_r+0xe6>
 80009d2:	6821      	ldr	r1, [r4, #0]
 80009d4:	1a6d      	subs	r5, r5, r1
 80009d6:	4629      	mov	r1, r5
 80009d8:	4638      	mov	r0, r7
 80009da:	f7ff ffa7 	bl	800092c <sbrk_aligned>
 80009de:	3001      	adds	r0, #1
 80009e0:	d037      	beq.n	8000a52 <_malloc_r+0xe6>
 80009e2:	6823      	ldr	r3, [r4, #0]
 80009e4:	442b      	add	r3, r5
 80009e6:	6023      	str	r3, [r4, #0]
 80009e8:	f8d8 3000 	ldr.w	r3, [r8]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d038      	beq.n	8000a62 <_malloc_r+0xf6>
 80009f0:	685a      	ldr	r2, [r3, #4]
 80009f2:	42a2      	cmp	r2, r4
 80009f4:	d12b      	bne.n	8000a4e <_malloc_r+0xe2>
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	e00f      	b.n	8000a1c <_malloc_r+0xb0>
 80009fc:	6822      	ldr	r2, [r4, #0]
 80009fe:	1b52      	subs	r2, r2, r5
 8000a00:	d41f      	bmi.n	8000a42 <_malloc_r+0xd6>
 8000a02:	2a0b      	cmp	r2, #11
 8000a04:	d917      	bls.n	8000a36 <_malloc_r+0xca>
 8000a06:	1961      	adds	r1, r4, r5
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	6025      	str	r5, [r4, #0]
 8000a0c:	bf18      	it	ne
 8000a0e:	6059      	strne	r1, [r3, #4]
 8000a10:	6863      	ldr	r3, [r4, #4]
 8000a12:	bf08      	it	eq
 8000a14:	f8c8 1000 	streq.w	r1, [r8]
 8000a18:	5162      	str	r2, [r4, r5]
 8000a1a:	604b      	str	r3, [r1, #4]
 8000a1c:	4638      	mov	r0, r7
 8000a1e:	f104 060b 	add.w	r6, r4, #11
 8000a22:	f000 f829 	bl	8000a78 <__malloc_unlock>
 8000a26:	f026 0607 	bic.w	r6, r6, #7
 8000a2a:	1d23      	adds	r3, r4, #4
 8000a2c:	1af2      	subs	r2, r6, r3
 8000a2e:	d0ae      	beq.n	800098e <_malloc_r+0x22>
 8000a30:	1b9b      	subs	r3, r3, r6
 8000a32:	50a3      	str	r3, [r4, r2]
 8000a34:	e7ab      	b.n	800098e <_malloc_r+0x22>
 8000a36:	42a3      	cmp	r3, r4
 8000a38:	6862      	ldr	r2, [r4, #4]
 8000a3a:	d1dd      	bne.n	80009f8 <_malloc_r+0x8c>
 8000a3c:	f8c8 2000 	str.w	r2, [r8]
 8000a40:	e7ec      	b.n	8000a1c <_malloc_r+0xb0>
 8000a42:	4623      	mov	r3, r4
 8000a44:	6864      	ldr	r4, [r4, #4]
 8000a46:	e7ac      	b.n	80009a2 <_malloc_r+0x36>
 8000a48:	4634      	mov	r4, r6
 8000a4a:	6876      	ldr	r6, [r6, #4]
 8000a4c:	e7b4      	b.n	80009b8 <_malloc_r+0x4c>
 8000a4e:	4613      	mov	r3, r2
 8000a50:	e7cc      	b.n	80009ec <_malloc_r+0x80>
 8000a52:	230c      	movs	r3, #12
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4638      	mov	r0, r7
 8000a58:	f000 f80e 	bl	8000a78 <__malloc_unlock>
 8000a5c:	e797      	b.n	800098e <_malloc_r+0x22>
 8000a5e:	6025      	str	r5, [r4, #0]
 8000a60:	e7dc      	b.n	8000a1c <_malloc_r+0xb0>
 8000a62:	605b      	str	r3, [r3, #4]
 8000a64:	deff      	udf	#255	; 0xff
 8000a66:	bf00      	nop
 8000a68:	20000210 	.word	0x20000210

08000a6c <__malloc_lock>:
 8000a6c:	4801      	ldr	r0, [pc, #4]	; (8000a74 <__malloc_lock+0x8>)
 8000a6e:	f7ff bf00 	b.w	8000872 <__retarget_lock_acquire_recursive>
 8000a72:	bf00      	nop
 8000a74:	2000020c 	.word	0x2000020c

08000a78 <__malloc_unlock>:
 8000a78:	4801      	ldr	r0, [pc, #4]	; (8000a80 <__malloc_unlock+0x8>)
 8000a7a:	f7ff befb 	b.w	8000874 <__retarget_lock_release_recursive>
 8000a7e:	bf00      	nop
 8000a80:	2000020c 	.word	0x2000020c

08000a84 <__sfputc_r>:
 8000a84:	6893      	ldr	r3, [r2, #8]
 8000a86:	3b01      	subs	r3, #1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	b410      	push	{r4}
 8000a8c:	6093      	str	r3, [r2, #8]
 8000a8e:	da08      	bge.n	8000aa2 <__sfputc_r+0x1e>
 8000a90:	6994      	ldr	r4, [r2, #24]
 8000a92:	42a3      	cmp	r3, r4
 8000a94:	db01      	blt.n	8000a9a <__sfputc_r+0x16>
 8000a96:	290a      	cmp	r1, #10
 8000a98:	d103      	bne.n	8000aa2 <__sfputc_r+0x1e>
 8000a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a9e:	f000 bb73 	b.w	8001188 <__swbuf_r>
 8000aa2:	6813      	ldr	r3, [r2, #0]
 8000aa4:	1c58      	adds	r0, r3, #1
 8000aa6:	6010      	str	r0, [r2, #0]
 8000aa8:	7019      	strb	r1, [r3, #0]
 8000aaa:	4608      	mov	r0, r1
 8000aac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <__sfputs_r>:
 8000ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab4:	4606      	mov	r6, r0
 8000ab6:	460f      	mov	r7, r1
 8000ab8:	4614      	mov	r4, r2
 8000aba:	18d5      	adds	r5, r2, r3
 8000abc:	42ac      	cmp	r4, r5
 8000abe:	d101      	bne.n	8000ac4 <__sfputs_r+0x12>
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	e007      	b.n	8000ad4 <__sfputs_r+0x22>
 8000ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ac8:	463a      	mov	r2, r7
 8000aca:	4630      	mov	r0, r6
 8000acc:	f7ff ffda 	bl	8000a84 <__sfputc_r>
 8000ad0:	1c43      	adds	r3, r0, #1
 8000ad2:	d1f3      	bne.n	8000abc <__sfputs_r+0xa>
 8000ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ad8 <_vfiprintf_r>:
 8000ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000adc:	460d      	mov	r5, r1
 8000ade:	b09d      	sub	sp, #116	; 0x74
 8000ae0:	4614      	mov	r4, r2
 8000ae2:	4698      	mov	r8, r3
 8000ae4:	4606      	mov	r6, r0
 8000ae6:	b118      	cbz	r0, 8000af0 <_vfiprintf_r+0x18>
 8000ae8:	6a03      	ldr	r3, [r0, #32]
 8000aea:	b90b      	cbnz	r3, 8000af0 <_vfiprintf_r+0x18>
 8000aec:	f7ff fdbc 	bl	8000668 <__sinit>
 8000af0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000af2:	07d9      	lsls	r1, r3, #31
 8000af4:	d405      	bmi.n	8000b02 <_vfiprintf_r+0x2a>
 8000af6:	89ab      	ldrh	r3, [r5, #12]
 8000af8:	059a      	lsls	r2, r3, #22
 8000afa:	d402      	bmi.n	8000b02 <_vfiprintf_r+0x2a>
 8000afc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000afe:	f7ff feb8 	bl	8000872 <__retarget_lock_acquire_recursive>
 8000b02:	89ab      	ldrh	r3, [r5, #12]
 8000b04:	071b      	lsls	r3, r3, #28
 8000b06:	d501      	bpl.n	8000b0c <_vfiprintf_r+0x34>
 8000b08:	692b      	ldr	r3, [r5, #16]
 8000b0a:	b99b      	cbnz	r3, 8000b34 <_vfiprintf_r+0x5c>
 8000b0c:	4629      	mov	r1, r5
 8000b0e:	4630      	mov	r0, r6
 8000b10:	f000 fb78 	bl	8001204 <__swsetup_r>
 8000b14:	b170      	cbz	r0, 8000b34 <_vfiprintf_r+0x5c>
 8000b16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b18:	07dc      	lsls	r4, r3, #31
 8000b1a:	d504      	bpl.n	8000b26 <_vfiprintf_r+0x4e>
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	b01d      	add	sp, #116	; 0x74
 8000b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b26:	89ab      	ldrh	r3, [r5, #12]
 8000b28:	0598      	lsls	r0, r3, #22
 8000b2a:	d4f7      	bmi.n	8000b1c <_vfiprintf_r+0x44>
 8000b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b2e:	f7ff fea1 	bl	8000874 <__retarget_lock_release_recursive>
 8000b32:	e7f3      	b.n	8000b1c <_vfiprintf_r+0x44>
 8000b34:	2300      	movs	r3, #0
 8000b36:	9309      	str	r3, [sp, #36]	; 0x24
 8000b38:	2320      	movs	r3, #32
 8000b3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b42:	2330      	movs	r3, #48	; 0x30
 8000b44:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000cf8 <_vfiprintf_r+0x220>
 8000b48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b4c:	f04f 0901 	mov.w	r9, #1
 8000b50:	4623      	mov	r3, r4
 8000b52:	469a      	mov	sl, r3
 8000b54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b58:	b10a      	cbz	r2, 8000b5e <_vfiprintf_r+0x86>
 8000b5a:	2a25      	cmp	r2, #37	; 0x25
 8000b5c:	d1f9      	bne.n	8000b52 <_vfiprintf_r+0x7a>
 8000b5e:	ebba 0b04 	subs.w	fp, sl, r4
 8000b62:	d00b      	beq.n	8000b7c <_vfiprintf_r+0xa4>
 8000b64:	465b      	mov	r3, fp
 8000b66:	4622      	mov	r2, r4
 8000b68:	4629      	mov	r1, r5
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	f7ff ffa1 	bl	8000ab2 <__sfputs_r>
 8000b70:	3001      	adds	r0, #1
 8000b72:	f000 80a9 	beq.w	8000cc8 <_vfiprintf_r+0x1f0>
 8000b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b78:	445a      	add	r2, fp
 8000b7a:	9209      	str	r2, [sp, #36]	; 0x24
 8000b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	f000 80a1 	beq.w	8000cc8 <_vfiprintf_r+0x1f0>
 8000b86:	2300      	movs	r3, #0
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b90:	f10a 0a01 	add.w	sl, sl, #1
 8000b94:	9304      	str	r3, [sp, #16]
 8000b96:	9307      	str	r3, [sp, #28]
 8000b98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b9c:	931a      	str	r3, [sp, #104]	; 0x68
 8000b9e:	4654      	mov	r4, sl
 8000ba0:	2205      	movs	r2, #5
 8000ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ba6:	4854      	ldr	r0, [pc, #336]	; (8000cf8 <_vfiprintf_r+0x220>)
 8000ba8:	f7ff fb22 	bl	80001f0 <memchr>
 8000bac:	9a04      	ldr	r2, [sp, #16]
 8000bae:	b9d8      	cbnz	r0, 8000be8 <_vfiprintf_r+0x110>
 8000bb0:	06d1      	lsls	r1, r2, #27
 8000bb2:	bf44      	itt	mi
 8000bb4:	2320      	movmi	r3, #32
 8000bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bba:	0713      	lsls	r3, r2, #28
 8000bbc:	bf44      	itt	mi
 8000bbe:	232b      	movmi	r3, #43	; 0x2b
 8000bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8000bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8000bca:	d015      	beq.n	8000bf8 <_vfiprintf_r+0x120>
 8000bcc:	9a07      	ldr	r2, [sp, #28]
 8000bce:	4654      	mov	r4, sl
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f04f 0c0a 	mov.w	ip, #10
 8000bd6:	4621      	mov	r1, r4
 8000bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bdc:	3b30      	subs	r3, #48	; 0x30
 8000bde:	2b09      	cmp	r3, #9
 8000be0:	d94d      	bls.n	8000c7e <_vfiprintf_r+0x1a6>
 8000be2:	b1b0      	cbz	r0, 8000c12 <_vfiprintf_r+0x13a>
 8000be4:	9207      	str	r2, [sp, #28]
 8000be6:	e014      	b.n	8000c12 <_vfiprintf_r+0x13a>
 8000be8:	eba0 0308 	sub.w	r3, r0, r8
 8000bec:	fa09 f303 	lsl.w	r3, r9, r3
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	9304      	str	r3, [sp, #16]
 8000bf4:	46a2      	mov	sl, r4
 8000bf6:	e7d2      	b.n	8000b9e <_vfiprintf_r+0xc6>
 8000bf8:	9b03      	ldr	r3, [sp, #12]
 8000bfa:	1d19      	adds	r1, r3, #4
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	9103      	str	r1, [sp, #12]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	bfbb      	ittet	lt
 8000c04:	425b      	neglt	r3, r3
 8000c06:	f042 0202 	orrlt.w	r2, r2, #2
 8000c0a:	9307      	strge	r3, [sp, #28]
 8000c0c:	9307      	strlt	r3, [sp, #28]
 8000c0e:	bfb8      	it	lt
 8000c10:	9204      	strlt	r2, [sp, #16]
 8000c12:	7823      	ldrb	r3, [r4, #0]
 8000c14:	2b2e      	cmp	r3, #46	; 0x2e
 8000c16:	d10c      	bne.n	8000c32 <_vfiprintf_r+0x15a>
 8000c18:	7863      	ldrb	r3, [r4, #1]
 8000c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8000c1c:	d134      	bne.n	8000c88 <_vfiprintf_r+0x1b0>
 8000c1e:	9b03      	ldr	r3, [sp, #12]
 8000c20:	1d1a      	adds	r2, r3, #4
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	9203      	str	r2, [sp, #12]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	bfb8      	it	lt
 8000c2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8000c2e:	3402      	adds	r4, #2
 8000c30:	9305      	str	r3, [sp, #20]
 8000c32:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000d08 <_vfiprintf_r+0x230>
 8000c36:	7821      	ldrb	r1, [r4, #0]
 8000c38:	2203      	movs	r2, #3
 8000c3a:	4650      	mov	r0, sl
 8000c3c:	f7ff fad8 	bl	80001f0 <memchr>
 8000c40:	b138      	cbz	r0, 8000c52 <_vfiprintf_r+0x17a>
 8000c42:	9b04      	ldr	r3, [sp, #16]
 8000c44:	eba0 000a 	sub.w	r0, r0, sl
 8000c48:	2240      	movs	r2, #64	; 0x40
 8000c4a:	4082      	lsls	r2, r0
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	3401      	adds	r4, #1
 8000c50:	9304      	str	r3, [sp, #16]
 8000c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c56:	4829      	ldr	r0, [pc, #164]	; (8000cfc <_vfiprintf_r+0x224>)
 8000c58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c5c:	2206      	movs	r2, #6
 8000c5e:	f7ff fac7 	bl	80001f0 <memchr>
 8000c62:	2800      	cmp	r0, #0
 8000c64:	d03f      	beq.n	8000ce6 <_vfiprintf_r+0x20e>
 8000c66:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <_vfiprintf_r+0x228>)
 8000c68:	bb1b      	cbnz	r3, 8000cb2 <_vfiprintf_r+0x1da>
 8000c6a:	9b03      	ldr	r3, [sp, #12]
 8000c6c:	3307      	adds	r3, #7
 8000c6e:	f023 0307 	bic.w	r3, r3, #7
 8000c72:	3308      	adds	r3, #8
 8000c74:	9303      	str	r3, [sp, #12]
 8000c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c78:	443b      	add	r3, r7
 8000c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8000c7c:	e768      	b.n	8000b50 <_vfiprintf_r+0x78>
 8000c7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c82:	460c      	mov	r4, r1
 8000c84:	2001      	movs	r0, #1
 8000c86:	e7a6      	b.n	8000bd6 <_vfiprintf_r+0xfe>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	3401      	adds	r4, #1
 8000c8c:	9305      	str	r3, [sp, #20]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f04f 0c0a 	mov.w	ip, #10
 8000c94:	4620      	mov	r0, r4
 8000c96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c9a:	3a30      	subs	r2, #48	; 0x30
 8000c9c:	2a09      	cmp	r2, #9
 8000c9e:	d903      	bls.n	8000ca8 <_vfiprintf_r+0x1d0>
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d0c6      	beq.n	8000c32 <_vfiprintf_r+0x15a>
 8000ca4:	9105      	str	r1, [sp, #20]
 8000ca6:	e7c4      	b.n	8000c32 <_vfiprintf_r+0x15a>
 8000ca8:	fb0c 2101 	mla	r1, ip, r1, r2
 8000cac:	4604      	mov	r4, r0
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e7f0      	b.n	8000c94 <_vfiprintf_r+0x1bc>
 8000cb2:	ab03      	add	r3, sp, #12
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	462a      	mov	r2, r5
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <_vfiprintf_r+0x22c>)
 8000cba:	a904      	add	r1, sp, #16
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	f3af 8000 	nop.w
 8000cc2:	4607      	mov	r7, r0
 8000cc4:	1c78      	adds	r0, r7, #1
 8000cc6:	d1d6      	bne.n	8000c76 <_vfiprintf_r+0x19e>
 8000cc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000cca:	07d9      	lsls	r1, r3, #31
 8000ccc:	d405      	bmi.n	8000cda <_vfiprintf_r+0x202>
 8000cce:	89ab      	ldrh	r3, [r5, #12]
 8000cd0:	059a      	lsls	r2, r3, #22
 8000cd2:	d402      	bmi.n	8000cda <_vfiprintf_r+0x202>
 8000cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cd6:	f7ff fdcd 	bl	8000874 <__retarget_lock_release_recursive>
 8000cda:	89ab      	ldrh	r3, [r5, #12]
 8000cdc:	065b      	lsls	r3, r3, #25
 8000cde:	f53f af1d 	bmi.w	8000b1c <_vfiprintf_r+0x44>
 8000ce2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ce4:	e71c      	b.n	8000b20 <_vfiprintf_r+0x48>
 8000ce6:	ab03      	add	r3, sp, #12
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	462a      	mov	r2, r5
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <_vfiprintf_r+0x22c>)
 8000cee:	a904      	add	r1, sp, #16
 8000cf0:	4630      	mov	r0, r6
 8000cf2:	f000 f879 	bl	8000de8 <_printf_i>
 8000cf6:	e7e4      	b.n	8000cc2 <_vfiprintf_r+0x1ea>
 8000cf8:	080013fd 	.word	0x080013fd
 8000cfc:	08001407 	.word	0x08001407
 8000d00:	00000000 	.word	0x00000000
 8000d04:	08000ab3 	.word	0x08000ab3
 8000d08:	08001403 	.word	0x08001403

08000d0c <_printf_common>:
 8000d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d10:	4616      	mov	r6, r2
 8000d12:	4699      	mov	r9, r3
 8000d14:	688a      	ldr	r2, [r1, #8]
 8000d16:	690b      	ldr	r3, [r1, #16]
 8000d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	bfb8      	it	lt
 8000d20:	4613      	movlt	r3, r2
 8000d22:	6033      	str	r3, [r6, #0]
 8000d24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d28:	4607      	mov	r7, r0
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	b10a      	cbz	r2, 8000d32 <_printf_common+0x26>
 8000d2e:	3301      	adds	r3, #1
 8000d30:	6033      	str	r3, [r6, #0]
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	0699      	lsls	r1, r3, #26
 8000d36:	bf42      	ittt	mi
 8000d38:	6833      	ldrmi	r3, [r6, #0]
 8000d3a:	3302      	addmi	r3, #2
 8000d3c:	6033      	strmi	r3, [r6, #0]
 8000d3e:	6825      	ldr	r5, [r4, #0]
 8000d40:	f015 0506 	ands.w	r5, r5, #6
 8000d44:	d106      	bne.n	8000d54 <_printf_common+0x48>
 8000d46:	f104 0a19 	add.w	sl, r4, #25
 8000d4a:	68e3      	ldr	r3, [r4, #12]
 8000d4c:	6832      	ldr	r2, [r6, #0]
 8000d4e:	1a9b      	subs	r3, r3, r2
 8000d50:	42ab      	cmp	r3, r5
 8000d52:	dc26      	bgt.n	8000da2 <_printf_common+0x96>
 8000d54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d58:	1e13      	subs	r3, r2, #0
 8000d5a:	6822      	ldr	r2, [r4, #0]
 8000d5c:	bf18      	it	ne
 8000d5e:	2301      	movne	r3, #1
 8000d60:	0692      	lsls	r2, r2, #26
 8000d62:	d42b      	bmi.n	8000dbc <_printf_common+0xb0>
 8000d64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d68:	4649      	mov	r1, r9
 8000d6a:	4638      	mov	r0, r7
 8000d6c:	47c0      	blx	r8
 8000d6e:	3001      	adds	r0, #1
 8000d70:	d01e      	beq.n	8000db0 <_printf_common+0xa4>
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	6922      	ldr	r2, [r4, #16]
 8000d76:	f003 0306 	and.w	r3, r3, #6
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf02      	ittt	eq
 8000d7e:	68e5      	ldreq	r5, [r4, #12]
 8000d80:	6833      	ldreq	r3, [r6, #0]
 8000d82:	1aed      	subeq	r5, r5, r3
 8000d84:	68a3      	ldr	r3, [r4, #8]
 8000d86:	bf0c      	ite	eq
 8000d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d8c:	2500      	movne	r5, #0
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	bfc4      	itt	gt
 8000d92:	1a9b      	subgt	r3, r3, r2
 8000d94:	18ed      	addgt	r5, r5, r3
 8000d96:	2600      	movs	r6, #0
 8000d98:	341a      	adds	r4, #26
 8000d9a:	42b5      	cmp	r5, r6
 8000d9c:	d11a      	bne.n	8000dd4 <_printf_common+0xc8>
 8000d9e:	2000      	movs	r0, #0
 8000da0:	e008      	b.n	8000db4 <_printf_common+0xa8>
 8000da2:	2301      	movs	r3, #1
 8000da4:	4652      	mov	r2, sl
 8000da6:	4649      	mov	r1, r9
 8000da8:	4638      	mov	r0, r7
 8000daa:	47c0      	blx	r8
 8000dac:	3001      	adds	r0, #1
 8000dae:	d103      	bne.n	8000db8 <_printf_common+0xac>
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db8:	3501      	adds	r5, #1
 8000dba:	e7c6      	b.n	8000d4a <_printf_common+0x3e>
 8000dbc:	18e1      	adds	r1, r4, r3
 8000dbe:	1c5a      	adds	r2, r3, #1
 8000dc0:	2030      	movs	r0, #48	; 0x30
 8000dc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000dc6:	4422      	add	r2, r4
 8000dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000dcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	e7c7      	b.n	8000d64 <_printf_common+0x58>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	4622      	mov	r2, r4
 8000dd8:	4649      	mov	r1, r9
 8000dda:	4638      	mov	r0, r7
 8000ddc:	47c0      	blx	r8
 8000dde:	3001      	adds	r0, #1
 8000de0:	d0e6      	beq.n	8000db0 <_printf_common+0xa4>
 8000de2:	3601      	adds	r6, #1
 8000de4:	e7d9      	b.n	8000d9a <_printf_common+0x8e>
	...

08000de8 <_printf_i>:
 8000de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000dec:	7e0f      	ldrb	r7, [r1, #24]
 8000dee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000df0:	2f78      	cmp	r7, #120	; 0x78
 8000df2:	4691      	mov	r9, r2
 8000df4:	4680      	mov	r8, r0
 8000df6:	460c      	mov	r4, r1
 8000df8:	469a      	mov	sl, r3
 8000dfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000dfe:	d807      	bhi.n	8000e10 <_printf_i+0x28>
 8000e00:	2f62      	cmp	r7, #98	; 0x62
 8000e02:	d80a      	bhi.n	8000e1a <_printf_i+0x32>
 8000e04:	2f00      	cmp	r7, #0
 8000e06:	f000 80d4 	beq.w	8000fb2 <_printf_i+0x1ca>
 8000e0a:	2f58      	cmp	r7, #88	; 0x58
 8000e0c:	f000 80c0 	beq.w	8000f90 <_printf_i+0x1a8>
 8000e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000e18:	e03a      	b.n	8000e90 <_printf_i+0xa8>
 8000e1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000e1e:	2b15      	cmp	r3, #21
 8000e20:	d8f6      	bhi.n	8000e10 <_printf_i+0x28>
 8000e22:	a101      	add	r1, pc, #4	; (adr r1, 8000e28 <_printf_i+0x40>)
 8000e24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e28:	08000e81 	.word	0x08000e81
 8000e2c:	08000e95 	.word	0x08000e95
 8000e30:	08000e11 	.word	0x08000e11
 8000e34:	08000e11 	.word	0x08000e11
 8000e38:	08000e11 	.word	0x08000e11
 8000e3c:	08000e11 	.word	0x08000e11
 8000e40:	08000e95 	.word	0x08000e95
 8000e44:	08000e11 	.word	0x08000e11
 8000e48:	08000e11 	.word	0x08000e11
 8000e4c:	08000e11 	.word	0x08000e11
 8000e50:	08000e11 	.word	0x08000e11
 8000e54:	08000f99 	.word	0x08000f99
 8000e58:	08000ec1 	.word	0x08000ec1
 8000e5c:	08000f53 	.word	0x08000f53
 8000e60:	08000e11 	.word	0x08000e11
 8000e64:	08000e11 	.word	0x08000e11
 8000e68:	08000fbb 	.word	0x08000fbb
 8000e6c:	08000e11 	.word	0x08000e11
 8000e70:	08000ec1 	.word	0x08000ec1
 8000e74:	08000e11 	.word	0x08000e11
 8000e78:	08000e11 	.word	0x08000e11
 8000e7c:	08000f5b 	.word	0x08000f5b
 8000e80:	682b      	ldr	r3, [r5, #0]
 8000e82:	1d1a      	adds	r2, r3, #4
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	602a      	str	r2, [r5, #0]
 8000e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e90:	2301      	movs	r3, #1
 8000e92:	e09f      	b.n	8000fd4 <_printf_i+0x1ec>
 8000e94:	6820      	ldr	r0, [r4, #0]
 8000e96:	682b      	ldr	r3, [r5, #0]
 8000e98:	0607      	lsls	r7, r0, #24
 8000e9a:	f103 0104 	add.w	r1, r3, #4
 8000e9e:	6029      	str	r1, [r5, #0]
 8000ea0:	d501      	bpl.n	8000ea6 <_printf_i+0xbe>
 8000ea2:	681e      	ldr	r6, [r3, #0]
 8000ea4:	e003      	b.n	8000eae <_printf_i+0xc6>
 8000ea6:	0646      	lsls	r6, r0, #25
 8000ea8:	d5fb      	bpl.n	8000ea2 <_printf_i+0xba>
 8000eaa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000eae:	2e00      	cmp	r6, #0
 8000eb0:	da03      	bge.n	8000eba <_printf_i+0xd2>
 8000eb2:	232d      	movs	r3, #45	; 0x2d
 8000eb4:	4276      	negs	r6, r6
 8000eb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000eba:	485a      	ldr	r0, [pc, #360]	; (8001024 <_printf_i+0x23c>)
 8000ebc:	230a      	movs	r3, #10
 8000ebe:	e012      	b.n	8000ee6 <_printf_i+0xfe>
 8000ec0:	682b      	ldr	r3, [r5, #0]
 8000ec2:	6820      	ldr	r0, [r4, #0]
 8000ec4:	1d19      	adds	r1, r3, #4
 8000ec6:	6029      	str	r1, [r5, #0]
 8000ec8:	0605      	lsls	r5, r0, #24
 8000eca:	d501      	bpl.n	8000ed0 <_printf_i+0xe8>
 8000ecc:	681e      	ldr	r6, [r3, #0]
 8000ece:	e002      	b.n	8000ed6 <_printf_i+0xee>
 8000ed0:	0641      	lsls	r1, r0, #25
 8000ed2:	d5fb      	bpl.n	8000ecc <_printf_i+0xe4>
 8000ed4:	881e      	ldrh	r6, [r3, #0]
 8000ed6:	4853      	ldr	r0, [pc, #332]	; (8001024 <_printf_i+0x23c>)
 8000ed8:	2f6f      	cmp	r7, #111	; 0x6f
 8000eda:	bf0c      	ite	eq
 8000edc:	2308      	moveq	r3, #8
 8000ede:	230a      	movne	r3, #10
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000ee6:	6865      	ldr	r5, [r4, #4]
 8000ee8:	60a5      	str	r5, [r4, #8]
 8000eea:	2d00      	cmp	r5, #0
 8000eec:	bfa2      	ittt	ge
 8000eee:	6821      	ldrge	r1, [r4, #0]
 8000ef0:	f021 0104 	bicge.w	r1, r1, #4
 8000ef4:	6021      	strge	r1, [r4, #0]
 8000ef6:	b90e      	cbnz	r6, 8000efc <_printf_i+0x114>
 8000ef8:	2d00      	cmp	r5, #0
 8000efa:	d04b      	beq.n	8000f94 <_printf_i+0x1ac>
 8000efc:	4615      	mov	r5, r2
 8000efe:	fbb6 f1f3 	udiv	r1, r6, r3
 8000f02:	fb03 6711 	mls	r7, r3, r1, r6
 8000f06:	5dc7      	ldrb	r7, [r0, r7]
 8000f08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000f0c:	4637      	mov	r7, r6
 8000f0e:	42bb      	cmp	r3, r7
 8000f10:	460e      	mov	r6, r1
 8000f12:	d9f4      	bls.n	8000efe <_printf_i+0x116>
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d10b      	bne.n	8000f30 <_printf_i+0x148>
 8000f18:	6823      	ldr	r3, [r4, #0]
 8000f1a:	07de      	lsls	r6, r3, #31
 8000f1c:	d508      	bpl.n	8000f30 <_printf_i+0x148>
 8000f1e:	6923      	ldr	r3, [r4, #16]
 8000f20:	6861      	ldr	r1, [r4, #4]
 8000f22:	4299      	cmp	r1, r3
 8000f24:	bfde      	ittt	le
 8000f26:	2330      	movle	r3, #48	; 0x30
 8000f28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000f2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000f30:	1b52      	subs	r2, r2, r5
 8000f32:	6122      	str	r2, [r4, #16]
 8000f34:	f8cd a000 	str.w	sl, [sp]
 8000f38:	464b      	mov	r3, r9
 8000f3a:	aa03      	add	r2, sp, #12
 8000f3c:	4621      	mov	r1, r4
 8000f3e:	4640      	mov	r0, r8
 8000f40:	f7ff fee4 	bl	8000d0c <_printf_common>
 8000f44:	3001      	adds	r0, #1
 8000f46:	d14a      	bne.n	8000fde <_printf_i+0x1f6>
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	b004      	add	sp, #16
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	6823      	ldr	r3, [r4, #0]
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	6023      	str	r3, [r4, #0]
 8000f5a:	4833      	ldr	r0, [pc, #204]	; (8001028 <_printf_i+0x240>)
 8000f5c:	2778      	movs	r7, #120	; 0x78
 8000f5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000f62:	6823      	ldr	r3, [r4, #0]
 8000f64:	6829      	ldr	r1, [r5, #0]
 8000f66:	061f      	lsls	r7, r3, #24
 8000f68:	f851 6b04 	ldr.w	r6, [r1], #4
 8000f6c:	d402      	bmi.n	8000f74 <_printf_i+0x18c>
 8000f6e:	065f      	lsls	r7, r3, #25
 8000f70:	bf48      	it	mi
 8000f72:	b2b6      	uxthmi	r6, r6
 8000f74:	07df      	lsls	r7, r3, #31
 8000f76:	bf48      	it	mi
 8000f78:	f043 0320 	orrmi.w	r3, r3, #32
 8000f7c:	6029      	str	r1, [r5, #0]
 8000f7e:	bf48      	it	mi
 8000f80:	6023      	strmi	r3, [r4, #0]
 8000f82:	b91e      	cbnz	r6, 8000f8c <_printf_i+0x1a4>
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	f023 0320 	bic.w	r3, r3, #32
 8000f8a:	6023      	str	r3, [r4, #0]
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	e7a7      	b.n	8000ee0 <_printf_i+0xf8>
 8000f90:	4824      	ldr	r0, [pc, #144]	; (8001024 <_printf_i+0x23c>)
 8000f92:	e7e4      	b.n	8000f5e <_printf_i+0x176>
 8000f94:	4615      	mov	r5, r2
 8000f96:	e7bd      	b.n	8000f14 <_printf_i+0x12c>
 8000f98:	682b      	ldr	r3, [r5, #0]
 8000f9a:	6826      	ldr	r6, [r4, #0]
 8000f9c:	6961      	ldr	r1, [r4, #20]
 8000f9e:	1d18      	adds	r0, r3, #4
 8000fa0:	6028      	str	r0, [r5, #0]
 8000fa2:	0635      	lsls	r5, r6, #24
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	d501      	bpl.n	8000fac <_printf_i+0x1c4>
 8000fa8:	6019      	str	r1, [r3, #0]
 8000faa:	e002      	b.n	8000fb2 <_printf_i+0x1ca>
 8000fac:	0670      	lsls	r0, r6, #25
 8000fae:	d5fb      	bpl.n	8000fa8 <_printf_i+0x1c0>
 8000fb0:	8019      	strh	r1, [r3, #0]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	6123      	str	r3, [r4, #16]
 8000fb6:	4615      	mov	r5, r2
 8000fb8:	e7bc      	b.n	8000f34 <_printf_i+0x14c>
 8000fba:	682b      	ldr	r3, [r5, #0]
 8000fbc:	1d1a      	adds	r2, r3, #4
 8000fbe:	602a      	str	r2, [r5, #0]
 8000fc0:	681d      	ldr	r5, [r3, #0]
 8000fc2:	6862      	ldr	r2, [r4, #4]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4628      	mov	r0, r5
 8000fc8:	f7ff f912 	bl	80001f0 <memchr>
 8000fcc:	b108      	cbz	r0, 8000fd2 <_printf_i+0x1ea>
 8000fce:	1b40      	subs	r0, r0, r5
 8000fd0:	6060      	str	r0, [r4, #4]
 8000fd2:	6863      	ldr	r3, [r4, #4]
 8000fd4:	6123      	str	r3, [r4, #16]
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fdc:	e7aa      	b.n	8000f34 <_printf_i+0x14c>
 8000fde:	6923      	ldr	r3, [r4, #16]
 8000fe0:	462a      	mov	r2, r5
 8000fe2:	4649      	mov	r1, r9
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	47d0      	blx	sl
 8000fe8:	3001      	adds	r0, #1
 8000fea:	d0ad      	beq.n	8000f48 <_printf_i+0x160>
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	079b      	lsls	r3, r3, #30
 8000ff0:	d413      	bmi.n	800101a <_printf_i+0x232>
 8000ff2:	68e0      	ldr	r0, [r4, #12]
 8000ff4:	9b03      	ldr	r3, [sp, #12]
 8000ff6:	4298      	cmp	r0, r3
 8000ff8:	bfb8      	it	lt
 8000ffa:	4618      	movlt	r0, r3
 8000ffc:	e7a6      	b.n	8000f4c <_printf_i+0x164>
 8000ffe:	2301      	movs	r3, #1
 8001000:	4632      	mov	r2, r6
 8001002:	4649      	mov	r1, r9
 8001004:	4640      	mov	r0, r8
 8001006:	47d0      	blx	sl
 8001008:	3001      	adds	r0, #1
 800100a:	d09d      	beq.n	8000f48 <_printf_i+0x160>
 800100c:	3501      	adds	r5, #1
 800100e:	68e3      	ldr	r3, [r4, #12]
 8001010:	9903      	ldr	r1, [sp, #12]
 8001012:	1a5b      	subs	r3, r3, r1
 8001014:	42ab      	cmp	r3, r5
 8001016:	dcf2      	bgt.n	8000ffe <_printf_i+0x216>
 8001018:	e7eb      	b.n	8000ff2 <_printf_i+0x20a>
 800101a:	2500      	movs	r5, #0
 800101c:	f104 0619 	add.w	r6, r4, #25
 8001020:	e7f5      	b.n	800100e <_printf_i+0x226>
 8001022:	bf00      	nop
 8001024:	0800140e 	.word	0x0800140e
 8001028:	0800141f 	.word	0x0800141f

0800102c <__sflush_r>:
 800102c:	898a      	ldrh	r2, [r1, #12]
 800102e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001032:	4605      	mov	r5, r0
 8001034:	0710      	lsls	r0, r2, #28
 8001036:	460c      	mov	r4, r1
 8001038:	d458      	bmi.n	80010ec <__sflush_r+0xc0>
 800103a:	684b      	ldr	r3, [r1, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	dc05      	bgt.n	800104c <__sflush_r+0x20>
 8001040:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001042:	2b00      	cmp	r3, #0
 8001044:	dc02      	bgt.n	800104c <__sflush_r+0x20>
 8001046:	2000      	movs	r0, #0
 8001048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800104c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800104e:	2e00      	cmp	r6, #0
 8001050:	d0f9      	beq.n	8001046 <__sflush_r+0x1a>
 8001052:	2300      	movs	r3, #0
 8001054:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001058:	682f      	ldr	r7, [r5, #0]
 800105a:	6a21      	ldr	r1, [r4, #32]
 800105c:	602b      	str	r3, [r5, #0]
 800105e:	d032      	beq.n	80010c6 <__sflush_r+0x9a>
 8001060:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001062:	89a3      	ldrh	r3, [r4, #12]
 8001064:	075a      	lsls	r2, r3, #29
 8001066:	d505      	bpl.n	8001074 <__sflush_r+0x48>
 8001068:	6863      	ldr	r3, [r4, #4]
 800106a:	1ac0      	subs	r0, r0, r3
 800106c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800106e:	b10b      	cbz	r3, 8001074 <__sflush_r+0x48>
 8001070:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001072:	1ac0      	subs	r0, r0, r3
 8001074:	2300      	movs	r3, #0
 8001076:	4602      	mov	r2, r0
 8001078:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800107a:	6a21      	ldr	r1, [r4, #32]
 800107c:	4628      	mov	r0, r5
 800107e:	47b0      	blx	r6
 8001080:	1c43      	adds	r3, r0, #1
 8001082:	89a3      	ldrh	r3, [r4, #12]
 8001084:	d106      	bne.n	8001094 <__sflush_r+0x68>
 8001086:	6829      	ldr	r1, [r5, #0]
 8001088:	291d      	cmp	r1, #29
 800108a:	d82b      	bhi.n	80010e4 <__sflush_r+0xb8>
 800108c:	4a29      	ldr	r2, [pc, #164]	; (8001134 <__sflush_r+0x108>)
 800108e:	410a      	asrs	r2, r1
 8001090:	07d6      	lsls	r6, r2, #31
 8001092:	d427      	bmi.n	80010e4 <__sflush_r+0xb8>
 8001094:	2200      	movs	r2, #0
 8001096:	6062      	str	r2, [r4, #4]
 8001098:	04d9      	lsls	r1, r3, #19
 800109a:	6922      	ldr	r2, [r4, #16]
 800109c:	6022      	str	r2, [r4, #0]
 800109e:	d504      	bpl.n	80010aa <__sflush_r+0x7e>
 80010a0:	1c42      	adds	r2, r0, #1
 80010a2:	d101      	bne.n	80010a8 <__sflush_r+0x7c>
 80010a4:	682b      	ldr	r3, [r5, #0]
 80010a6:	b903      	cbnz	r3, 80010aa <__sflush_r+0x7e>
 80010a8:	6560      	str	r0, [r4, #84]	; 0x54
 80010aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010ac:	602f      	str	r7, [r5, #0]
 80010ae:	2900      	cmp	r1, #0
 80010b0:	d0c9      	beq.n	8001046 <__sflush_r+0x1a>
 80010b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80010b6:	4299      	cmp	r1, r3
 80010b8:	d002      	beq.n	80010c0 <__sflush_r+0x94>
 80010ba:	4628      	mov	r0, r5
 80010bc:	f7ff fbea 	bl	8000894 <_free_r>
 80010c0:	2000      	movs	r0, #0
 80010c2:	6360      	str	r0, [r4, #52]	; 0x34
 80010c4:	e7c0      	b.n	8001048 <__sflush_r+0x1c>
 80010c6:	2301      	movs	r3, #1
 80010c8:	4628      	mov	r0, r5
 80010ca:	47b0      	blx	r6
 80010cc:	1c41      	adds	r1, r0, #1
 80010ce:	d1c8      	bne.n	8001062 <__sflush_r+0x36>
 80010d0:	682b      	ldr	r3, [r5, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0c5      	beq.n	8001062 <__sflush_r+0x36>
 80010d6:	2b1d      	cmp	r3, #29
 80010d8:	d001      	beq.n	80010de <__sflush_r+0xb2>
 80010da:	2b16      	cmp	r3, #22
 80010dc:	d101      	bne.n	80010e2 <__sflush_r+0xb6>
 80010de:	602f      	str	r7, [r5, #0]
 80010e0:	e7b1      	b.n	8001046 <__sflush_r+0x1a>
 80010e2:	89a3      	ldrh	r3, [r4, #12]
 80010e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010e8:	81a3      	strh	r3, [r4, #12]
 80010ea:	e7ad      	b.n	8001048 <__sflush_r+0x1c>
 80010ec:	690f      	ldr	r7, [r1, #16]
 80010ee:	2f00      	cmp	r7, #0
 80010f0:	d0a9      	beq.n	8001046 <__sflush_r+0x1a>
 80010f2:	0793      	lsls	r3, r2, #30
 80010f4:	680e      	ldr	r6, [r1, #0]
 80010f6:	bf08      	it	eq
 80010f8:	694b      	ldreq	r3, [r1, #20]
 80010fa:	600f      	str	r7, [r1, #0]
 80010fc:	bf18      	it	ne
 80010fe:	2300      	movne	r3, #0
 8001100:	eba6 0807 	sub.w	r8, r6, r7
 8001104:	608b      	str	r3, [r1, #8]
 8001106:	f1b8 0f00 	cmp.w	r8, #0
 800110a:	dd9c      	ble.n	8001046 <__sflush_r+0x1a>
 800110c:	6a21      	ldr	r1, [r4, #32]
 800110e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001110:	4643      	mov	r3, r8
 8001112:	463a      	mov	r2, r7
 8001114:	4628      	mov	r0, r5
 8001116:	47b0      	blx	r6
 8001118:	2800      	cmp	r0, #0
 800111a:	dc06      	bgt.n	800112a <__sflush_r+0xfe>
 800111c:	89a3      	ldrh	r3, [r4, #12]
 800111e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001122:	81a3      	strh	r3, [r4, #12]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	e78e      	b.n	8001048 <__sflush_r+0x1c>
 800112a:	4407      	add	r7, r0
 800112c:	eba8 0800 	sub.w	r8, r8, r0
 8001130:	e7e9      	b.n	8001106 <__sflush_r+0xda>
 8001132:	bf00      	nop
 8001134:	dfbffffe 	.word	0xdfbffffe

08001138 <_fflush_r>:
 8001138:	b538      	push	{r3, r4, r5, lr}
 800113a:	690b      	ldr	r3, [r1, #16]
 800113c:	4605      	mov	r5, r0
 800113e:	460c      	mov	r4, r1
 8001140:	b913      	cbnz	r3, 8001148 <_fflush_r+0x10>
 8001142:	2500      	movs	r5, #0
 8001144:	4628      	mov	r0, r5
 8001146:	bd38      	pop	{r3, r4, r5, pc}
 8001148:	b118      	cbz	r0, 8001152 <_fflush_r+0x1a>
 800114a:	6a03      	ldr	r3, [r0, #32]
 800114c:	b90b      	cbnz	r3, 8001152 <_fflush_r+0x1a>
 800114e:	f7ff fa8b 	bl	8000668 <__sinit>
 8001152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f3      	beq.n	8001142 <_fflush_r+0xa>
 800115a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800115c:	07d0      	lsls	r0, r2, #31
 800115e:	d404      	bmi.n	800116a <_fflush_r+0x32>
 8001160:	0599      	lsls	r1, r3, #22
 8001162:	d402      	bmi.n	800116a <_fflush_r+0x32>
 8001164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001166:	f7ff fb84 	bl	8000872 <__retarget_lock_acquire_recursive>
 800116a:	4628      	mov	r0, r5
 800116c:	4621      	mov	r1, r4
 800116e:	f7ff ff5d 	bl	800102c <__sflush_r>
 8001172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001174:	07da      	lsls	r2, r3, #31
 8001176:	4605      	mov	r5, r0
 8001178:	d4e4      	bmi.n	8001144 <_fflush_r+0xc>
 800117a:	89a3      	ldrh	r3, [r4, #12]
 800117c:	059b      	lsls	r3, r3, #22
 800117e:	d4e1      	bmi.n	8001144 <_fflush_r+0xc>
 8001180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001182:	f7ff fb77 	bl	8000874 <__retarget_lock_release_recursive>
 8001186:	e7dd      	b.n	8001144 <_fflush_r+0xc>

08001188 <__swbuf_r>:
 8001188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118a:	460e      	mov	r6, r1
 800118c:	4614      	mov	r4, r2
 800118e:	4605      	mov	r5, r0
 8001190:	b118      	cbz	r0, 800119a <__swbuf_r+0x12>
 8001192:	6a03      	ldr	r3, [r0, #32]
 8001194:	b90b      	cbnz	r3, 800119a <__swbuf_r+0x12>
 8001196:	f7ff fa67 	bl	8000668 <__sinit>
 800119a:	69a3      	ldr	r3, [r4, #24]
 800119c:	60a3      	str	r3, [r4, #8]
 800119e:	89a3      	ldrh	r3, [r4, #12]
 80011a0:	071a      	lsls	r2, r3, #28
 80011a2:	d525      	bpl.n	80011f0 <__swbuf_r+0x68>
 80011a4:	6923      	ldr	r3, [r4, #16]
 80011a6:	b31b      	cbz	r3, 80011f0 <__swbuf_r+0x68>
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	6922      	ldr	r2, [r4, #16]
 80011ac:	1a98      	subs	r0, r3, r2
 80011ae:	6963      	ldr	r3, [r4, #20]
 80011b0:	b2f6      	uxtb	r6, r6
 80011b2:	4283      	cmp	r3, r0
 80011b4:	4637      	mov	r7, r6
 80011b6:	dc04      	bgt.n	80011c2 <__swbuf_r+0x3a>
 80011b8:	4621      	mov	r1, r4
 80011ba:	4628      	mov	r0, r5
 80011bc:	f7ff ffbc 	bl	8001138 <_fflush_r>
 80011c0:	b9e0      	cbnz	r0, 80011fc <__swbuf_r+0x74>
 80011c2:	68a3      	ldr	r3, [r4, #8]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	60a3      	str	r3, [r4, #8]
 80011c8:	6823      	ldr	r3, [r4, #0]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	6022      	str	r2, [r4, #0]
 80011ce:	701e      	strb	r6, [r3, #0]
 80011d0:	6962      	ldr	r2, [r4, #20]
 80011d2:	1c43      	adds	r3, r0, #1
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d004      	beq.n	80011e2 <__swbuf_r+0x5a>
 80011d8:	89a3      	ldrh	r3, [r4, #12]
 80011da:	07db      	lsls	r3, r3, #31
 80011dc:	d506      	bpl.n	80011ec <__swbuf_r+0x64>
 80011de:	2e0a      	cmp	r6, #10
 80011e0:	d104      	bne.n	80011ec <__swbuf_r+0x64>
 80011e2:	4621      	mov	r1, r4
 80011e4:	4628      	mov	r0, r5
 80011e6:	f7ff ffa7 	bl	8001138 <_fflush_r>
 80011ea:	b938      	cbnz	r0, 80011fc <__swbuf_r+0x74>
 80011ec:	4638      	mov	r0, r7
 80011ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011f0:	4621      	mov	r1, r4
 80011f2:	4628      	mov	r0, r5
 80011f4:	f000 f806 	bl	8001204 <__swsetup_r>
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d0d5      	beq.n	80011a8 <__swbuf_r+0x20>
 80011fc:	f04f 37ff 	mov.w	r7, #4294967295
 8001200:	e7f4      	b.n	80011ec <__swbuf_r+0x64>
	...

08001204 <__swsetup_r>:
 8001204:	b538      	push	{r3, r4, r5, lr}
 8001206:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <__swsetup_r+0xac>)
 8001208:	4605      	mov	r5, r0
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	460c      	mov	r4, r1
 800120e:	b118      	cbz	r0, 8001218 <__swsetup_r+0x14>
 8001210:	6a03      	ldr	r3, [r0, #32]
 8001212:	b90b      	cbnz	r3, 8001218 <__swsetup_r+0x14>
 8001214:	f7ff fa28 	bl	8000668 <__sinit>
 8001218:	89a3      	ldrh	r3, [r4, #12]
 800121a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800121e:	0718      	lsls	r0, r3, #28
 8001220:	d422      	bmi.n	8001268 <__swsetup_r+0x64>
 8001222:	06d9      	lsls	r1, r3, #27
 8001224:	d407      	bmi.n	8001236 <__swsetup_r+0x32>
 8001226:	2309      	movs	r3, #9
 8001228:	602b      	str	r3, [r5, #0]
 800122a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800122e:	81a3      	strh	r3, [r4, #12]
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	e034      	b.n	80012a0 <__swsetup_r+0x9c>
 8001236:	0758      	lsls	r0, r3, #29
 8001238:	d512      	bpl.n	8001260 <__swsetup_r+0x5c>
 800123a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800123c:	b141      	cbz	r1, 8001250 <__swsetup_r+0x4c>
 800123e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001242:	4299      	cmp	r1, r3
 8001244:	d002      	beq.n	800124c <__swsetup_r+0x48>
 8001246:	4628      	mov	r0, r5
 8001248:	f7ff fb24 	bl	8000894 <_free_r>
 800124c:	2300      	movs	r3, #0
 800124e:	6363      	str	r3, [r4, #52]	; 0x34
 8001250:	89a3      	ldrh	r3, [r4, #12]
 8001252:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001256:	81a3      	strh	r3, [r4, #12]
 8001258:	2300      	movs	r3, #0
 800125a:	6063      	str	r3, [r4, #4]
 800125c:	6923      	ldr	r3, [r4, #16]
 800125e:	6023      	str	r3, [r4, #0]
 8001260:	89a3      	ldrh	r3, [r4, #12]
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	81a3      	strh	r3, [r4, #12]
 8001268:	6923      	ldr	r3, [r4, #16]
 800126a:	b94b      	cbnz	r3, 8001280 <__swsetup_r+0x7c>
 800126c:	89a3      	ldrh	r3, [r4, #12]
 800126e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001276:	d003      	beq.n	8001280 <__swsetup_r+0x7c>
 8001278:	4621      	mov	r1, r4
 800127a:	4628      	mov	r0, r5
 800127c:	f000 f850 	bl	8001320 <__smakebuf_r>
 8001280:	89a0      	ldrh	r0, [r4, #12]
 8001282:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001286:	f010 0301 	ands.w	r3, r0, #1
 800128a:	d00a      	beq.n	80012a2 <__swsetup_r+0x9e>
 800128c:	2300      	movs	r3, #0
 800128e:	60a3      	str	r3, [r4, #8]
 8001290:	6963      	ldr	r3, [r4, #20]
 8001292:	425b      	negs	r3, r3
 8001294:	61a3      	str	r3, [r4, #24]
 8001296:	6923      	ldr	r3, [r4, #16]
 8001298:	b943      	cbnz	r3, 80012ac <__swsetup_r+0xa8>
 800129a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800129e:	d1c4      	bne.n	800122a <__swsetup_r+0x26>
 80012a0:	bd38      	pop	{r3, r4, r5, pc}
 80012a2:	0781      	lsls	r1, r0, #30
 80012a4:	bf58      	it	pl
 80012a6:	6963      	ldrpl	r3, [r4, #20]
 80012a8:	60a3      	str	r3, [r4, #8]
 80012aa:	e7f4      	b.n	8001296 <__swsetup_r+0x92>
 80012ac:	2000      	movs	r0, #0
 80012ae:	e7f7      	b.n	80012a0 <__swsetup_r+0x9c>
 80012b0:	20000058 	.word	0x20000058

080012b4 <_sbrk_r>:
 80012b4:	b538      	push	{r3, r4, r5, lr}
 80012b6:	4d06      	ldr	r5, [pc, #24]	; (80012d0 <_sbrk_r+0x1c>)
 80012b8:	2300      	movs	r3, #0
 80012ba:	4604      	mov	r4, r0
 80012bc:	4608      	mov	r0, r1
 80012be:	602b      	str	r3, [r5, #0]
 80012c0:	f7ff f8e6 	bl	8000490 <_sbrk>
 80012c4:	1c43      	adds	r3, r0, #1
 80012c6:	d102      	bne.n	80012ce <_sbrk_r+0x1a>
 80012c8:	682b      	ldr	r3, [r5, #0]
 80012ca:	b103      	cbz	r3, 80012ce <_sbrk_r+0x1a>
 80012cc:	6023      	str	r3, [r4, #0]
 80012ce:	bd38      	pop	{r3, r4, r5, pc}
 80012d0:	20000208 	.word	0x20000208

080012d4 <__swhatbuf_r>:
 80012d4:	b570      	push	{r4, r5, r6, lr}
 80012d6:	460c      	mov	r4, r1
 80012d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012dc:	2900      	cmp	r1, #0
 80012de:	b096      	sub	sp, #88	; 0x58
 80012e0:	4615      	mov	r5, r2
 80012e2:	461e      	mov	r6, r3
 80012e4:	da0d      	bge.n	8001302 <__swhatbuf_r+0x2e>
 80012e6:	89a3      	ldrh	r3, [r4, #12]
 80012e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80012ec:	f04f 0100 	mov.w	r1, #0
 80012f0:	bf0c      	ite	eq
 80012f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80012f6:	2340      	movne	r3, #64	; 0x40
 80012f8:	2000      	movs	r0, #0
 80012fa:	6031      	str	r1, [r6, #0]
 80012fc:	602b      	str	r3, [r5, #0]
 80012fe:	b016      	add	sp, #88	; 0x58
 8001300:	bd70      	pop	{r4, r5, r6, pc}
 8001302:	466a      	mov	r2, sp
 8001304:	f000 f848 	bl	8001398 <_fstat_r>
 8001308:	2800      	cmp	r0, #0
 800130a:	dbec      	blt.n	80012e6 <__swhatbuf_r+0x12>
 800130c:	9901      	ldr	r1, [sp, #4]
 800130e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001312:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001316:	4259      	negs	r1, r3
 8001318:	4159      	adcs	r1, r3
 800131a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800131e:	e7eb      	b.n	80012f8 <__swhatbuf_r+0x24>

08001320 <__smakebuf_r>:
 8001320:	898b      	ldrh	r3, [r1, #12]
 8001322:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001324:	079d      	lsls	r5, r3, #30
 8001326:	4606      	mov	r6, r0
 8001328:	460c      	mov	r4, r1
 800132a:	d507      	bpl.n	800133c <__smakebuf_r+0x1c>
 800132c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001330:	6023      	str	r3, [r4, #0]
 8001332:	6123      	str	r3, [r4, #16]
 8001334:	2301      	movs	r3, #1
 8001336:	6163      	str	r3, [r4, #20]
 8001338:	b002      	add	sp, #8
 800133a:	bd70      	pop	{r4, r5, r6, pc}
 800133c:	ab01      	add	r3, sp, #4
 800133e:	466a      	mov	r2, sp
 8001340:	f7ff ffc8 	bl	80012d4 <__swhatbuf_r>
 8001344:	9900      	ldr	r1, [sp, #0]
 8001346:	4605      	mov	r5, r0
 8001348:	4630      	mov	r0, r6
 800134a:	f7ff fb0f 	bl	800096c <_malloc_r>
 800134e:	b948      	cbnz	r0, 8001364 <__smakebuf_r+0x44>
 8001350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001354:	059a      	lsls	r2, r3, #22
 8001356:	d4ef      	bmi.n	8001338 <__smakebuf_r+0x18>
 8001358:	f023 0303 	bic.w	r3, r3, #3
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	81a3      	strh	r3, [r4, #12]
 8001362:	e7e3      	b.n	800132c <__smakebuf_r+0xc>
 8001364:	89a3      	ldrh	r3, [r4, #12]
 8001366:	6020      	str	r0, [r4, #0]
 8001368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800136c:	81a3      	strh	r3, [r4, #12]
 800136e:	9b00      	ldr	r3, [sp, #0]
 8001370:	6163      	str	r3, [r4, #20]
 8001372:	9b01      	ldr	r3, [sp, #4]
 8001374:	6120      	str	r0, [r4, #16]
 8001376:	b15b      	cbz	r3, 8001390 <__smakebuf_r+0x70>
 8001378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800137c:	4630      	mov	r0, r6
 800137e:	f000 f81d 	bl	80013bc <_isatty_r>
 8001382:	b128      	cbz	r0, 8001390 <__smakebuf_r+0x70>
 8001384:	89a3      	ldrh	r3, [r4, #12]
 8001386:	f023 0303 	bic.w	r3, r3, #3
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	81a3      	strh	r3, [r4, #12]
 8001390:	89a3      	ldrh	r3, [r4, #12]
 8001392:	431d      	orrs	r5, r3
 8001394:	81a5      	strh	r5, [r4, #12]
 8001396:	e7cf      	b.n	8001338 <__smakebuf_r+0x18>

08001398 <_fstat_r>:
 8001398:	b538      	push	{r3, r4, r5, lr}
 800139a:	4d07      	ldr	r5, [pc, #28]	; (80013b8 <_fstat_r+0x20>)
 800139c:	2300      	movs	r3, #0
 800139e:	4604      	mov	r4, r0
 80013a0:	4608      	mov	r0, r1
 80013a2:	4611      	mov	r1, r2
 80013a4:	602b      	str	r3, [r5, #0]
 80013a6:	f7ff f84a 	bl	800043e <_fstat>
 80013aa:	1c43      	adds	r3, r0, #1
 80013ac:	d102      	bne.n	80013b4 <_fstat_r+0x1c>
 80013ae:	682b      	ldr	r3, [r5, #0]
 80013b0:	b103      	cbz	r3, 80013b4 <_fstat_r+0x1c>
 80013b2:	6023      	str	r3, [r4, #0]
 80013b4:	bd38      	pop	{r3, r4, r5, pc}
 80013b6:	bf00      	nop
 80013b8:	20000208 	.word	0x20000208

080013bc <_isatty_r>:
 80013bc:	b538      	push	{r3, r4, r5, lr}
 80013be:	4d06      	ldr	r5, [pc, #24]	; (80013d8 <_isatty_r+0x1c>)
 80013c0:	2300      	movs	r3, #0
 80013c2:	4604      	mov	r4, r0
 80013c4:	4608      	mov	r0, r1
 80013c6:	602b      	str	r3, [r5, #0]
 80013c8:	f7ff f849 	bl	800045e <_isatty>
 80013cc:	1c43      	adds	r3, r0, #1
 80013ce:	d102      	bne.n	80013d6 <_isatty_r+0x1a>
 80013d0:	682b      	ldr	r3, [r5, #0]
 80013d2:	b103      	cbz	r3, 80013d6 <_isatty_r+0x1a>
 80013d4:	6023      	str	r3, [r4, #0]
 80013d6:	bd38      	pop	{r3, r4, r5, pc}
 80013d8:	20000208 	.word	0x20000208

080013dc <_init>:
 80013dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013de:	bf00      	nop
 80013e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013e2:	bc08      	pop	{r3}
 80013e4:	469e      	mov	lr, r3
 80013e6:	4770      	bx	lr

080013e8 <_fini>:
 80013e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ea:	bf00      	nop
 80013ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ee:	bc08      	pop	{r3}
 80013f0:	469e      	mov	lr, r3
 80013f2:	4770      	bx	lr
