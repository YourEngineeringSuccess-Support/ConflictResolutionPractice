
ConditionalMonitoredMainLoop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000534  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006e0  080006e0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006e0  080006e0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  080006e0  080006e0  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006e0  080006e0  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006e0  080006e0  000106e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006e4  080006e4  000106e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080006e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
 10 .bss          00000054  20000030  20000030  00020030  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000084  20000084  00020030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001105  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000447  00000000  00000000  000211a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000168  00000000  00000000  000215f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000103  00000000  00000000  00021758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001a32c  00000000  00000000  0002185b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000e5a  00000000  00000000  0003bb87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009393d  00000000  00000000  0003c9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000048c  00000000  00000000  000d0320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  000d07ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000030 	.word	0x20000030
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080006c8 	.word	0x080006c8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000034 	.word	0x20000034
 80001e8:	080006c8 	.word	0x080006c8

080001ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	6039      	str	r1, [r7, #0]
 80001f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	db0a      	blt.n	8000216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	b2da      	uxtb	r2, r3
 8000204:	490c      	ldr	r1, [pc, #48]	; (8000238 <__NVIC_SetPriority+0x4c>)
 8000206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020a:	0112      	lsls	r2, r2, #4
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	440b      	add	r3, r1
 8000210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000214:	e00a      	b.n	800022c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	b2da      	uxtb	r2, r3
 800021a:	4908      	ldr	r1, [pc, #32]	; (800023c <__NVIC_SetPriority+0x50>)
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	f003 030f 	and.w	r3, r3, #15
 8000222:	3b04      	subs	r3, #4
 8000224:	0112      	lsls	r2, r2, #4
 8000226:	b2d2      	uxtb	r2, r2
 8000228:	440b      	add	r3, r1
 800022a:	761a      	strb	r2, [r3, #24]
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	e000e100 	.word	0xe000e100
 800023c:	e000ed00 	.word	0xe000ed00

08000240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3b01      	subs	r3, #1
 800024c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000250:	d301      	bcc.n	8000256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000252:	2301      	movs	r3, #1
 8000254:	e00f      	b.n	8000276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000256:	4a0a      	ldr	r2, [pc, #40]	; (8000280 <SysTick_Config+0x40>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	3b01      	subs	r3, #1
 800025c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800025e:	210f      	movs	r1, #15
 8000260:	f04f 30ff 	mov.w	r0, #4294967295
 8000264:	f7ff ffc2 	bl	80001ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000268:	4b05      	ldr	r3, [pc, #20]	; (8000280 <SysTick_Config+0x40>)
 800026a:	2200      	movs	r2, #0
 800026c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800026e:	4b04      	ldr	r3, [pc, #16]	; (8000280 <SysTick_Config+0x40>)
 8000270:	2207      	movs	r2, #7
 8000272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000274:	2300      	movs	r3, #0
}
 8000276:	4618      	mov	r0, r3
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	e000e010 	.word	0xe000e010

08000284 <SysTick_Handler>:
 * @brief SysTick_Handler
 * Interrupt handler routine for SysTick.
 * @param None
 * @retval None
 */
void SysTick_Handler( void ){
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0

	ull_SysTick_IRQ_Count++;
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <SysTick_Handler+0x20>)
 800028a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800028e:	1c50      	adds	r0, r2, #1
 8000290:	f143 0100 	adc.w	r1, r3, #0
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <SysTick_Handler+0x20>)
 8000296:	e9c3 0100 	strd	r0, r1, [r3]

}
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	20000050 	.word	0x20000050

080002a8 <SysTick_Init>:
 * @brief Systick_Init
 * Initialise SysTick.
 * @param None
 * @retval None
 */
void SysTick_Init( void ){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0

	SysTick_Config(SYS_CLOCK_FRQ/1000);
 80002ac:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80002b0:	f7ff ffc6 	bl	8000240 <SysTick_Config>

}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <SysTick_Get_Timestamp>:
 * Supply a high resolution timestamp from SysTick.
 * @param None
 * @retval None
 */
uint64_t SysTick_Get_Timestamp( void )
{
 80002b8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80002bc:	b08b      	sub	sp, #44	; 0x2c
 80002be:	af00      	add	r7, sp, #0
	uint64_t ull_New_Count;
	uint32_t ul_Interrupt_Flag = 0xFFFFFFFF;
 80002c0:	f04f 33ff 	mov.w	r3, #4294967295
 80002c4:	627b      	str	r3, [r7, #36]	; 0x24

	//Load the SysTick interrupt fired flag.
	ul_Interrupt_Flag = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
 80002c6:	4b25      	ldr	r3, [pc, #148]	; (800035c <SysTick_Get_Timestamp+0xa4>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ce:	627b      	str	r3, [r7, #36]	; 0x24

	//Monitor the calculation and go again if it's interrupted by the SysTick Interrupt.
	do{

	//Calculate the number of counts from imterrupts already
	ull_New_Count = (uint64_t)(ull_SysTick_IRQ_Count*SysTick->LOAD);
 80002d0:	4b22      	ldr	r3, [pc, #136]	; (800035c <SysTick_Get_Timestamp+0xa4>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	2200      	movs	r2, #0
 80002d6:	469a      	mov	sl, r3
 80002d8:	4693      	mov	fp, r2
 80002da:	4b21      	ldr	r3, [pc, #132]	; (8000360 <SysTick_Get_Timestamp+0xa8>)
 80002dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80002e0:	fb02 f00b 	mul.w	r0, r2, fp
 80002e4:	fb0a f103 	mul.w	r1, sl, r3
 80002e8:	4401      	add	r1, r0
 80002ea:	fbaa 4502 	umull	r4, r5, sl, r2
 80002ee:	194b      	adds	r3, r1, r5
 80002f0:	461d      	mov	r5, r3
 80002f2:	e9c7 4506 	strd	r4, r5, [r7, #24]
 80002f6:	e9c7 4506 	strd	r4, r5, [r7, #24]

	//Factor in the current count-down timer register value.
	ull_New_Count = (uint64_t)(ull_New_Count + SysTick->LOAD - SysTick->VAL);
 80002fa:	4b18      	ldr	r3, [pc, #96]	; (800035c <SysTick_Get_Timestamp+0xa4>)
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	2200      	movs	r2, #0
 8000300:	613b      	str	r3, [r7, #16]
 8000302:	617a      	str	r2, [r7, #20]
 8000304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000308:	6939      	ldr	r1, [r7, #16]
 800030a:	eb11 0802 	adds.w	r8, r1, r2
 800030e:	6979      	ldr	r1, [r7, #20]
 8000310:	eb41 0903 	adc.w	r9, r1, r3
 8000314:	4b11      	ldr	r3, [pc, #68]	; (800035c <SysTick_Get_Timestamp+0xa4>)
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	2200      	movs	r2, #0
 800031a:	60bb      	str	r3, [r7, #8]
 800031c:	60fa      	str	r2, [r7, #12]
 800031e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000322:	460b      	mov	r3, r1
 8000324:	ebb8 0303 	subs.w	r3, r8, r3
 8000328:	603b      	str	r3, [r7, #0]
 800032a:	4613      	mov	r3, r2
 800032c:	eb69 0303 	sbc.w	r3, r9, r3
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000336:	e9c7 2306 	strd	r2, r3, [r7, #24]

	//Reload the SysTick interrupt fired flag
	ul_Interrupt_Flag = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
 800033a:	4b08      	ldr	r3, [pc, #32]	; (800035c <SysTick_Get_Timestamp+0xa4>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000342:	627b      	str	r3, [r7, #36]	; 0x24

	} while(ul_Interrupt_Flag != 0);
 8000344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000346:	2b00      	cmp	r3, #0
 8000348:	d1c2      	bne.n	80002d0 <SysTick_Get_Timestamp+0x18>

	return ull_New_Count;
 800034a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 800034e:	4610      	mov	r0, r2
 8000350:	4619      	mov	r1, r3
 8000352:	372c      	adds	r7, #44	; 0x2c
 8000354:	46bd      	mov	sp, r7
 8000356:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800035a:	4770      	bx	lr
 800035c:	e000e010 	.word	0xe000e010
 8000360:	20000050 	.word	0x20000050

08000364 <SysTick_Elapsed_MicroSeconds>:
 * Return elapsed time in microseconds sincestart_stamp.
 * @param None
 * @retval None
 */
uint64_t SysTick_Elapsed_MicroSeconds(uint64_t ull_Start_Timestamp)
{
 8000364:	b5b0      	push	{r4, r5, r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	e9c7 0100 	strd	r0, r1, [r7]
   //Fetch the lastest count.
	uint64_t ull_Elapsed_Count = SysTick_Get_Timestamp();
 800036e:	f7ff ffa3 	bl	80002b8 <SysTick_Get_Timestamp>
 8000372:	e9c7 0102 	strd	r0, r1, [r7, #8]

	//Subtract the start count from the latest value
	ull_Elapsed_Count -= ull_Start_Timestamp;
 8000376:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800037a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb61 0503 	sbc.w	r5, r1, r3
 8000384:	e9c7 4502 	strd	r4, r5, [r7, #8]

	//Convert counts to microseconds
	ull_Elapsed_Count = (uint64_t)(ull_Elapsed_Count / (SYS_CLOCK_FRQ/1000000));
 8000388:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800038c:	f04f 0200 	mov.w	r2, #0
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	0902      	lsrs	r2, r0, #4
 8000396:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800039a:	090b      	lsrs	r3, r1, #4
 800039c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return ull_Elapsed_Count;
 80003a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 80003a4:	4610      	mov	r0, r2
 80003a6:	4619      	mov	r1, r3
 80003a8:	3710      	adds	r7, #16
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080003b0 <main>:



// Main entry point.
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
	RunTests();
#endif


	//Initialise SysTick Interrupt.
	SysTick_Init();
 80003b6:	f7ff ff77 	bl	80002a8 <SysTick_Init>

	// Enable the FPU (floating point co-processor, access = full access)
	SCB->CPACR |= FPU_CP10_FULL | FPU_CP11_FULL;
 80003ba:	4b25      	ldr	r3, [pc, #148]	; (8000450 <main+0xa0>)
 80003bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003c0:	4a23      	ldr	r2, [pc, #140]	; (8000450 <main+0xa0>)
 80003c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	//Enable clock access to GPIOG - for LED Output
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 80003ca:	4b22      	ldr	r3, [pc, #136]	; (8000454 <main+0xa4>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ce:	4a21      	ldr	r2, [pc, #132]	; (8000454 <main+0xa4>)
 80003d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003d4:	6313      	str	r3, [r2, #48]	; 0x30
	//Set PG13 as output - Green LED.
	GPIOG->MODER |= (1 << 26);
 80003d6:	4b20      	ldr	r3, [pc, #128]	; (8000458 <main+0xa8>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a1f      	ldr	r2, [pc, #124]	; (8000458 <main+0xa8>)
 80003dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80003e0:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(1 << 27);
 80003e2:	4b1d      	ldr	r3, [pc, #116]	; (8000458 <main+0xa8>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a1c      	ldr	r2, [pc, #112]	; (8000458 <main+0xa8>)
 80003e8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80003ec:	6013      	str	r3, [r2, #0]

    /* Loop forever */
	while(1)
	{
		// Call ALL primary tasks
		for (int i = 0; i < NUM_PRI_TASKS; i++)
 80003ee:	2300      	movs	r3, #0
 80003f0:	607b      	str	r3, [r7, #4]
 80003f2:	e013      	b.n	800041c <main+0x6c>
		{
			// Skip disabled tasks
			if (PrimaryModules[i].TaskEnabled == FALSE)
 80003f4:	4a19      	ldr	r2, [pc, #100]	; (800045c <main+0xac>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	015b      	lsls	r3, r3, #5
 80003fa:	4413      	add	r3, r2
 80003fc:	331c      	adds	r3, #28
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d007      	beq.n	8000414 <main+0x64>
				continue;

			//**********************
			// RUN NEXT PRIMARY TASK
			RUN_THIS_TASK(PrimaryModules[i]); // How the function is called depends on build configuration.
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	015b      	lsls	r3, r3, #5
 8000408:	4a14      	ldr	r2, [pc, #80]	; (800045c <main+0xac>)
 800040a:	4413      	add	r3, r2
 800040c:	4618      	mov	r0, r3
 800040e:	f000 f8cb 	bl	80005a8 <TimeAndRunTask>
 8000412:	e000      	b.n	8000416 <main+0x66>
				continue;
 8000414:	bf00      	nop
		for (int i = 0; i < NUM_PRI_TASKS; i++)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	3301      	adds	r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d0e8      	beq.n	80003f4 <main+0x44>
				//************************
				// RUN NEXT SECONDARY TASK
				RUN_THIS_TASK(SecondaryModules[uc_Sec_Index]); // How the function is called depends on build configuration.
			}
		}
		uc_Sec_Index++;
 8000422:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <main+0xb0>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	3301      	adds	r3, #1
 8000428:	b2da      	uxtb	r2, r3
 800042a:	4b0d      	ldr	r3, [pc, #52]	; (8000460 <main+0xb0>)
 800042c:	701a      	strb	r2, [r3, #0]

		// When all secondary tasks completed, call 1 tertiary task
		if (uc_Sec_Index == (NUM_SEC_TASKS + 1))
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <main+0xb0>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b01      	cmp	r3, #1
 8000434:	d1db      	bne.n	80003ee <main+0x3e>
		{
			// Start the secondary task list again next time.
			uc_Sec_Index = 0;
 8000436:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <main+0xb0>)
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]
					// RUN NEXT TERTIARY TASK
					RUN_THIS_TASK(TertiaryModules[uc_Ter_Index]); // How the function is called depends on build configuration.
				}
			}
			// Next tertiary task with wrap
			uc_Ter_Index++;
 800043c:	4b09      	ldr	r3, [pc, #36]	; (8000464 <main+0xb4>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	3301      	adds	r3, #1
 8000442:	b2da      	uxtb	r2, r3
 8000444:	4b07      	ldr	r3, [pc, #28]	; (8000464 <main+0xb4>)
 8000446:	701a      	strb	r2, [r3, #0]
			if (uc_Ter_Index >= NUM_TER_TASKS)
			{
				uc_Ter_Index = 0;
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <main+0xb4>)
 800044a:	2200      	movs	r2, #0
 800044c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < NUM_PRI_TASKS; i++)
 800044e:	e7ce      	b.n	80003ee <main+0x3e>
 8000450:	e000ed00 	.word	0xe000ed00
 8000454:	40023800 	.word	0x40023800
 8000458:	40021800 	.word	0x40021800
 800045c:	20000000 	.word	0x20000000
 8000460:	2000005c 	.word	0x2000005c
 8000464:	2000005d 	.word	0x2000005d

08000468 <MainLoopMonitor>:

#define IDLE_MAIN_LOOPS_PER_SECOND		12000
#define MIN_MAIN_LOOPS_PER_SECOND		1000
float PctIdle;
void MainLoopMonitor ( void )
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
	static uint64_t MainLoopDurationTimer;
	static uint64_t MainLoopCountTimer;

	// How long since last here?
	// Includes first pass handling
	if (!DurationInitRequired)
 800046c:	4b3c      	ldr	r3, [pc, #240]	; (8000560 <MainLoopMonitor+0xf8>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d11f      	bne.n	80004b4 <MainLoopMonitor+0x4c>
	{
		// Record duration and update max / min if needed
		MainLoopDurationLast_uS = SysTick_Elapsed_MicroSeconds(MainLoopDurationTimer);
 8000474:	4b3b      	ldr	r3, [pc, #236]	; (8000564 <MainLoopMonitor+0xfc>)
 8000476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800047a:	4610      	mov	r0, r2
 800047c:	4619      	mov	r1, r3
 800047e:	f7ff ff71 	bl	8000364 <SysTick_Elapsed_MicroSeconds>
 8000482:	4602      	mov	r2, r0
 8000484:	460b      	mov	r3, r1
 8000486:	4b38      	ldr	r3, [pc, #224]	; (8000568 <MainLoopMonitor+0x100>)
 8000488:	601a      	str	r2, [r3, #0]
		if (MainLoopDurationLast_uS < MainLoopDurationMin_uS)
 800048a:	4b37      	ldr	r3, [pc, #220]	; (8000568 <MainLoopMonitor+0x100>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	4b37      	ldr	r3, [pc, #220]	; (800056c <MainLoopMonitor+0x104>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	429a      	cmp	r2, r3
 8000494:	d203      	bcs.n	800049e <MainLoopMonitor+0x36>
			MainLoopDurationMin_uS = MainLoopDurationLast_uS;
 8000496:	4b34      	ldr	r3, [pc, #208]	; (8000568 <MainLoopMonitor+0x100>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a34      	ldr	r2, [pc, #208]	; (800056c <MainLoopMonitor+0x104>)
 800049c:	6013      	str	r3, [r2, #0]
		if (MainLoopDurationLast_uS > MainLoopDurationMax_uS)
 800049e:	4b32      	ldr	r3, [pc, #200]	; (8000568 <MainLoopMonitor+0x100>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	4b33      	ldr	r3, [pc, #204]	; (8000570 <MainLoopMonitor+0x108>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	429a      	cmp	r2, r3
 80004a8:	d907      	bls.n	80004ba <MainLoopMonitor+0x52>
			MainLoopDurationMax_uS = MainLoopDurationLast_uS;
 80004aa:	4b2f      	ldr	r3, [pc, #188]	; (8000568 <MainLoopMonitor+0x100>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a30      	ldr	r2, [pc, #192]	; (8000570 <MainLoopMonitor+0x108>)
 80004b0:	6013      	str	r3, [r2, #0]
 80004b2:	e002      	b.n	80004ba <MainLoopMonitor+0x52>
	}
	else
		DurationInitRequired = FALSE;
 80004b4:	4b2a      	ldr	r3, [pc, #168]	; (8000560 <MainLoopMonitor+0xf8>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	701a      	strb	r2, [r3, #0]
	// Reset timer for next pass of main loop
	MainLoopDurationTimer = SysTick_Get_Timestamp();
 80004ba:	f7ff fefd 	bl	80002b8 <SysTick_Get_Timestamp>
 80004be:	4602      	mov	r2, r0
 80004c0:	460b      	mov	r3, r1
 80004c2:	4928      	ldr	r1, [pc, #160]	; (8000564 <MainLoopMonitor+0xfc>)
 80004c4:	e9c1 2300 	strd	r2, r3, [r1]

	////////////////////////////////
	// Only run this once per second - the number of main loops per second counter...
	if (SysTick_Elapsed_MicroSeconds(MainLoopCountTimer) >= 1000000)
 80004c8:	4b2a      	ldr	r3, [pc, #168]	; (8000574 <MainLoopMonitor+0x10c>)
 80004ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004ce:	4610      	mov	r0, r2
 80004d0:	4619      	mov	r1, r3
 80004d2:	f7ff ff47 	bl	8000364 <SysTick_Elapsed_MicroSeconds>
 80004d6:	4602      	mov	r2, r0
 80004d8:	460b      	mov	r3, r1
 80004da:	4927      	ldr	r1, [pc, #156]	; (8000578 <MainLoopMonitor+0x110>)
 80004dc:	428a      	cmp	r2, r1
 80004de:	f173 0300 	sbcs.w	r3, r3, #0
 80004e2:	d335      	bcc.n	8000550 <MainLoopMonitor+0xe8>
	{
		// Record number of main loops in the last second
		MainLoopsPerSecond = MainLoopCounter;
 80004e4:	4b25      	ldr	r3, [pc, #148]	; (800057c <MainLoopMonitor+0x114>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a25      	ldr	r2, [pc, #148]	; (8000580 <MainLoopMonitor+0x118>)
 80004ea:	6013      	str	r3, [r2, #0]

		// Record Max / Min
		if (MainLoopsPerSecond < MainLoopsPerSecondMIN)
 80004ec:	4b24      	ldr	r3, [pc, #144]	; (8000580 <MainLoopMonitor+0x118>)
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4b24      	ldr	r3, [pc, #144]	; (8000584 <MainLoopMonitor+0x11c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d203      	bcs.n	8000500 <MainLoopMonitor+0x98>
			MainLoopsPerSecondMIN = MainLoopsPerSecond;
 80004f8:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MainLoopMonitor+0x118>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a21      	ldr	r2, [pc, #132]	; (8000584 <MainLoopMonitor+0x11c>)
 80004fe:	6013      	str	r3, [r2, #0]
		if (MainLoopsPerSecond > MainLoopsPerSecondMAX)
 8000500:	4b1f      	ldr	r3, [pc, #124]	; (8000580 <MainLoopMonitor+0x118>)
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	4b20      	ldr	r3, [pc, #128]	; (8000588 <MainLoopMonitor+0x120>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	429a      	cmp	r2, r3
 800050a:	d903      	bls.n	8000514 <MainLoopMonitor+0xac>
			MainLoopsPerSecondMAX = MainLoopsPerSecond;
 800050c:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <MainLoopMonitor+0x118>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a1d      	ldr	r2, [pc, #116]	; (8000588 <MainLoopMonitor+0x120>)
 8000512:	6013      	str	r3, [r2, #0]

		// Reset for another go
		MainLoopCountTimer = SysTick_Get_Timestamp();
 8000514:	f7ff fed0 	bl	80002b8 <SysTick_Get_Timestamp>
 8000518:	4602      	mov	r2, r0
 800051a:	460b      	mov	r3, r1
 800051c:	4915      	ldr	r1, [pc, #84]	; (8000574 <MainLoopMonitor+0x10c>)
 800051e:	e9c1 2300 	strd	r2, r3, [r1]
		MainLoopCounter = 0;
 8000522:	4b16      	ldr	r3, [pc, #88]	; (800057c <MainLoopMonitor+0x114>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]

		// Update % Busy
		PctIdle = 100.0 * ((float)(MainLoopsPerSecond - MIN_MAIN_LOOPS_PER_SECOND) / (float)(IDLE_MAIN_LOOPS_PER_SECOND - MIN_MAIN_LOOPS_PER_SECOND));
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <MainLoopMonitor+0x118>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000530:	ee07 3a90 	vmov	s15, r3
 8000534:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000538:	eddf 6a14 	vldr	s13, [pc, #80]	; 800058c <MainLoopMonitor+0x124>
 800053c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000540:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000590 <MainLoopMonitor+0x128>
 8000544:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <MainLoopMonitor+0x12c>)
 800054a:	edc3 7a00 	vstr	s15, [r3]
	}
	else
		// Still waiting for 1 second marker, count main loops...
		MainLoopCounter++;

}
 800054e:	e004      	b.n	800055a <MainLoopMonitor+0xf2>
		MainLoopCounter++;
 8000550:	4b0a      	ldr	r3, [pc, #40]	; (800057c <MainLoopMonitor+0x114>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	3301      	adds	r3, #1
 8000556:	4a09      	ldr	r2, [pc, #36]	; (800057c <MainLoopMonitor+0x114>)
 8000558:	6013      	str	r3, [r2, #0]
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	20000020 	.word	0x20000020
 8000564:	20000060 	.word	0x20000060
 8000568:	20000068 	.word	0x20000068
 800056c:	20000024 	.word	0x20000024
 8000570:	2000006c 	.word	0x2000006c
 8000574:	20000070 	.word	0x20000070
 8000578:	000f4240 	.word	0x000f4240
 800057c:	20000078 	.word	0x20000078
 8000580:	2000007c 	.word	0x2000007c
 8000584:	20000028 	.word	0x20000028
 8000588:	20000080 	.word	0x20000080
 800058c:	462be000 	.word	0x462be000
 8000590:	42c80000 	.word	0x42c80000
 8000594:	20000058 	.word	0x20000058

08000598 <HandleTaskOverrun>:

#ifdef DEBUG // Additional task running diagnostics

// Called if a task takes too long.
void HandleTaskOverrun()
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	asm("nop");
 800059c:	bf00      	nop
}
 800059e:	bf00      	nop
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr

080005a8 <TimeAndRunTask>:

// Run and time how long a task takes.
void TimeAndRunTask(_MAIN_MODULES *pTask)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	// Note starting time
	uint64_t ull_StartTime = SysTick_Get_Timestamp();
 80005b0:	f7ff fe82 	bl	80002b8 <SysTick_Get_Timestamp>
 80005b4:	e9c7 0102 	strd	r0, r1, [r7, #8]

	// Note time since last call - call interval
	pTask->CallInterval = SysTick_Elapsed_MicroSeconds(pTask->LastCallStamp);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80005be:	4610      	mov	r0, r2
 80005c0:	4619      	mov	r1, r3
 80005c2:	f7ff fecf 	bl	8000364 <SysTick_Elapsed_MicroSeconds>
 80005c6:	4602      	mov	r2, r0
 80005c8:	460b      	mov	r3, r1
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	619a      	str	r2, [r3, #24]
	pTask->LastCallStamp = ull_StartTime;
 80005ce:	6879      	ldr	r1, [r7, #4]
 80005d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80005d4:	e9c1 2304 	strd	r2, r3, [r1, #16]

	// Run task
	pTask->ModuleFunc();
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4798      	blx	r3

	// Record time taken this time
	pTask->LastRunTime = SysTick_Elapsed_MicroSeconds(ull_StartTime);
 80005de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80005e2:	f7ff febf 	bl	8000364 <SysTick_Elapsed_MicroSeconds>
 80005e6:	4602      	mov	r2, r0
 80005e8:	460b      	mov	r3, r1
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	605a      	str	r2, [r3, #4]

	// Log max / min
	if (pTask->MaxTime_uS < pTask->LastRunTime)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	689a      	ldr	r2, [r3, #8]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d203      	bcs.n	8000602 <TimeAndRunTask+0x5a>
	{
		pTask->MaxTime_uS = pTask->LastRunTime;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	685a      	ldr	r2, [r3, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	609a      	str	r2, [r3, #8]
	}
	if (pTask->MinTime_uS > pTask->LastRunTime)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	68da      	ldr	r2, [r3, #12]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	429a      	cmp	r2, r3
 800060c:	d903      	bls.n	8000616 <TimeAndRunTask+0x6e>
	{
		pTask->MinTime_uS = pTask->LastRunTime;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	60da      	str	r2, [r3, #12]
	}

	// Trap a module taking too long
	if (pTask->LastRunTime > MODULE_CALL_DURATION_LIMIT_uS)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	2bfa      	cmp	r3, #250	; 0xfa
 800061c:	d901      	bls.n	8000622 <TimeAndRunTask+0x7a>
	{
		HandleTaskOverrun();
 800061e:	f7ff ffbb 	bl	8000598 <HandleTaskOverrun>
	}
}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800062e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000630:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <LoopForever+0x6>)
  ldr r1, =_edata
 8000636:	490d      	ldr	r1, [pc, #52]	; (800066c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000638:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <LoopForever+0xe>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800063c:	e002      	b.n	8000644 <LoopCopyDataInit>

0800063e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000642:	3304      	adds	r3, #4

08000644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000648:	d3f9      	bcc.n	800063e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800064a:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800064c:	4c0a      	ldr	r4, [pc, #40]	; (8000678 <LoopForever+0x16>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000650:	e001      	b.n	8000656 <LoopFillZerobss>

08000652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000654:	3204      	adds	r2, #4

08000656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000658:	d3fb      	bcc.n	8000652 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800065a:	f000 f811 	bl	8000680 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065e:	f7ff fea7 	bl	80003b0 <main>

08000662 <LoopForever>:

LoopForever:
  b LoopForever
 8000662:	e7fe      	b.n	8000662 <LoopForever>
  ldr   r0, =_estack
 8000664:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800066c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000670:	080006e8 	.word	0x080006e8
  ldr r2, =_sbss
 8000674:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000678:	20000084 	.word	0x20000084

0800067c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC_IRQHandler>
	...

08000680 <__libc_init_array>:
 8000680:	b570      	push	{r4, r5, r6, lr}
 8000682:	4d0d      	ldr	r5, [pc, #52]	; (80006b8 <__libc_init_array+0x38>)
 8000684:	4c0d      	ldr	r4, [pc, #52]	; (80006bc <__libc_init_array+0x3c>)
 8000686:	1b64      	subs	r4, r4, r5
 8000688:	10a4      	asrs	r4, r4, #2
 800068a:	2600      	movs	r6, #0
 800068c:	42a6      	cmp	r6, r4
 800068e:	d109      	bne.n	80006a4 <__libc_init_array+0x24>
 8000690:	4d0b      	ldr	r5, [pc, #44]	; (80006c0 <__libc_init_array+0x40>)
 8000692:	4c0c      	ldr	r4, [pc, #48]	; (80006c4 <__libc_init_array+0x44>)
 8000694:	f000 f818 	bl	80006c8 <_init>
 8000698:	1b64      	subs	r4, r4, r5
 800069a:	10a4      	asrs	r4, r4, #2
 800069c:	2600      	movs	r6, #0
 800069e:	42a6      	cmp	r6, r4
 80006a0:	d105      	bne.n	80006ae <__libc_init_array+0x2e>
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a8:	4798      	blx	r3
 80006aa:	3601      	adds	r6, #1
 80006ac:	e7ee      	b.n	800068c <__libc_init_array+0xc>
 80006ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b2:	4798      	blx	r3
 80006b4:	3601      	adds	r6, #1
 80006b6:	e7f2      	b.n	800069e <__libc_init_array+0x1e>
 80006b8:	080006e0 	.word	0x080006e0
 80006bc:	080006e0 	.word	0x080006e0
 80006c0:	080006e0 	.word	0x080006e0
 80006c4:	080006e4 	.word	0x080006e4

080006c8 <_init>:
 80006c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ca:	bf00      	nop
 80006cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ce:	bc08      	pop	{r3}
 80006d0:	469e      	mov	lr, r3
 80006d2:	4770      	bx	lr

080006d4 <_fini>:
 80006d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d6:	bf00      	nop
 80006d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006da:	bc08      	pop	{r3}
 80006dc:	469e      	mov	lr, r3
 80006de:	4770      	bx	lr
