
ConditionalMonitoredMainLoop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001878  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08001a28  08001a28  00011a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ad0  08001ad0  00020308  2**0
                  CONTENTS
  4 .ARM          00000000  08001ad0  08001ad0  00020308  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ad0  08001ad0  00020308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ad0  08001ad0  00011ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ad4  08001ad4  00011ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  08001ad8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020308  2**0
                  CONTENTS
 10 .bss          000001a4  20000308  20000308  00020308  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200004ac  200004ac  00020308  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020338  2**0
                  CONTENTS, READONLY
 14 .debug_info   000019b4  00000000  00000000  0002037b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000006d5  00000000  00000000  00021d2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000240  00000000  00000000  00022408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000019b  00000000  00000000  00022648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001bded  00000000  00000000  000227e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001dc8  00000000  00000000  0003e5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00099488  00000000  00000000  00040398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000010bc  00000000  00000000  000d9820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  000da8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000308 	.word	0x20000308
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001a10 	.word	0x08001a10

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000030c 	.word	0x2000030c
 80001ec:	08001a10 	.word	0x08001a10

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	6039      	str	r1, [r7, #0]
 800029a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800029c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	db0a      	blt.n	80002ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	490c      	ldr	r1, [pc, #48]	; (80002dc <__NVIC_SetPriority+0x4c>)
 80002aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ae:	0112      	lsls	r2, r2, #4
 80002b0:	b2d2      	uxtb	r2, r2
 80002b2:	440b      	add	r3, r1
 80002b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002b8:	e00a      	b.n	80002d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	4908      	ldr	r1, [pc, #32]	; (80002e0 <__NVIC_SetPriority+0x50>)
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	f003 030f 	and.w	r3, r3, #15
 80002c6:	3b04      	subs	r3, #4
 80002c8:	0112      	lsls	r2, r2, #4
 80002ca:	b2d2      	uxtb	r2, r2
 80002cc:	440b      	add	r3, r1
 80002ce:	761a      	strb	r2, [r3, #24]
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	e000e100 	.word	0xe000e100
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	3b01      	subs	r3, #1
 80002f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80002f4:	d301      	bcc.n	80002fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80002f6:	2301      	movs	r3, #1
 80002f8:	e00f      	b.n	800031a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002fa:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <SysTick_Config+0x40>)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	3b01      	subs	r3, #1
 8000300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000302:	210f      	movs	r1, #15
 8000304:	f04f 30ff 	mov.w	r0, #4294967295
 8000308:	f7ff ffc2 	bl	8000290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800030c:	4b05      	ldr	r3, [pc, #20]	; (8000324 <SysTick_Config+0x40>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000312:	4b04      	ldr	r3, [pc, #16]	; (8000324 <SysTick_Config+0x40>)
 8000314:	2207      	movs	r2, #7
 8000316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000318:	2300      	movs	r3, #0
}
 800031a:	4618      	mov	r0, r3
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	e000e010 	.word	0xe000e010

08000328 <SysTick_Handler>:
 * @brief SysTick_Handler
 * Interrupt handler routine for SysTick.
 * @param None
 * @retval None
 */
void SysTick_Handler( void ){
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0

	ull_SysTick_IRQ_Count++;
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <SysTick_Handler+0x20>)
 800032e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000332:	1c50      	adds	r0, r2, #1
 8000334:	f143 0100 	adc.w	r1, r3, #0
 8000338:	4b03      	ldr	r3, [pc, #12]	; (8000348 <SysTick_Handler+0x20>)
 800033a:	e9c3 0100 	strd	r0, r1, [r3]

}
 800033e:	bf00      	nop
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	20000328 	.word	0x20000328

0800034c <SysTick_Init>:
 * @brief Systick_Init
 * Initialise SysTick.
 * @param None
 * @retval None
 */
void SysTick_Init( void ){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0

	SysTick_Config(SYS_CLOCK_FRQ/1000);
 8000350:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8000354:	f7ff ffc6 	bl	80002e4 <SysTick_Config>

}
 8000358:	bf00      	nop
 800035a:	bd80      	pop	{r7, pc}

0800035c <SysTick_Get_Timestamp>:
 * Supply a high resolution timestamp from SysTick.
 * @param None
 * @retval None
 */
uint64_t SysTick_Get_Timestamp( void )
{
 800035c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8000360:	b08b      	sub	sp, #44	; 0x2c
 8000362:	af00      	add	r7, sp, #0
	uint64_t ull_New_Count;
	uint32_t ul_Interrupt_Flag = 0xFFFFFFFF;
 8000364:	f04f 33ff 	mov.w	r3, #4294967295
 8000368:	627b      	str	r3, [r7, #36]	; 0x24

	//Load the SysTick interrupt fired flag.
	ul_Interrupt_Flag = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
 800036a:	4b25      	ldr	r3, [pc, #148]	; (8000400 <SysTick_Get_Timestamp+0xa4>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000372:	627b      	str	r3, [r7, #36]	; 0x24

	//Monitor the calculation and go again if it's interrupted by the SysTick Interrupt.
	do{

	//Calculate the number of counts from imterrupts already
	ull_New_Count = (uint64_t)(ull_SysTick_IRQ_Count*SysTick->LOAD);
 8000374:	4b22      	ldr	r3, [pc, #136]	; (8000400 <SysTick_Get_Timestamp+0xa4>)
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	2200      	movs	r2, #0
 800037a:	469a      	mov	sl, r3
 800037c:	4693      	mov	fp, r2
 800037e:	4b21      	ldr	r3, [pc, #132]	; (8000404 <SysTick_Get_Timestamp+0xa8>)
 8000380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000384:	fb02 f00b 	mul.w	r0, r2, fp
 8000388:	fb0a f103 	mul.w	r1, sl, r3
 800038c:	4401      	add	r1, r0
 800038e:	fbaa 4502 	umull	r4, r5, sl, r2
 8000392:	194b      	adds	r3, r1, r5
 8000394:	461d      	mov	r5, r3
 8000396:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800039a:	e9c7 4506 	strd	r4, r5, [r7, #24]

	//Factor in the current count-down timer register value.
	ull_New_Count = (uint64_t)(ull_New_Count + SysTick->LOAD - SysTick->VAL);
 800039e:	4b18      	ldr	r3, [pc, #96]	; (8000400 <SysTick_Get_Timestamp+0xa4>)
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	2200      	movs	r2, #0
 80003a4:	613b      	str	r3, [r7, #16]
 80003a6:	617a      	str	r2, [r7, #20]
 80003a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80003ac:	6939      	ldr	r1, [r7, #16]
 80003ae:	eb11 0802 	adds.w	r8, r1, r2
 80003b2:	6979      	ldr	r1, [r7, #20]
 80003b4:	eb41 0903 	adc.w	r9, r1, r3
 80003b8:	4b11      	ldr	r3, [pc, #68]	; (8000400 <SysTick_Get_Timestamp+0xa4>)
 80003ba:	689b      	ldr	r3, [r3, #8]
 80003bc:	2200      	movs	r2, #0
 80003be:	60bb      	str	r3, [r7, #8]
 80003c0:	60fa      	str	r2, [r7, #12]
 80003c2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80003c6:	460b      	mov	r3, r1
 80003c8:	ebb8 0303 	subs.w	r3, r8, r3
 80003cc:	603b      	str	r3, [r7, #0]
 80003ce:	4613      	mov	r3, r2
 80003d0:	eb69 0303 	sbc.w	r3, r9, r3
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80003da:	e9c7 2306 	strd	r2, r3, [r7, #24]

	//Reload the SysTick interrupt fired flag
	ul_Interrupt_Flag = (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <SysTick_Get_Timestamp+0xa4>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003e6:	627b      	str	r3, [r7, #36]	; 0x24

	} while(ul_Interrupt_Flag != 0);
 80003e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d1c2      	bne.n	8000374 <SysTick_Get_Timestamp+0x18>

	return ull_New_Count;
 80003ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80003f2:	4610      	mov	r0, r2
 80003f4:	4619      	mov	r1, r3
 80003f6:	372c      	adds	r7, #44	; 0x2c
 80003f8:	46bd      	mov	sp, r7
 80003fa:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80003fe:	4770      	bx	lr
 8000400:	e000e010 	.word	0xe000e010
 8000404:	20000328 	.word	0x20000328

08000408 <SysTick_Elapsed_MicroSeconds>:
 * Return elapsed time in microseconds sincestart_stamp.
 * @param None
 * @retval None
 */
uint64_t SysTick_Elapsed_MicroSeconds(uint64_t ull_Start_Timestamp)
{
 8000408:	b5b0      	push	{r4, r5, r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	e9c7 0100 	strd	r0, r1, [r7]
   //Fetch the lastest count.
	uint64_t ull_Elapsed_Count = SysTick_Get_Timestamp();
 8000412:	f7ff ffa3 	bl	800035c <SysTick_Get_Timestamp>
 8000416:	e9c7 0102 	strd	r0, r1, [r7, #8]

	//Subtract the start count from the latest value
	ull_Elapsed_Count -= ull_Start_Timestamp;
 800041a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800041e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000422:	1a84      	subs	r4, r0, r2
 8000424:	eb61 0503 	sbc.w	r5, r1, r3
 8000428:	e9c7 4502 	strd	r4, r5, [r7, #8]

	//Convert counts to microseconds
	ull_Elapsed_Count = (uint64_t)(ull_Elapsed_Count / (SYS_CLOCK_FRQ/1000000));
 800042c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000430:	f04f 0200 	mov.w	r2, #0
 8000434:	f04f 0300 	mov.w	r3, #0
 8000438:	0902      	lsrs	r2, r0, #4
 800043a:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800043e:	090b      	lsrs	r3, r1, #4
 8000440:	e9c7 2302 	strd	r2, r3, [r7, #8]

	return ull_Elapsed_Count;
 8000444:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000448:	4610      	mov	r0, r2
 800044a:	4619      	mov	r1, r3
 800044c:	3710      	adds	r7, #16
 800044e:	46bd      	mov	sp, r7
 8000450:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000454 <main>:



// Main entry point.
int main(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
	static uint8_t uc_Sec_Index; // Secondary task index
	static uint8_t uc_Ter_Index; // Tertiary task index.

	// Run self tests if configured to do so.
#ifdef TEST
	RunTests();
 800045a:	f000 f9eb 	bl	8000834 <RunTests>
#endif


	//Initialise SysTick Interrupt.
	SysTick_Init();
 800045e:	f7ff ff75 	bl	800034c <SysTick_Init>

	// Enable the FPU (floating point co-processor, access = full access)
	SCB->CPACR |= FPU_CP10_FULL | FPU_CP11_FULL;
 8000462:	4b3c      	ldr	r3, [pc, #240]	; (8000554 <main+0x100>)
 8000464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000468:	4a3a      	ldr	r2, [pc, #232]	; (8000554 <main+0x100>)
 800046a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800046e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	//Enable clock access to GPIOG - for LED Output
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 8000472:	4b39      	ldr	r3, [pc, #228]	; (8000558 <main+0x104>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000476:	4a38      	ldr	r2, [pc, #224]	; (8000558 <main+0x104>)
 8000478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800047c:	6313      	str	r3, [r2, #48]	; 0x30
	//Set PG13 as output - Green LED.
	GPIOG->MODER |= (1 << 26);
 800047e:	4b37      	ldr	r3, [pc, #220]	; (800055c <main+0x108>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a36      	ldr	r2, [pc, #216]	; (800055c <main+0x108>)
 8000484:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000488:	6013      	str	r3, [r2, #0]
	GPIOG->MODER &= ~(1 << 27);
 800048a:	4b34      	ldr	r3, [pc, #208]	; (800055c <main+0x108>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a33      	ldr	r2, [pc, #204]	; (800055c <main+0x108>)
 8000490:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000494:	6013      	str	r3, [r2, #0]

    /* Loop forever */
	while(1)
	{
		// Call ALL primary tasks
		for (int i = 0; i < NUM_PRI_TASKS; i++)
 8000496:	2300      	movs	r3, #0
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	e013      	b.n	80004c4 <main+0x70>
		{
			// Skip disabled tasks
			if (PrimaryModules[i].TaskEnabled == FALSE)
 800049c:	4a30      	ldr	r2, [pc, #192]	; (8000560 <main+0x10c>)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	015b      	lsls	r3, r3, #5
 80004a2:	4413      	add	r3, r2
 80004a4:	331c      	adds	r3, #28
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d007      	beq.n	80004bc <main+0x68>
				continue;

			//**********************
			// RUN NEXT PRIMARY TASK
			RUN_THIS_TASK(PrimaryModules[i]); // How the function is called depends on build configuration.
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	015b      	lsls	r3, r3, #5
 80004b0:	4a2b      	ldr	r2, [pc, #172]	; (8000560 <main+0x10c>)
 80004b2:	4413      	add	r3, r2
 80004b4:	4618      	mov	r0, r3
 80004b6:	f000 f9db 	bl	8000870 <TimeAndRunTask>
 80004ba:	e000      	b.n	80004be <main+0x6a>
				continue;
 80004bc:	bf00      	nop
		for (int i = 0; i < NUM_PRI_TASKS; i++)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	3301      	adds	r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b04      	cmp	r3, #4
 80004c8:	d9e8      	bls.n	800049c <main+0x48>
		}

		// Call 1 secondary task
		if (uc_Sec_Index < NUM_SEC_TASKS)
 80004ca:	4b26      	ldr	r3, [pc, #152]	; (8000564 <main+0x110>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b05      	cmp	r3, #5
 80004d0:	d810      	bhi.n	80004f4 <main+0xa0>
		{
			// Run next secondary task
			// Only continue if selected task is enabled - else skip.
			if (SecondaryModules[uc_Sec_Index].TaskEnabled)
 80004d2:	4b24      	ldr	r3, [pc, #144]	; (8000564 <main+0x110>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	4a24      	ldr	r2, [pc, #144]	; (8000568 <main+0x114>)
 80004d8:	015b      	lsls	r3, r3, #5
 80004da:	4413      	add	r3, r2
 80004dc:	331c      	adds	r3, #28
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d007      	beq.n	80004f4 <main+0xa0>
			{
				//************************
				// RUN NEXT SECONDARY TASK
				RUN_THIS_TASK(SecondaryModules[uc_Sec_Index]); // How the function is called depends on build configuration.
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <main+0x110>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	015b      	lsls	r3, r3, #5
 80004ea:	4a1f      	ldr	r2, [pc, #124]	; (8000568 <main+0x114>)
 80004ec:	4413      	add	r3, r2
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 f9be 	bl	8000870 <TimeAndRunTask>
			}
		}
		uc_Sec_Index++;
 80004f4:	4b1b      	ldr	r3, [pc, #108]	; (8000564 <main+0x110>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	3301      	adds	r3, #1
 80004fa:	b2da      	uxtb	r2, r3
 80004fc:	4b19      	ldr	r3, [pc, #100]	; (8000564 <main+0x110>)
 80004fe:	701a      	strb	r2, [r3, #0]

		// When all secondary tasks completed, call 1 tertiary task
		if (uc_Sec_Index == (NUM_SEC_TASKS + 1))
 8000500:	4b18      	ldr	r3, [pc, #96]	; (8000564 <main+0x110>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b07      	cmp	r3, #7
 8000506:	d1c6      	bne.n	8000496 <main+0x42>
		{
			// Start the secondary task list again next time.
			uc_Sec_Index = 0;
 8000508:	4b16      	ldr	r3, [pc, #88]	; (8000564 <main+0x110>)
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]

			// Run next tertiary task
			if (uc_Ter_Index < NUM_TER_TASKS)
 800050e:	4b17      	ldr	r3, [pc, #92]	; (800056c <main+0x118>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	2b09      	cmp	r3, #9
 8000514:	d810      	bhi.n	8000538 <main+0xe4>
			{
				// Only run enabled tasks or skip
				if (TertiaryModules[uc_Ter_Index].TaskEnabled)
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <main+0x118>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	4a15      	ldr	r2, [pc, #84]	; (8000570 <main+0x11c>)
 800051c:	015b      	lsls	r3, r3, #5
 800051e:	4413      	add	r3, r2
 8000520:	331c      	adds	r3, #28
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d007      	beq.n	8000538 <main+0xe4>
				{
					//***********************
					// RUN NEXT TERTIARY TASK
					RUN_THIS_TASK(TertiaryModules[uc_Ter_Index]); // How the function is called depends on build configuration.
 8000528:	4b10      	ldr	r3, [pc, #64]	; (800056c <main+0x118>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	015b      	lsls	r3, r3, #5
 800052e:	4a10      	ldr	r2, [pc, #64]	; (8000570 <main+0x11c>)
 8000530:	4413      	add	r3, r2
 8000532:	4618      	mov	r0, r3
 8000534:	f000 f99c 	bl	8000870 <TimeAndRunTask>
				}
			}
			// Next tertiary task with wrap
			uc_Ter_Index++;
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <main+0x118>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	3301      	adds	r3, #1
 800053e:	b2da      	uxtb	r2, r3
 8000540:	4b0a      	ldr	r3, [pc, #40]	; (800056c <main+0x118>)
 8000542:	701a      	strb	r2, [r3, #0]
			if (uc_Ter_Index >= NUM_TER_TASKS)
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <main+0x118>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b09      	cmp	r3, #9
 800054a:	d9a4      	bls.n	8000496 <main+0x42>
			{
				uc_Ter_Index = 0;
 800054c:	4b07      	ldr	r3, [pc, #28]	; (800056c <main+0x118>)
 800054e:	2200      	movs	r2, #0
 8000550:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < NUM_PRI_TASKS; i++)
 8000552:	e7a0      	b.n	8000496 <main+0x42>
 8000554:	e000ed00 	.word	0xe000ed00
 8000558:	40023800 	.word	0x40023800
 800055c:	40021800 	.word	0x40021800
 8000560:	20000000 	.word	0x20000000
 8000564:	20000334 	.word	0x20000334
 8000568:	200000a0 	.word	0x200000a0
 800056c:	20000335 	.word	0x20000335
 8000570:	20000160 	.word	0x20000160

08000574 <MainLoopMonitor>:

#define IDLE_MAIN_LOOPS_PER_SECOND		12000
#define MIN_MAIN_LOOPS_PER_SECOND		1000
float PctIdle;
void MainLoopMonitor ( void )
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	static uint64_t MainLoopDurationTimer;
	static uint64_t MainLoopCountTimer;

	// How long since last here?
	// Includes first pass handling
	if (!DurationInitRequired)
 8000578:	4b3c      	ldr	r3, [pc, #240]	; (800066c <MainLoopMonitor+0xf8>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d11f      	bne.n	80005c0 <MainLoopMonitor+0x4c>
	{
		// Record duration and update max / min if needed
		MainLoopDurationLast_uS = SysTick_Elapsed_MicroSeconds(MainLoopDurationTimer);
 8000580:	4b3b      	ldr	r3, [pc, #236]	; (8000670 <MainLoopMonitor+0xfc>)
 8000582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000586:	4610      	mov	r0, r2
 8000588:	4619      	mov	r1, r3
 800058a:	f7ff ff3d 	bl	8000408 <SysTick_Elapsed_MicroSeconds>
 800058e:	4602      	mov	r2, r0
 8000590:	460b      	mov	r3, r1
 8000592:	4b38      	ldr	r3, [pc, #224]	; (8000674 <MainLoopMonitor+0x100>)
 8000594:	601a      	str	r2, [r3, #0]
		if (MainLoopDurationLast_uS < MainLoopDurationMin_uS)
 8000596:	4b37      	ldr	r3, [pc, #220]	; (8000674 <MainLoopMonitor+0x100>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	4b37      	ldr	r3, [pc, #220]	; (8000678 <MainLoopMonitor+0x104>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d203      	bcs.n	80005aa <MainLoopMonitor+0x36>
			MainLoopDurationMin_uS = MainLoopDurationLast_uS;
 80005a2:	4b34      	ldr	r3, [pc, #208]	; (8000674 <MainLoopMonitor+0x100>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a34      	ldr	r2, [pc, #208]	; (8000678 <MainLoopMonitor+0x104>)
 80005a8:	6013      	str	r3, [r2, #0]
		if (MainLoopDurationLast_uS > MainLoopDurationMax_uS)
 80005aa:	4b32      	ldr	r3, [pc, #200]	; (8000674 <MainLoopMonitor+0x100>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	4b33      	ldr	r3, [pc, #204]	; (800067c <MainLoopMonitor+0x108>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d907      	bls.n	80005c6 <MainLoopMonitor+0x52>
			MainLoopDurationMax_uS = MainLoopDurationLast_uS;
 80005b6:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <MainLoopMonitor+0x100>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a30      	ldr	r2, [pc, #192]	; (800067c <MainLoopMonitor+0x108>)
 80005bc:	6013      	str	r3, [r2, #0]
 80005be:	e002      	b.n	80005c6 <MainLoopMonitor+0x52>
	}
	else
		DurationInitRequired = FALSE;
 80005c0:	4b2a      	ldr	r3, [pc, #168]	; (800066c <MainLoopMonitor+0xf8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	// Reset timer for next pass of main loop
	MainLoopDurationTimer = SysTick_Get_Timestamp();
 80005c6:	f7ff fec9 	bl	800035c <SysTick_Get_Timestamp>
 80005ca:	4602      	mov	r2, r0
 80005cc:	460b      	mov	r3, r1
 80005ce:	4928      	ldr	r1, [pc, #160]	; (8000670 <MainLoopMonitor+0xfc>)
 80005d0:	e9c1 2300 	strd	r2, r3, [r1]

	////////////////////////////////
	// Only run this once per second - the number of main loops per second counter...
	if (SysTick_Elapsed_MicroSeconds(MainLoopCountTimer) >= 1000000)
 80005d4:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <MainLoopMonitor+0x10c>)
 80005d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005da:	4610      	mov	r0, r2
 80005dc:	4619      	mov	r1, r3
 80005de:	f7ff ff13 	bl	8000408 <SysTick_Elapsed_MicroSeconds>
 80005e2:	4602      	mov	r2, r0
 80005e4:	460b      	mov	r3, r1
 80005e6:	4927      	ldr	r1, [pc, #156]	; (8000684 <MainLoopMonitor+0x110>)
 80005e8:	428a      	cmp	r2, r1
 80005ea:	f173 0300 	sbcs.w	r3, r3, #0
 80005ee:	d335      	bcc.n	800065c <MainLoopMonitor+0xe8>
	{
		// Record number of main loops in the last second
		MainLoopsPerSecond = MainLoopCounter;
 80005f0:	4b25      	ldr	r3, [pc, #148]	; (8000688 <MainLoopMonitor+0x114>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a25      	ldr	r2, [pc, #148]	; (800068c <MainLoopMonitor+0x118>)
 80005f6:	6013      	str	r3, [r2, #0]

		// Record Max / Min
		if (MainLoopsPerSecond < MainLoopsPerSecondMIN)
 80005f8:	4b24      	ldr	r3, [pc, #144]	; (800068c <MainLoopMonitor+0x118>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <MainLoopMonitor+0x11c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	429a      	cmp	r2, r3
 8000602:	d203      	bcs.n	800060c <MainLoopMonitor+0x98>
			MainLoopsPerSecondMIN = MainLoopsPerSecond;
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <MainLoopMonitor+0x118>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <MainLoopMonitor+0x11c>)
 800060a:	6013      	str	r3, [r2, #0]
		if (MainLoopsPerSecond > MainLoopsPerSecondMAX)
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <MainLoopMonitor+0x118>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b20      	ldr	r3, [pc, #128]	; (8000694 <MainLoopMonitor+0x120>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	429a      	cmp	r2, r3
 8000616:	d903      	bls.n	8000620 <MainLoopMonitor+0xac>
			MainLoopsPerSecondMAX = MainLoopsPerSecond;
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <MainLoopMonitor+0x118>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a1d      	ldr	r2, [pc, #116]	; (8000694 <MainLoopMonitor+0x120>)
 800061e:	6013      	str	r3, [r2, #0]

		// Reset for another go
		MainLoopCountTimer = SysTick_Get_Timestamp();
 8000620:	f7ff fe9c 	bl	800035c <SysTick_Get_Timestamp>
 8000624:	4602      	mov	r2, r0
 8000626:	460b      	mov	r3, r1
 8000628:	4915      	ldr	r1, [pc, #84]	; (8000680 <MainLoopMonitor+0x10c>)
 800062a:	e9c1 2300 	strd	r2, r3, [r1]
		MainLoopCounter = 0;
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MainLoopMonitor+0x114>)
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]

		// Update % Busy
		PctIdle = 100.0 * ((float)(MainLoopsPerSecond - MIN_MAIN_LOOPS_PER_SECOND) / (float)(IDLE_MAIN_LOOPS_PER_SECOND - MIN_MAIN_LOOPS_PER_SECOND));
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <MainLoopMonitor+0x118>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800063c:	ee07 3a90 	vmov	s15, r3
 8000640:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000644:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000698 <MainLoopMonitor+0x124>
 8000648:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800064c:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800069c <MainLoopMonitor+0x128>
 8000650:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MainLoopMonitor+0x12c>)
 8000656:	edc3 7a00 	vstr	s15, [r3]
	}
	else
		// Still waiting for 1 second marker, count main loops...
		MainLoopCounter++;

}
 800065a:	e004      	b.n	8000666 <MainLoopMonitor+0xf2>
		MainLoopCounter++;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MainLoopMonitor+0x114>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3301      	adds	r3, #1
 8000662:	4a09      	ldr	r2, [pc, #36]	; (8000688 <MainLoopMonitor+0x114>)
 8000664:	6013      	str	r3, [r2, #0]
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200002a2 	.word	0x200002a2
 8000670:	20000338 	.word	0x20000338
 8000674:	20000340 	.word	0x20000340
 8000678:	200002a4 	.word	0x200002a4
 800067c:	20000344 	.word	0x20000344
 8000680:	20000348 	.word	0x20000348
 8000684:	000f4240 	.word	0x000f4240
 8000688:	20000350 	.word	0x20000350
 800068c:	20000354 	.word	0x20000354
 8000690:	200002a8 	.word	0x200002a8
 8000694:	20000358 	.word	0x20000358
 8000698:	462be000 	.word	0x462be000
 800069c:	42c80000 	.word	0x42c80000
 80006a0:	20000330 	.word	0x20000330

080006a4 <FunctionSimulator>:
#endif

// Simulate a function taking some time to process stuff.
uint16_t us_Func_Min_Time_uS = 10;
void FunctionSimulator ( void )
{
 80006a4:	b5b0      	push	{r4, r5, r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
	uint64_t timestamp = SysTick_Get_Timestamp();
 80006aa:	f7ff fe57 	bl	800035c <SysTick_Get_Timestamp>
 80006ae:	e9c7 0102 	strd	r0, r1, [r7, #8]
	uint16_t delay = us_Func_Min_Time_uS + (timestamp & 0x0F);  // Add in the lowest bits from the timestamp to give some variation.
 80006b2:	893b      	ldrh	r3, [r7, #8]
 80006b4:	f003 030f 	and.w	r3, r3, #15
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <FunctionSimulator+0x44>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	4413      	add	r3, r2
 80006c0:	80fb      	strh	r3, [r7, #6]

	// Delay the required period.
	while (SysTick_Elapsed_MicroSeconds(timestamp) < delay);
 80006c2:	bf00      	nop
 80006c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80006c8:	f7ff fe9e 	bl	8000408 <SysTick_Elapsed_MicroSeconds>
 80006cc:	4602      	mov	r2, r0
 80006ce:	460b      	mov	r3, r1
 80006d0:	88f9      	ldrh	r1, [r7, #6]
 80006d2:	2000      	movs	r0, #0
 80006d4:	460c      	mov	r4, r1
 80006d6:	4605      	mov	r5, r0
 80006d8:	42a2      	cmp	r2, r4
 80006da:	41ab      	sbcs	r3, r5
 80006dc:	d3f2      	bcc.n	80006c4 <FunctionSimulator+0x20>
}
 80006de:	bf00      	nop
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bdb0      	pop	{r4, r5, r7, pc}
 80006e8:	200002a0 	.word	0x200002a0

080006ec <PrimaryFunc1>:

void PrimaryFunc1 ( void )
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	FunctionSimulator();
 80006f0:	f7ff ffd8 	bl	80006a4 <FunctionSimulator>
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <PrimaryFunc2>:
void PrimaryFunc2 ( void )
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	FunctionSimulator();
 80006fc:	f7ff ffd2 	bl	80006a4 <FunctionSimulator>
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}

08000704 <PrimaryFunc3>:

void PrimaryFunc3 ( void )
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	FunctionSimulator();
 8000708:	f7ff ffcc 	bl	80006a4 <FunctionSimulator>
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}

08000710 <PrimaryFunc4>:

void PrimaryFunc4 ( void )
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	FunctionSimulator();
 8000714:	f7ff ffc6 	bl	80006a4 <FunctionSimulator>
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}

0800071c <SecondaryFunc1>:


void SecondaryFunc1 ( void )
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	FunctionSimulator();
 8000720:	f7ff ffc0 	bl	80006a4 <FunctionSimulator>
}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}

08000728 <SecondaryFunc2>:

void SecondaryFunc2 ( void )
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	FunctionSimulator();
 800072c:	f7ff ffba 	bl	80006a4 <FunctionSimulator>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}

08000734 <SecondaryFunc3>:

void SecondaryFunc3 ( void )
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	FunctionSimulator();
 8000738:	f7ff ffb4 	bl	80006a4 <FunctionSimulator>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}

08000740 <SecondaryFunc4>:

void SecondaryFunc4 ( void )
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	FunctionSimulator();
 8000744:	f7ff ffae 	bl	80006a4 <FunctionSimulator>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <SecondaryFunc5>:

void SecondaryFunc5 ( void )
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	FunctionSimulator();
 8000750:	f7ff ffa8 	bl	80006a4 <FunctionSimulator>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <SecondaryFunc6>:

void SecondaryFunc6 ( void )
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	FunctionSimulator();
 800075c:	f7ff ffa2 	bl	80006a4 <FunctionSimulator>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}

08000764 <TertiaryFunc1>:


void TertiaryFunc1 ( void )
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	FunctionSimulator();
 8000768:	f7ff ff9c 	bl	80006a4 <FunctionSimulator>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}

08000770 <TertiaryFunc2>:

void TertiaryFunc2 ( void )
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	FunctionSimulator();
 8000774:	f7ff ff96 	bl	80006a4 <FunctionSimulator>
}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}

0800077c <TertiaryFunc3>:

void TertiaryFunc3 ( void )
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	FunctionSimulator();
 8000780:	f7ff ff90 	bl	80006a4 <FunctionSimulator>
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}

08000788 <TertiaryFunc4>:

void TertiaryFunc4 ( void )
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	FunctionSimulator();
 800078c:	f7ff ff8a 	bl	80006a4 <FunctionSimulator>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}

08000794 <TertiaryFunc5>:

void TertiaryFunc5 ( void )
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	FunctionSimulator();
 8000798:	f7ff ff84 	bl	80006a4 <FunctionSimulator>
}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <TertiaryFunc6>:

void TertiaryFunc6 ( void )
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	FunctionSimulator();
 80007a4:	f7ff ff7e 	bl	80006a4 <FunctionSimulator>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <TertiaryFunc7>:

void TertiaryFunc7 ( void )
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	FunctionSimulator();
 80007b0:	f7ff ff78 	bl	80006a4 <FunctionSimulator>
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <TertiaryFunc8>:

void TertiaryFunc8 ( void )
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	FunctionSimulator();
 80007bc:	f7ff ff72 	bl	80006a4 <FunctionSimulator>
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <TertiaryFunc9>:

void TertiaryFunc9 ( void )
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	FunctionSimulator();
 80007c8:	f7ff ff6c 	bl	80006a4 <FunctionSimulator>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <MultipleBy3>:

// Example function that includes a runtime time test.
uint16_t MultipleBy3(uint16_t val)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]
	return val * 4;
 80007da:	88fb      	ldrh	r3, [r7, #6]
 80007dc:	009b      	lsls	r3, r3, #2
 80007de:	b29b      	uxth	r3, r3
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <RunFuncTest1>:

#ifdef TEST

void RunFuncTest1(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
	uint16_t testval = 3;
 80007f2:	2303      	movs	r3, #3
 80007f4:	80fb      	strh	r3, [r7, #6]
	uint32_t returnVal = MultipleBy3(testval);
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ffe9 	bl	80007d0 <MultipleBy3>
 80007fe:	4603      	mov	r3, r0
 8000800:	603b      	str	r3, [r7, #0]
	assert (returnVal == testval * 3);
 8000802:	88fa      	ldrh	r2, [r7, #6]
 8000804:	4613      	mov	r3, r2
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	441a      	add	r2, r3
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	429a      	cmp	r2, r3
 800080e:	d006      	beq.n	800081e <RunFuncTest1+0x32>
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <RunFuncTest1+0x3c>)
 8000812:	4a06      	ldr	r2, [pc, #24]	; (800082c <RunFuncTest1+0x40>)
 8000814:	f44f 71d8 	mov.w	r1, #432	; 0x1b0
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <RunFuncTest1+0x44>)
 800081a:	f000 f959 	bl	8000ad0 <__assert_func>
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	08001a28 	.word	0x08001a28
 800082c:	08001a54 	.word	0x08001a54
 8000830:	08001a44 	.word	0x08001a44

08000834 <RunTests>:

void RunTests(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	RunFuncTest1();
 8000838:	f7ff ffd8 	bl	80007ec <RunFuncTest1>
	// Add other functions to test here
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <FlashLED>:
#endif

// Flash the Green LED
void FlashLED ( void )
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
	GPIOG->ODR ^= (1 << 13);
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <FlashLED+0x1c>)
 8000846:	695b      	ldr	r3, [r3, #20]
 8000848:	4a04      	ldr	r2, [pc, #16]	; (800085c <FlashLED+0x1c>)
 800084a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800084e:	6153      	str	r3, [r2, #20]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40021800 	.word	0x40021800

08000860 <HandleTaskOverrun>:

#ifdef DEBUG // Additional task running diagnostics

// Called if a task takes too long.
void HandleTaskOverrun()
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
	asm("nop");
 8000864:	bf00      	nop
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <TimeAndRunTask>:

// Run and time how long a task takes.
void TimeAndRunTask(_MAIN_MODULES *pTask)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	// Note starting time
	uint64_t ull_StartTime = SysTick_Get_Timestamp();
 8000878:	f7ff fd70 	bl	800035c <SysTick_Get_Timestamp>
 800087c:	e9c7 0102 	strd	r0, r1, [r7, #8]

	// Note time since last call - call interval
	pTask->CallInterval = SysTick_Elapsed_MicroSeconds(pTask->LastCallStamp);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000886:	4610      	mov	r0, r2
 8000888:	4619      	mov	r1, r3
 800088a:	f7ff fdbd 	bl	8000408 <SysTick_Elapsed_MicroSeconds>
 800088e:	4602      	mov	r2, r0
 8000890:	460b      	mov	r3, r1
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	619a      	str	r2, [r3, #24]
	pTask->LastCallStamp = ull_StartTime;
 8000896:	6879      	ldr	r1, [r7, #4]
 8000898:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800089c:	e9c1 2304 	strd	r2, r3, [r1, #16]

	// Run task
	pTask->ModuleFunc();
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4798      	blx	r3

	// Record time taken this time
	pTask->LastRunTime = SysTick_Elapsed_MicroSeconds(ull_StartTime);
 80008a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80008aa:	f7ff fdad 	bl	8000408 <SysTick_Elapsed_MicroSeconds>
 80008ae:	4602      	mov	r2, r0
 80008b0:	460b      	mov	r3, r1
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	605a      	str	r2, [r3, #4]

	// Log max / min
	if (pTask->MaxTime_uS < pTask->LastRunTime)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	689a      	ldr	r2, [r3, #8]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d203      	bcs.n	80008ca <TimeAndRunTask+0x5a>
	{
		pTask->MaxTime_uS = pTask->LastRunTime;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	685a      	ldr	r2, [r3, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	609a      	str	r2, [r3, #8]
	}
	if (pTask->MinTime_uS > pTask->LastRunTime)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	68da      	ldr	r2, [r3, #12]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d903      	bls.n	80008de <TimeAndRunTask+0x6e>
	{
		pTask->MinTime_uS = pTask->LastRunTime;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	685a      	ldr	r2, [r3, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	60da      	str	r2, [r3, #12]
	}

	// Trap a module taking too long
	if (pTask->LastRunTime > MODULE_CALL_DURATION_LIMIT_uS)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	2bfa      	cmp	r3, #250	; 0xfa
 80008e4:	d901      	bls.n	80008ea <TimeAndRunTask+0x7a>
	{
		HandleTaskOverrun();
 80008e6:	f7ff ffbb 	bl	8000860 <HandleTaskOverrun>
	}
}
 80008ea:	bf00      	nop
 80008ec:	3710      	adds	r7, #16
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  return 1;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <_kill>:

int _kill(int pid, int sig)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
 800090a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800090c:	f000 fa64 	bl	8000dd8 <__errno>
 8000910:	4603      	mov	r3, r0
 8000912:	2216      	movs	r2, #22
 8000914:	601a      	str	r2, [r3, #0]
  return -1;
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <_exit>:

void _exit (int status)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800092a:	f04f 31ff 	mov.w	r1, #4294967295
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f7ff ffe7 	bl	8000902 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000934:	e7fe      	b.n	8000934 <_exit+0x12>

08000936 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b086      	sub	sp, #24
 800093a:	af00      	add	r7, sp, #0
 800093c:	60f8      	str	r0, [r7, #12]
 800093e:	60b9      	str	r1, [r7, #8]
 8000940:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
 8000946:	e00a      	b.n	800095e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000948:	f3af 8000 	nop.w
 800094c:	4601      	mov	r1, r0
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	1c5a      	adds	r2, r3, #1
 8000952:	60ba      	str	r2, [r7, #8]
 8000954:	b2ca      	uxtb	r2, r1
 8000956:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	3301      	adds	r3, #1
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	697a      	ldr	r2, [r7, #20]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	429a      	cmp	r2, r3
 8000964:	dbf0      	blt.n	8000948 <_read+0x12>
  }

  return len;
 8000966:	687b      	ldr	r3, [r7, #4]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	e009      	b.n	8000996 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	60ba      	str	r2, [r7, #8]
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	3301      	adds	r3, #1
 8000994:	617b      	str	r3, [r7, #20]
 8000996:	697a      	ldr	r2, [r7, #20]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	429a      	cmp	r2, r3
 800099c:	dbf1      	blt.n	8000982 <_write+0x12>
  }
  return len;
 800099e:	687b      	ldr	r3, [r7, #4]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <_close>:

int _close(int file)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009d0:	605a      	str	r2, [r3, #4]
  return 0;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <_isatty>:

int _isatty(int file)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009e8:	2301      	movs	r3, #1
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b085      	sub	sp, #20
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	60f8      	str	r0, [r7, #12]
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a02:	2300      	movs	r3, #0
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a18:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <_sbrk+0x5c>)
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <_sbrk+0x60>)
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d102      	bne.n	8000a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <_sbrk+0x64>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <_sbrk+0x68>)
 8000a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d207      	bcs.n	8000a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a40:	f000 f9ca 	bl	8000dd8 <__errno>
 8000a44:	4603      	mov	r3, r0
 8000a46:	220c      	movs	r2, #12
 8000a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4e:	e009      	b.n	8000a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <_sbrk+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <_sbrk+0x64>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <_sbrk+0x64>)
 8000a60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a62:	68fb      	ldr	r3, [r7, #12]
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20030000 	.word	0x20030000
 8000a70:	00000400 	.word	0x00000400
 8000a74:	2000035c 	.word	0x2000035c
 8000a78:	200004b0 	.word	0x200004b0

08000a7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a7c:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a7e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a80:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a86:	490d      	ldr	r1, [pc, #52]	; (8000abc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <LoopForever+0xe>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a8c:	e002      	b.n	8000a94 <LoopCopyDataInit>

08000a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a92:	3304      	adds	r3, #4

08000a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a98:	d3f9      	bcc.n	8000a8e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ac8 <LoopForever+0x16>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa0:	e001      	b.n	8000aa6 <LoopFillZerobss>

08000aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa4:	3204      	adds	r2, #4

08000aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa8:	d3fb      	bcc.n	8000aa2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000aaa:	f000 f99b 	bl	8000de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aae:	f7ff fcd1 	bl	8000454 <main>

08000ab2 <LoopForever>:

LoopForever:
  b LoopForever
 8000ab2:	e7fe      	b.n	8000ab2 <LoopForever>
  ldr   r0, =_estack
 8000ab4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 8000ac0:	08001ad8 	.word	0x08001ad8
  ldr r2, =_sbss
 8000ac4:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8000ac8:	200004ac 	.word	0x200004ac

08000acc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC_IRQHandler>
	...

08000ad0 <__assert_func>:
 8000ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ad2:	4614      	mov	r4, r2
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <__assert_func+0x2c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4605      	mov	r5, r0
 8000adc:	68d8      	ldr	r0, [r3, #12]
 8000ade:	b14c      	cbz	r4, 8000af4 <__assert_func+0x24>
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <__assert_func+0x30>)
 8000ae2:	9100      	str	r1, [sp, #0]
 8000ae4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000ae8:	4906      	ldr	r1, [pc, #24]	; (8000b04 <__assert_func+0x34>)
 8000aea:	462b      	mov	r3, r5
 8000aec:	f000 f8b2 	bl	8000c54 <fiprintf>
 8000af0:	f000 f99f 	bl	8000e32 <abort>
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <__assert_func+0x38>)
 8000af6:	461c      	mov	r4, r3
 8000af8:	e7f3      	b.n	8000ae2 <__assert_func+0x12>
 8000afa:	bf00      	nop
 8000afc:	20000304 	.word	0x20000304
 8000b00:	08001a61 	.word	0x08001a61
 8000b04:	08001a6e 	.word	0x08001a6e
 8000b08:	08001a9c 	.word	0x08001a9c

08000b0c <std>:
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	b510      	push	{r4, lr}
 8000b10:	4604      	mov	r4, r0
 8000b12:	e9c0 3300 	strd	r3, r3, [r0]
 8000b16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b1a:	6083      	str	r3, [r0, #8]
 8000b1c:	8181      	strh	r1, [r0, #12]
 8000b1e:	6643      	str	r3, [r0, #100]	; 0x64
 8000b20:	81c2      	strh	r2, [r0, #14]
 8000b22:	6183      	str	r3, [r0, #24]
 8000b24:	4619      	mov	r1, r3
 8000b26:	2208      	movs	r2, #8
 8000b28:	305c      	adds	r0, #92	; 0x5c
 8000b2a:	f000 f906 	bl	8000d3a <memset>
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <std+0x58>)
 8000b30:	6263      	str	r3, [r4, #36]	; 0x24
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <std+0x5c>)
 8000b34:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <std+0x60>)
 8000b38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <std+0x64>)
 8000b3c:	6323      	str	r3, [r4, #48]	; 0x30
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <std+0x68>)
 8000b40:	6224      	str	r4, [r4, #32]
 8000b42:	429c      	cmp	r4, r3
 8000b44:	d006      	beq.n	8000b54 <std+0x48>
 8000b46:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000b4a:	4294      	cmp	r4, r2
 8000b4c:	d002      	beq.n	8000b54 <std+0x48>
 8000b4e:	33d0      	adds	r3, #208	; 0xd0
 8000b50:	429c      	cmp	r4, r3
 8000b52:	d105      	bne.n	8000b60 <std+0x54>
 8000b54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b5c:	f000 b966 	b.w	8000e2c <__retarget_lock_init_recursive>
 8000b60:	bd10      	pop	{r4, pc}
 8000b62:	bf00      	nop
 8000b64:	08000cb5 	.word	0x08000cb5
 8000b68:	08000cd7 	.word	0x08000cd7
 8000b6c:	08000d0f 	.word	0x08000d0f
 8000b70:	08000d33 	.word	0x08000d33
 8000b74:	20000360 	.word	0x20000360

08000b78 <stdio_exit_handler>:
 8000b78:	4a02      	ldr	r2, [pc, #8]	; (8000b84 <stdio_exit_handler+0xc>)
 8000b7a:	4903      	ldr	r1, [pc, #12]	; (8000b88 <stdio_exit_handler+0x10>)
 8000b7c:	4803      	ldr	r0, [pc, #12]	; (8000b8c <stdio_exit_handler+0x14>)
 8000b7e:	f000 b87b 	b.w	8000c78 <_fwalk_sglue>
 8000b82:	bf00      	nop
 8000b84:	200002ac 	.word	0x200002ac
 8000b88:	080016e5 	.word	0x080016e5
 8000b8c:	200002b8 	.word	0x200002b8

08000b90 <cleanup_stdio>:
 8000b90:	6841      	ldr	r1, [r0, #4]
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <cleanup_stdio+0x34>)
 8000b94:	4299      	cmp	r1, r3
 8000b96:	b510      	push	{r4, lr}
 8000b98:	4604      	mov	r4, r0
 8000b9a:	d001      	beq.n	8000ba0 <cleanup_stdio+0x10>
 8000b9c:	f000 fda2 	bl	80016e4 <_fflush_r>
 8000ba0:	68a1      	ldr	r1, [r4, #8]
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <cleanup_stdio+0x38>)
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d002      	beq.n	8000bae <cleanup_stdio+0x1e>
 8000ba8:	4620      	mov	r0, r4
 8000baa:	f000 fd9b 	bl	80016e4 <_fflush_r>
 8000bae:	68e1      	ldr	r1, [r4, #12]
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <cleanup_stdio+0x3c>)
 8000bb2:	4299      	cmp	r1, r3
 8000bb4:	d004      	beq.n	8000bc0 <cleanup_stdio+0x30>
 8000bb6:	4620      	mov	r0, r4
 8000bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bbc:	f000 bd92 	b.w	80016e4 <_fflush_r>
 8000bc0:	bd10      	pop	{r4, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000360 	.word	0x20000360
 8000bc8:	200003c8 	.word	0x200003c8
 8000bcc:	20000430 	.word	0x20000430

08000bd0 <global_stdio_init.part.0>:
 8000bd0:	b510      	push	{r4, lr}
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <global_stdio_init.part.0+0x30>)
 8000bd4:	4c0b      	ldr	r4, [pc, #44]	; (8000c04 <global_stdio_init.part.0+0x34>)
 8000bd6:	4a0c      	ldr	r2, [pc, #48]	; (8000c08 <global_stdio_init.part.0+0x38>)
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	4620      	mov	r0, r4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2104      	movs	r1, #4
 8000be0:	f7ff ff94 	bl	8000b0c <std>
 8000be4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000be8:	2201      	movs	r2, #1
 8000bea:	2109      	movs	r1, #9
 8000bec:	f7ff ff8e 	bl	8000b0c <std>
 8000bf0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bfa:	2112      	movs	r1, #18
 8000bfc:	f7ff bf86 	b.w	8000b0c <std>
 8000c00:	20000498 	.word	0x20000498
 8000c04:	20000360 	.word	0x20000360
 8000c08:	08000b79 	.word	0x08000b79

08000c0c <__sfp_lock_acquire>:
 8000c0c:	4801      	ldr	r0, [pc, #4]	; (8000c14 <__sfp_lock_acquire+0x8>)
 8000c0e:	f000 b90e 	b.w	8000e2e <__retarget_lock_acquire_recursive>
 8000c12:	bf00      	nop
 8000c14:	200004a1 	.word	0x200004a1

08000c18 <__sfp_lock_release>:
 8000c18:	4801      	ldr	r0, [pc, #4]	; (8000c20 <__sfp_lock_release+0x8>)
 8000c1a:	f000 b909 	b.w	8000e30 <__retarget_lock_release_recursive>
 8000c1e:	bf00      	nop
 8000c20:	200004a1 	.word	0x200004a1

08000c24 <__sinit>:
 8000c24:	b510      	push	{r4, lr}
 8000c26:	4604      	mov	r4, r0
 8000c28:	f7ff fff0 	bl	8000c0c <__sfp_lock_acquire>
 8000c2c:	6a23      	ldr	r3, [r4, #32]
 8000c2e:	b11b      	cbz	r3, 8000c38 <__sinit+0x14>
 8000c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c34:	f7ff bff0 	b.w	8000c18 <__sfp_lock_release>
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <__sinit+0x28>)
 8000c3a:	6223      	str	r3, [r4, #32]
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <__sinit+0x2c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d1f5      	bne.n	8000c30 <__sinit+0xc>
 8000c44:	f7ff ffc4 	bl	8000bd0 <global_stdio_init.part.0>
 8000c48:	e7f2      	b.n	8000c30 <__sinit+0xc>
 8000c4a:	bf00      	nop
 8000c4c:	08000b91 	.word	0x08000b91
 8000c50:	20000498 	.word	0x20000498

08000c54 <fiprintf>:
 8000c54:	b40e      	push	{r1, r2, r3}
 8000c56:	b503      	push	{r0, r1, lr}
 8000c58:	4601      	mov	r1, r0
 8000c5a:	ab03      	add	r3, sp, #12
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <fiprintf+0x20>)
 8000c5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c62:	6800      	ldr	r0, [r0, #0]
 8000c64:	9301      	str	r3, [sp, #4]
 8000c66:	f000 fa0d 	bl	8001084 <_vfiprintf_r>
 8000c6a:	b002      	add	sp, #8
 8000c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c70:	b003      	add	sp, #12
 8000c72:	4770      	bx	lr
 8000c74:	20000304 	.word	0x20000304

08000c78 <_fwalk_sglue>:
 8000c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c7c:	4607      	mov	r7, r0
 8000c7e:	4688      	mov	r8, r1
 8000c80:	4614      	mov	r4, r2
 8000c82:	2600      	movs	r6, #0
 8000c84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c88:	f1b9 0901 	subs.w	r9, r9, #1
 8000c8c:	d505      	bpl.n	8000c9a <_fwalk_sglue+0x22>
 8000c8e:	6824      	ldr	r4, [r4, #0]
 8000c90:	2c00      	cmp	r4, #0
 8000c92:	d1f7      	bne.n	8000c84 <_fwalk_sglue+0xc>
 8000c94:	4630      	mov	r0, r6
 8000c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c9a:	89ab      	ldrh	r3, [r5, #12]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d907      	bls.n	8000cb0 <_fwalk_sglue+0x38>
 8000ca0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	d003      	beq.n	8000cb0 <_fwalk_sglue+0x38>
 8000ca8:	4629      	mov	r1, r5
 8000caa:	4638      	mov	r0, r7
 8000cac:	47c0      	blx	r8
 8000cae:	4306      	orrs	r6, r0
 8000cb0:	3568      	adds	r5, #104	; 0x68
 8000cb2:	e7e9      	b.n	8000c88 <_fwalk_sglue+0x10>

08000cb4 <__sread>:
 8000cb4:	b510      	push	{r4, lr}
 8000cb6:	460c      	mov	r4, r1
 8000cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cbc:	f000 f868 	bl	8000d90 <_read_r>
 8000cc0:	2800      	cmp	r0, #0
 8000cc2:	bfab      	itete	ge
 8000cc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8000cc8:	181b      	addge	r3, r3, r0
 8000cca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000cce:	bfac      	ite	ge
 8000cd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8000cd2:	81a3      	strhlt	r3, [r4, #12]
 8000cd4:	bd10      	pop	{r4, pc}

08000cd6 <__swrite>:
 8000cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cda:	461f      	mov	r7, r3
 8000cdc:	898b      	ldrh	r3, [r1, #12]
 8000cde:	05db      	lsls	r3, r3, #23
 8000ce0:	4605      	mov	r5, r0
 8000ce2:	460c      	mov	r4, r1
 8000ce4:	4616      	mov	r6, r2
 8000ce6:	d505      	bpl.n	8000cf4 <__swrite+0x1e>
 8000ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cec:	2302      	movs	r3, #2
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f000 f83c 	bl	8000d6c <_lseek_r>
 8000cf4:	89a3      	ldrh	r3, [r4, #12]
 8000cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000cfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cfe:	81a3      	strh	r3, [r4, #12]
 8000d00:	4632      	mov	r2, r6
 8000d02:	463b      	mov	r3, r7
 8000d04:	4628      	mov	r0, r5
 8000d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d0a:	f000 b853 	b.w	8000db4 <_write_r>

08000d0e <__sseek>:
 8000d0e:	b510      	push	{r4, lr}
 8000d10:	460c      	mov	r4, r1
 8000d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d16:	f000 f829 	bl	8000d6c <_lseek_r>
 8000d1a:	1c43      	adds	r3, r0, #1
 8000d1c:	89a3      	ldrh	r3, [r4, #12]
 8000d1e:	bf15      	itete	ne
 8000d20:	6560      	strne	r0, [r4, #84]	; 0x54
 8000d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000d2a:	81a3      	strheq	r3, [r4, #12]
 8000d2c:	bf18      	it	ne
 8000d2e:	81a3      	strhne	r3, [r4, #12]
 8000d30:	bd10      	pop	{r4, pc}

08000d32 <__sclose>:
 8000d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d36:	f000 b809 	b.w	8000d4c <_close_r>

08000d3a <memset>:
 8000d3a:	4402      	add	r2, r0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d100      	bne.n	8000d44 <memset+0xa>
 8000d42:	4770      	bx	lr
 8000d44:	f803 1b01 	strb.w	r1, [r3], #1
 8000d48:	e7f9      	b.n	8000d3e <memset+0x4>
	...

08000d4c <_close_r>:
 8000d4c:	b538      	push	{r3, r4, r5, lr}
 8000d4e:	4d06      	ldr	r5, [pc, #24]	; (8000d68 <_close_r+0x1c>)
 8000d50:	2300      	movs	r3, #0
 8000d52:	4604      	mov	r4, r0
 8000d54:	4608      	mov	r0, r1
 8000d56:	602b      	str	r3, [r5, #0]
 8000d58:	f7ff fe26 	bl	80009a8 <_close>
 8000d5c:	1c43      	adds	r3, r0, #1
 8000d5e:	d102      	bne.n	8000d66 <_close_r+0x1a>
 8000d60:	682b      	ldr	r3, [r5, #0]
 8000d62:	b103      	cbz	r3, 8000d66 <_close_r+0x1a>
 8000d64:	6023      	str	r3, [r4, #0]
 8000d66:	bd38      	pop	{r3, r4, r5, pc}
 8000d68:	2000049c 	.word	0x2000049c

08000d6c <_lseek_r>:
 8000d6c:	b538      	push	{r3, r4, r5, lr}
 8000d6e:	4d07      	ldr	r5, [pc, #28]	; (8000d8c <_lseek_r+0x20>)
 8000d70:	4604      	mov	r4, r0
 8000d72:	4608      	mov	r0, r1
 8000d74:	4611      	mov	r1, r2
 8000d76:	2200      	movs	r2, #0
 8000d78:	602a      	str	r2, [r5, #0]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	f7ff fe3b 	bl	80009f6 <_lseek>
 8000d80:	1c43      	adds	r3, r0, #1
 8000d82:	d102      	bne.n	8000d8a <_lseek_r+0x1e>
 8000d84:	682b      	ldr	r3, [r5, #0]
 8000d86:	b103      	cbz	r3, 8000d8a <_lseek_r+0x1e>
 8000d88:	6023      	str	r3, [r4, #0]
 8000d8a:	bd38      	pop	{r3, r4, r5, pc}
 8000d8c:	2000049c 	.word	0x2000049c

08000d90 <_read_r>:
 8000d90:	b538      	push	{r3, r4, r5, lr}
 8000d92:	4d07      	ldr	r5, [pc, #28]	; (8000db0 <_read_r+0x20>)
 8000d94:	4604      	mov	r4, r0
 8000d96:	4608      	mov	r0, r1
 8000d98:	4611      	mov	r1, r2
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	602a      	str	r2, [r5, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	f7ff fdc9 	bl	8000936 <_read>
 8000da4:	1c43      	adds	r3, r0, #1
 8000da6:	d102      	bne.n	8000dae <_read_r+0x1e>
 8000da8:	682b      	ldr	r3, [r5, #0]
 8000daa:	b103      	cbz	r3, 8000dae <_read_r+0x1e>
 8000dac:	6023      	str	r3, [r4, #0]
 8000dae:	bd38      	pop	{r3, r4, r5, pc}
 8000db0:	2000049c 	.word	0x2000049c

08000db4 <_write_r>:
 8000db4:	b538      	push	{r3, r4, r5, lr}
 8000db6:	4d07      	ldr	r5, [pc, #28]	; (8000dd4 <_write_r+0x20>)
 8000db8:	4604      	mov	r4, r0
 8000dba:	4608      	mov	r0, r1
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	602a      	str	r2, [r5, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	f7ff fdd4 	bl	8000970 <_write>
 8000dc8:	1c43      	adds	r3, r0, #1
 8000dca:	d102      	bne.n	8000dd2 <_write_r+0x1e>
 8000dcc:	682b      	ldr	r3, [r5, #0]
 8000dce:	b103      	cbz	r3, 8000dd2 <_write_r+0x1e>
 8000dd0:	6023      	str	r3, [r4, #0]
 8000dd2:	bd38      	pop	{r3, r4, r5, pc}
 8000dd4:	2000049c 	.word	0x2000049c

08000dd8 <__errno>:
 8000dd8:	4b01      	ldr	r3, [pc, #4]	; (8000de0 <__errno+0x8>)
 8000dda:	6818      	ldr	r0, [r3, #0]
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000304 	.word	0x20000304

08000de4 <__libc_init_array>:
 8000de4:	b570      	push	{r4, r5, r6, lr}
 8000de6:	4d0d      	ldr	r5, [pc, #52]	; (8000e1c <__libc_init_array+0x38>)
 8000de8:	4c0d      	ldr	r4, [pc, #52]	; (8000e20 <__libc_init_array+0x3c>)
 8000dea:	1b64      	subs	r4, r4, r5
 8000dec:	10a4      	asrs	r4, r4, #2
 8000dee:	2600      	movs	r6, #0
 8000df0:	42a6      	cmp	r6, r4
 8000df2:	d109      	bne.n	8000e08 <__libc_init_array+0x24>
 8000df4:	4d0b      	ldr	r5, [pc, #44]	; (8000e24 <__libc_init_array+0x40>)
 8000df6:	4c0c      	ldr	r4, [pc, #48]	; (8000e28 <__libc_init_array+0x44>)
 8000df8:	f000 fe0a 	bl	8001a10 <_init>
 8000dfc:	1b64      	subs	r4, r4, r5
 8000dfe:	10a4      	asrs	r4, r4, #2
 8000e00:	2600      	movs	r6, #0
 8000e02:	42a6      	cmp	r6, r4
 8000e04:	d105      	bne.n	8000e12 <__libc_init_array+0x2e>
 8000e06:	bd70      	pop	{r4, r5, r6, pc}
 8000e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e0c:	4798      	blx	r3
 8000e0e:	3601      	adds	r6, #1
 8000e10:	e7ee      	b.n	8000df0 <__libc_init_array+0xc>
 8000e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e16:	4798      	blx	r3
 8000e18:	3601      	adds	r6, #1
 8000e1a:	e7f2      	b.n	8000e02 <__libc_init_array+0x1e>
 8000e1c:	08001ad0 	.word	0x08001ad0
 8000e20:	08001ad0 	.word	0x08001ad0
 8000e24:	08001ad0 	.word	0x08001ad0
 8000e28:	08001ad4 	.word	0x08001ad4

08000e2c <__retarget_lock_init_recursive>:
 8000e2c:	4770      	bx	lr

08000e2e <__retarget_lock_acquire_recursive>:
 8000e2e:	4770      	bx	lr

08000e30 <__retarget_lock_release_recursive>:
 8000e30:	4770      	bx	lr

08000e32 <abort>:
 8000e32:	b508      	push	{r3, lr}
 8000e34:	2006      	movs	r0, #6
 8000e36:	f000 fd3b 	bl	80018b0 <raise>
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f7ff fd71 	bl	8000922 <_exit>

08000e40 <_free_r>:
 8000e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000e42:	2900      	cmp	r1, #0
 8000e44:	d044      	beq.n	8000ed0 <_free_r+0x90>
 8000e46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e4a:	9001      	str	r0, [sp, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	f1a1 0404 	sub.w	r4, r1, #4
 8000e52:	bfb8      	it	lt
 8000e54:	18e4      	addlt	r4, r4, r3
 8000e56:	f000 f8df 	bl	8001018 <__malloc_lock>
 8000e5a:	4a1e      	ldr	r2, [pc, #120]	; (8000ed4 <_free_r+0x94>)
 8000e5c:	9801      	ldr	r0, [sp, #4]
 8000e5e:	6813      	ldr	r3, [r2, #0]
 8000e60:	b933      	cbnz	r3, 8000e70 <_free_r+0x30>
 8000e62:	6063      	str	r3, [r4, #4]
 8000e64:	6014      	str	r4, [r2, #0]
 8000e66:	b003      	add	sp, #12
 8000e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000e6c:	f000 b8da 	b.w	8001024 <__malloc_unlock>
 8000e70:	42a3      	cmp	r3, r4
 8000e72:	d908      	bls.n	8000e86 <_free_r+0x46>
 8000e74:	6825      	ldr	r5, [r4, #0]
 8000e76:	1961      	adds	r1, r4, r5
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	bf01      	itttt	eq
 8000e7c:	6819      	ldreq	r1, [r3, #0]
 8000e7e:	685b      	ldreq	r3, [r3, #4]
 8000e80:	1949      	addeq	r1, r1, r5
 8000e82:	6021      	streq	r1, [r4, #0]
 8000e84:	e7ed      	b.n	8000e62 <_free_r+0x22>
 8000e86:	461a      	mov	r2, r3
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	b10b      	cbz	r3, 8000e90 <_free_r+0x50>
 8000e8c:	42a3      	cmp	r3, r4
 8000e8e:	d9fa      	bls.n	8000e86 <_free_r+0x46>
 8000e90:	6811      	ldr	r1, [r2, #0]
 8000e92:	1855      	adds	r5, r2, r1
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	d10b      	bne.n	8000eb0 <_free_r+0x70>
 8000e98:	6824      	ldr	r4, [r4, #0]
 8000e9a:	4421      	add	r1, r4
 8000e9c:	1854      	adds	r4, r2, r1
 8000e9e:	42a3      	cmp	r3, r4
 8000ea0:	6011      	str	r1, [r2, #0]
 8000ea2:	d1e0      	bne.n	8000e66 <_free_r+0x26>
 8000ea4:	681c      	ldr	r4, [r3, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	6053      	str	r3, [r2, #4]
 8000eaa:	440c      	add	r4, r1
 8000eac:	6014      	str	r4, [r2, #0]
 8000eae:	e7da      	b.n	8000e66 <_free_r+0x26>
 8000eb0:	d902      	bls.n	8000eb8 <_free_r+0x78>
 8000eb2:	230c      	movs	r3, #12
 8000eb4:	6003      	str	r3, [r0, #0]
 8000eb6:	e7d6      	b.n	8000e66 <_free_r+0x26>
 8000eb8:	6825      	ldr	r5, [r4, #0]
 8000eba:	1961      	adds	r1, r4, r5
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	bf04      	itt	eq
 8000ec0:	6819      	ldreq	r1, [r3, #0]
 8000ec2:	685b      	ldreq	r3, [r3, #4]
 8000ec4:	6063      	str	r3, [r4, #4]
 8000ec6:	bf04      	itt	eq
 8000ec8:	1949      	addeq	r1, r1, r5
 8000eca:	6021      	streq	r1, [r4, #0]
 8000ecc:	6054      	str	r4, [r2, #4]
 8000ece:	e7ca      	b.n	8000e66 <_free_r+0x26>
 8000ed0:	b003      	add	sp, #12
 8000ed2:	bd30      	pop	{r4, r5, pc}
 8000ed4:	200004a4 	.word	0x200004a4

08000ed8 <sbrk_aligned>:
 8000ed8:	b570      	push	{r4, r5, r6, lr}
 8000eda:	4e0e      	ldr	r6, [pc, #56]	; (8000f14 <sbrk_aligned+0x3c>)
 8000edc:	460c      	mov	r4, r1
 8000ede:	6831      	ldr	r1, [r6, #0]
 8000ee0:	4605      	mov	r5, r0
 8000ee2:	b911      	cbnz	r1, 8000eea <sbrk_aligned+0x12>
 8000ee4:	f000 fd00 	bl	80018e8 <_sbrk_r>
 8000ee8:	6030      	str	r0, [r6, #0]
 8000eea:	4621      	mov	r1, r4
 8000eec:	4628      	mov	r0, r5
 8000eee:	f000 fcfb 	bl	80018e8 <_sbrk_r>
 8000ef2:	1c43      	adds	r3, r0, #1
 8000ef4:	d00a      	beq.n	8000f0c <sbrk_aligned+0x34>
 8000ef6:	1cc4      	adds	r4, r0, #3
 8000ef8:	f024 0403 	bic.w	r4, r4, #3
 8000efc:	42a0      	cmp	r0, r4
 8000efe:	d007      	beq.n	8000f10 <sbrk_aligned+0x38>
 8000f00:	1a21      	subs	r1, r4, r0
 8000f02:	4628      	mov	r0, r5
 8000f04:	f000 fcf0 	bl	80018e8 <_sbrk_r>
 8000f08:	3001      	adds	r0, #1
 8000f0a:	d101      	bne.n	8000f10 <sbrk_aligned+0x38>
 8000f0c:	f04f 34ff 	mov.w	r4, #4294967295
 8000f10:	4620      	mov	r0, r4
 8000f12:	bd70      	pop	{r4, r5, r6, pc}
 8000f14:	200004a8 	.word	0x200004a8

08000f18 <_malloc_r>:
 8000f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f1c:	1ccd      	adds	r5, r1, #3
 8000f1e:	f025 0503 	bic.w	r5, r5, #3
 8000f22:	3508      	adds	r5, #8
 8000f24:	2d0c      	cmp	r5, #12
 8000f26:	bf38      	it	cc
 8000f28:	250c      	movcc	r5, #12
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	4607      	mov	r7, r0
 8000f2e:	db01      	blt.n	8000f34 <_malloc_r+0x1c>
 8000f30:	42a9      	cmp	r1, r5
 8000f32:	d905      	bls.n	8000f40 <_malloc_r+0x28>
 8000f34:	230c      	movs	r3, #12
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	2600      	movs	r6, #0
 8000f3a:	4630      	mov	r0, r6
 8000f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f40:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001014 <_malloc_r+0xfc>
 8000f44:	f000 f868 	bl	8001018 <__malloc_lock>
 8000f48:	f8d8 3000 	ldr.w	r3, [r8]
 8000f4c:	461c      	mov	r4, r3
 8000f4e:	bb5c      	cbnz	r4, 8000fa8 <_malloc_r+0x90>
 8000f50:	4629      	mov	r1, r5
 8000f52:	4638      	mov	r0, r7
 8000f54:	f7ff ffc0 	bl	8000ed8 <sbrk_aligned>
 8000f58:	1c43      	adds	r3, r0, #1
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	d155      	bne.n	800100a <_malloc_r+0xf2>
 8000f5e:	f8d8 4000 	ldr.w	r4, [r8]
 8000f62:	4626      	mov	r6, r4
 8000f64:	2e00      	cmp	r6, #0
 8000f66:	d145      	bne.n	8000ff4 <_malloc_r+0xdc>
 8000f68:	2c00      	cmp	r4, #0
 8000f6a:	d048      	beq.n	8000ffe <_malloc_r+0xe6>
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	4631      	mov	r1, r6
 8000f70:	4638      	mov	r0, r7
 8000f72:	eb04 0903 	add.w	r9, r4, r3
 8000f76:	f000 fcb7 	bl	80018e8 <_sbrk_r>
 8000f7a:	4581      	cmp	r9, r0
 8000f7c:	d13f      	bne.n	8000ffe <_malloc_r+0xe6>
 8000f7e:	6821      	ldr	r1, [r4, #0]
 8000f80:	1a6d      	subs	r5, r5, r1
 8000f82:	4629      	mov	r1, r5
 8000f84:	4638      	mov	r0, r7
 8000f86:	f7ff ffa7 	bl	8000ed8 <sbrk_aligned>
 8000f8a:	3001      	adds	r0, #1
 8000f8c:	d037      	beq.n	8000ffe <_malloc_r+0xe6>
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	442b      	add	r3, r5
 8000f92:	6023      	str	r3, [r4, #0]
 8000f94:	f8d8 3000 	ldr.w	r3, [r8]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d038      	beq.n	800100e <_malloc_r+0xf6>
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	42a2      	cmp	r2, r4
 8000fa0:	d12b      	bne.n	8000ffa <_malloc_r+0xe2>
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	e00f      	b.n	8000fc8 <_malloc_r+0xb0>
 8000fa8:	6822      	ldr	r2, [r4, #0]
 8000faa:	1b52      	subs	r2, r2, r5
 8000fac:	d41f      	bmi.n	8000fee <_malloc_r+0xd6>
 8000fae:	2a0b      	cmp	r2, #11
 8000fb0:	d917      	bls.n	8000fe2 <_malloc_r+0xca>
 8000fb2:	1961      	adds	r1, r4, r5
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	6025      	str	r5, [r4, #0]
 8000fb8:	bf18      	it	ne
 8000fba:	6059      	strne	r1, [r3, #4]
 8000fbc:	6863      	ldr	r3, [r4, #4]
 8000fbe:	bf08      	it	eq
 8000fc0:	f8c8 1000 	streq.w	r1, [r8]
 8000fc4:	5162      	str	r2, [r4, r5]
 8000fc6:	604b      	str	r3, [r1, #4]
 8000fc8:	4638      	mov	r0, r7
 8000fca:	f104 060b 	add.w	r6, r4, #11
 8000fce:	f000 f829 	bl	8001024 <__malloc_unlock>
 8000fd2:	f026 0607 	bic.w	r6, r6, #7
 8000fd6:	1d23      	adds	r3, r4, #4
 8000fd8:	1af2      	subs	r2, r6, r3
 8000fda:	d0ae      	beq.n	8000f3a <_malloc_r+0x22>
 8000fdc:	1b9b      	subs	r3, r3, r6
 8000fde:	50a3      	str	r3, [r4, r2]
 8000fe0:	e7ab      	b.n	8000f3a <_malloc_r+0x22>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	6862      	ldr	r2, [r4, #4]
 8000fe6:	d1dd      	bne.n	8000fa4 <_malloc_r+0x8c>
 8000fe8:	f8c8 2000 	str.w	r2, [r8]
 8000fec:	e7ec      	b.n	8000fc8 <_malloc_r+0xb0>
 8000fee:	4623      	mov	r3, r4
 8000ff0:	6864      	ldr	r4, [r4, #4]
 8000ff2:	e7ac      	b.n	8000f4e <_malloc_r+0x36>
 8000ff4:	4634      	mov	r4, r6
 8000ff6:	6876      	ldr	r6, [r6, #4]
 8000ff8:	e7b4      	b.n	8000f64 <_malloc_r+0x4c>
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	e7cc      	b.n	8000f98 <_malloc_r+0x80>
 8000ffe:	230c      	movs	r3, #12
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4638      	mov	r0, r7
 8001004:	f000 f80e 	bl	8001024 <__malloc_unlock>
 8001008:	e797      	b.n	8000f3a <_malloc_r+0x22>
 800100a:	6025      	str	r5, [r4, #0]
 800100c:	e7dc      	b.n	8000fc8 <_malloc_r+0xb0>
 800100e:	605b      	str	r3, [r3, #4]
 8001010:	deff      	udf	#255	; 0xff
 8001012:	bf00      	nop
 8001014:	200004a4 	.word	0x200004a4

08001018 <__malloc_lock>:
 8001018:	4801      	ldr	r0, [pc, #4]	; (8001020 <__malloc_lock+0x8>)
 800101a:	f7ff bf08 	b.w	8000e2e <__retarget_lock_acquire_recursive>
 800101e:	bf00      	nop
 8001020:	200004a0 	.word	0x200004a0

08001024 <__malloc_unlock>:
 8001024:	4801      	ldr	r0, [pc, #4]	; (800102c <__malloc_unlock+0x8>)
 8001026:	f7ff bf03 	b.w	8000e30 <__retarget_lock_release_recursive>
 800102a:	bf00      	nop
 800102c:	200004a0 	.word	0x200004a0

08001030 <__sfputc_r>:
 8001030:	6893      	ldr	r3, [r2, #8]
 8001032:	3b01      	subs	r3, #1
 8001034:	2b00      	cmp	r3, #0
 8001036:	b410      	push	{r4}
 8001038:	6093      	str	r3, [r2, #8]
 800103a:	da08      	bge.n	800104e <__sfputc_r+0x1e>
 800103c:	6994      	ldr	r4, [r2, #24]
 800103e:	42a3      	cmp	r3, r4
 8001040:	db01      	blt.n	8001046 <__sfputc_r+0x16>
 8001042:	290a      	cmp	r1, #10
 8001044:	d103      	bne.n	800104e <__sfputc_r+0x1e>
 8001046:	f85d 4b04 	ldr.w	r4, [sp], #4
 800104a:	f000 bb73 	b.w	8001734 <__swbuf_r>
 800104e:	6813      	ldr	r3, [r2, #0]
 8001050:	1c58      	adds	r0, r3, #1
 8001052:	6010      	str	r0, [r2, #0]
 8001054:	7019      	strb	r1, [r3, #0]
 8001056:	4608      	mov	r0, r1
 8001058:	f85d 4b04 	ldr.w	r4, [sp], #4
 800105c:	4770      	bx	lr

0800105e <__sfputs_r>:
 800105e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001060:	4606      	mov	r6, r0
 8001062:	460f      	mov	r7, r1
 8001064:	4614      	mov	r4, r2
 8001066:	18d5      	adds	r5, r2, r3
 8001068:	42ac      	cmp	r4, r5
 800106a:	d101      	bne.n	8001070 <__sfputs_r+0x12>
 800106c:	2000      	movs	r0, #0
 800106e:	e007      	b.n	8001080 <__sfputs_r+0x22>
 8001070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001074:	463a      	mov	r2, r7
 8001076:	4630      	mov	r0, r6
 8001078:	f7ff ffda 	bl	8001030 <__sfputc_r>
 800107c:	1c43      	adds	r3, r0, #1
 800107e:	d1f3      	bne.n	8001068 <__sfputs_r+0xa>
 8001080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001084 <_vfiprintf_r>:
 8001084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001088:	460d      	mov	r5, r1
 800108a:	b09d      	sub	sp, #116	; 0x74
 800108c:	4614      	mov	r4, r2
 800108e:	4698      	mov	r8, r3
 8001090:	4606      	mov	r6, r0
 8001092:	b118      	cbz	r0, 800109c <_vfiprintf_r+0x18>
 8001094:	6a03      	ldr	r3, [r0, #32]
 8001096:	b90b      	cbnz	r3, 800109c <_vfiprintf_r+0x18>
 8001098:	f7ff fdc4 	bl	8000c24 <__sinit>
 800109c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800109e:	07d9      	lsls	r1, r3, #31
 80010a0:	d405      	bmi.n	80010ae <_vfiprintf_r+0x2a>
 80010a2:	89ab      	ldrh	r3, [r5, #12]
 80010a4:	059a      	lsls	r2, r3, #22
 80010a6:	d402      	bmi.n	80010ae <_vfiprintf_r+0x2a>
 80010a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80010aa:	f7ff fec0 	bl	8000e2e <__retarget_lock_acquire_recursive>
 80010ae:	89ab      	ldrh	r3, [r5, #12]
 80010b0:	071b      	lsls	r3, r3, #28
 80010b2:	d501      	bpl.n	80010b8 <_vfiprintf_r+0x34>
 80010b4:	692b      	ldr	r3, [r5, #16]
 80010b6:	b99b      	cbnz	r3, 80010e0 <_vfiprintf_r+0x5c>
 80010b8:	4629      	mov	r1, r5
 80010ba:	4630      	mov	r0, r6
 80010bc:	f000 fb78 	bl	80017b0 <__swsetup_r>
 80010c0:	b170      	cbz	r0, 80010e0 <_vfiprintf_r+0x5c>
 80010c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80010c4:	07dc      	lsls	r4, r3, #31
 80010c6:	d504      	bpl.n	80010d2 <_vfiprintf_r+0x4e>
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	b01d      	add	sp, #116	; 0x74
 80010ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80010d2:	89ab      	ldrh	r3, [r5, #12]
 80010d4:	0598      	lsls	r0, r3, #22
 80010d6:	d4f7      	bmi.n	80010c8 <_vfiprintf_r+0x44>
 80010d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80010da:	f7ff fea9 	bl	8000e30 <__retarget_lock_release_recursive>
 80010de:	e7f3      	b.n	80010c8 <_vfiprintf_r+0x44>
 80010e0:	2300      	movs	r3, #0
 80010e2:	9309      	str	r3, [sp, #36]	; 0x24
 80010e4:	2320      	movs	r3, #32
 80010e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80010ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80010ee:	2330      	movs	r3, #48	; 0x30
 80010f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80012a4 <_vfiprintf_r+0x220>
 80010f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80010f8:	f04f 0901 	mov.w	r9, #1
 80010fc:	4623      	mov	r3, r4
 80010fe:	469a      	mov	sl, r3
 8001100:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001104:	b10a      	cbz	r2, 800110a <_vfiprintf_r+0x86>
 8001106:	2a25      	cmp	r2, #37	; 0x25
 8001108:	d1f9      	bne.n	80010fe <_vfiprintf_r+0x7a>
 800110a:	ebba 0b04 	subs.w	fp, sl, r4
 800110e:	d00b      	beq.n	8001128 <_vfiprintf_r+0xa4>
 8001110:	465b      	mov	r3, fp
 8001112:	4622      	mov	r2, r4
 8001114:	4629      	mov	r1, r5
 8001116:	4630      	mov	r0, r6
 8001118:	f7ff ffa1 	bl	800105e <__sfputs_r>
 800111c:	3001      	adds	r0, #1
 800111e:	f000 80a9 	beq.w	8001274 <_vfiprintf_r+0x1f0>
 8001122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001124:	445a      	add	r2, fp
 8001126:	9209      	str	r2, [sp, #36]	; 0x24
 8001128:	f89a 3000 	ldrb.w	r3, [sl]
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 80a1 	beq.w	8001274 <_vfiprintf_r+0x1f0>
 8001132:	2300      	movs	r3, #0
 8001134:	f04f 32ff 	mov.w	r2, #4294967295
 8001138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800113c:	f10a 0a01 	add.w	sl, sl, #1
 8001140:	9304      	str	r3, [sp, #16]
 8001142:	9307      	str	r3, [sp, #28]
 8001144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001148:	931a      	str	r3, [sp, #104]	; 0x68
 800114a:	4654      	mov	r4, sl
 800114c:	2205      	movs	r2, #5
 800114e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001152:	4854      	ldr	r0, [pc, #336]	; (80012a4 <_vfiprintf_r+0x220>)
 8001154:	f7ff f84c 	bl	80001f0 <memchr>
 8001158:	9a04      	ldr	r2, [sp, #16]
 800115a:	b9d8      	cbnz	r0, 8001194 <_vfiprintf_r+0x110>
 800115c:	06d1      	lsls	r1, r2, #27
 800115e:	bf44      	itt	mi
 8001160:	2320      	movmi	r3, #32
 8001162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001166:	0713      	lsls	r3, r2, #28
 8001168:	bf44      	itt	mi
 800116a:	232b      	movmi	r3, #43	; 0x2b
 800116c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001170:	f89a 3000 	ldrb.w	r3, [sl]
 8001174:	2b2a      	cmp	r3, #42	; 0x2a
 8001176:	d015      	beq.n	80011a4 <_vfiprintf_r+0x120>
 8001178:	9a07      	ldr	r2, [sp, #28]
 800117a:	4654      	mov	r4, sl
 800117c:	2000      	movs	r0, #0
 800117e:	f04f 0c0a 	mov.w	ip, #10
 8001182:	4621      	mov	r1, r4
 8001184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001188:	3b30      	subs	r3, #48	; 0x30
 800118a:	2b09      	cmp	r3, #9
 800118c:	d94d      	bls.n	800122a <_vfiprintf_r+0x1a6>
 800118e:	b1b0      	cbz	r0, 80011be <_vfiprintf_r+0x13a>
 8001190:	9207      	str	r2, [sp, #28]
 8001192:	e014      	b.n	80011be <_vfiprintf_r+0x13a>
 8001194:	eba0 0308 	sub.w	r3, r0, r8
 8001198:	fa09 f303 	lsl.w	r3, r9, r3
 800119c:	4313      	orrs	r3, r2
 800119e:	9304      	str	r3, [sp, #16]
 80011a0:	46a2      	mov	sl, r4
 80011a2:	e7d2      	b.n	800114a <_vfiprintf_r+0xc6>
 80011a4:	9b03      	ldr	r3, [sp, #12]
 80011a6:	1d19      	adds	r1, r3, #4
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	9103      	str	r1, [sp, #12]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bfbb      	ittet	lt
 80011b0:	425b      	neglt	r3, r3
 80011b2:	f042 0202 	orrlt.w	r2, r2, #2
 80011b6:	9307      	strge	r3, [sp, #28]
 80011b8:	9307      	strlt	r3, [sp, #28]
 80011ba:	bfb8      	it	lt
 80011bc:	9204      	strlt	r2, [sp, #16]
 80011be:	7823      	ldrb	r3, [r4, #0]
 80011c0:	2b2e      	cmp	r3, #46	; 0x2e
 80011c2:	d10c      	bne.n	80011de <_vfiprintf_r+0x15a>
 80011c4:	7863      	ldrb	r3, [r4, #1]
 80011c6:	2b2a      	cmp	r3, #42	; 0x2a
 80011c8:	d134      	bne.n	8001234 <_vfiprintf_r+0x1b0>
 80011ca:	9b03      	ldr	r3, [sp, #12]
 80011cc:	1d1a      	adds	r2, r3, #4
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	9203      	str	r2, [sp, #12]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	bfb8      	it	lt
 80011d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80011da:	3402      	adds	r4, #2
 80011dc:	9305      	str	r3, [sp, #20]
 80011de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80012b4 <_vfiprintf_r+0x230>
 80011e2:	7821      	ldrb	r1, [r4, #0]
 80011e4:	2203      	movs	r2, #3
 80011e6:	4650      	mov	r0, sl
 80011e8:	f7ff f802 	bl	80001f0 <memchr>
 80011ec:	b138      	cbz	r0, 80011fe <_vfiprintf_r+0x17a>
 80011ee:	9b04      	ldr	r3, [sp, #16]
 80011f0:	eba0 000a 	sub.w	r0, r0, sl
 80011f4:	2240      	movs	r2, #64	; 0x40
 80011f6:	4082      	lsls	r2, r0
 80011f8:	4313      	orrs	r3, r2
 80011fa:	3401      	adds	r4, #1
 80011fc:	9304      	str	r3, [sp, #16]
 80011fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001202:	4829      	ldr	r0, [pc, #164]	; (80012a8 <_vfiprintf_r+0x224>)
 8001204:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001208:	2206      	movs	r2, #6
 800120a:	f7fe fff1 	bl	80001f0 <memchr>
 800120e:	2800      	cmp	r0, #0
 8001210:	d03f      	beq.n	8001292 <_vfiprintf_r+0x20e>
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <_vfiprintf_r+0x228>)
 8001214:	bb1b      	cbnz	r3, 800125e <_vfiprintf_r+0x1da>
 8001216:	9b03      	ldr	r3, [sp, #12]
 8001218:	3307      	adds	r3, #7
 800121a:	f023 0307 	bic.w	r3, r3, #7
 800121e:	3308      	adds	r3, #8
 8001220:	9303      	str	r3, [sp, #12]
 8001222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001224:	443b      	add	r3, r7
 8001226:	9309      	str	r3, [sp, #36]	; 0x24
 8001228:	e768      	b.n	80010fc <_vfiprintf_r+0x78>
 800122a:	fb0c 3202 	mla	r2, ip, r2, r3
 800122e:	460c      	mov	r4, r1
 8001230:	2001      	movs	r0, #1
 8001232:	e7a6      	b.n	8001182 <_vfiprintf_r+0xfe>
 8001234:	2300      	movs	r3, #0
 8001236:	3401      	adds	r4, #1
 8001238:	9305      	str	r3, [sp, #20]
 800123a:	4619      	mov	r1, r3
 800123c:	f04f 0c0a 	mov.w	ip, #10
 8001240:	4620      	mov	r0, r4
 8001242:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001246:	3a30      	subs	r2, #48	; 0x30
 8001248:	2a09      	cmp	r2, #9
 800124a:	d903      	bls.n	8001254 <_vfiprintf_r+0x1d0>
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0c6      	beq.n	80011de <_vfiprintf_r+0x15a>
 8001250:	9105      	str	r1, [sp, #20]
 8001252:	e7c4      	b.n	80011de <_vfiprintf_r+0x15a>
 8001254:	fb0c 2101 	mla	r1, ip, r1, r2
 8001258:	4604      	mov	r4, r0
 800125a:	2301      	movs	r3, #1
 800125c:	e7f0      	b.n	8001240 <_vfiprintf_r+0x1bc>
 800125e:	ab03      	add	r3, sp, #12
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	462a      	mov	r2, r5
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <_vfiprintf_r+0x22c>)
 8001266:	a904      	add	r1, sp, #16
 8001268:	4630      	mov	r0, r6
 800126a:	f3af 8000 	nop.w
 800126e:	4607      	mov	r7, r0
 8001270:	1c78      	adds	r0, r7, #1
 8001272:	d1d6      	bne.n	8001222 <_vfiprintf_r+0x19e>
 8001274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001276:	07d9      	lsls	r1, r3, #31
 8001278:	d405      	bmi.n	8001286 <_vfiprintf_r+0x202>
 800127a:	89ab      	ldrh	r3, [r5, #12]
 800127c:	059a      	lsls	r2, r3, #22
 800127e:	d402      	bmi.n	8001286 <_vfiprintf_r+0x202>
 8001280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001282:	f7ff fdd5 	bl	8000e30 <__retarget_lock_release_recursive>
 8001286:	89ab      	ldrh	r3, [r5, #12]
 8001288:	065b      	lsls	r3, r3, #25
 800128a:	f53f af1d 	bmi.w	80010c8 <_vfiprintf_r+0x44>
 800128e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001290:	e71c      	b.n	80010cc <_vfiprintf_r+0x48>
 8001292:	ab03      	add	r3, sp, #12
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	462a      	mov	r2, r5
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <_vfiprintf_r+0x22c>)
 800129a:	a904      	add	r1, sp, #16
 800129c:	4630      	mov	r0, r6
 800129e:	f000 f879 	bl	8001394 <_printf_i>
 80012a2:	e7e4      	b.n	800126e <_vfiprintf_r+0x1ea>
 80012a4:	08001a9d 	.word	0x08001a9d
 80012a8:	08001aa7 	.word	0x08001aa7
 80012ac:	00000000 	.word	0x00000000
 80012b0:	0800105f 	.word	0x0800105f
 80012b4:	08001aa3 	.word	0x08001aa3

080012b8 <_printf_common>:
 80012b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012bc:	4616      	mov	r6, r2
 80012be:	4699      	mov	r9, r3
 80012c0:	688a      	ldr	r2, [r1, #8]
 80012c2:	690b      	ldr	r3, [r1, #16]
 80012c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80012c8:	4293      	cmp	r3, r2
 80012ca:	bfb8      	it	lt
 80012cc:	4613      	movlt	r3, r2
 80012ce:	6033      	str	r3, [r6, #0]
 80012d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80012d4:	4607      	mov	r7, r0
 80012d6:	460c      	mov	r4, r1
 80012d8:	b10a      	cbz	r2, 80012de <_printf_common+0x26>
 80012da:	3301      	adds	r3, #1
 80012dc:	6033      	str	r3, [r6, #0]
 80012de:	6823      	ldr	r3, [r4, #0]
 80012e0:	0699      	lsls	r1, r3, #26
 80012e2:	bf42      	ittt	mi
 80012e4:	6833      	ldrmi	r3, [r6, #0]
 80012e6:	3302      	addmi	r3, #2
 80012e8:	6033      	strmi	r3, [r6, #0]
 80012ea:	6825      	ldr	r5, [r4, #0]
 80012ec:	f015 0506 	ands.w	r5, r5, #6
 80012f0:	d106      	bne.n	8001300 <_printf_common+0x48>
 80012f2:	f104 0a19 	add.w	sl, r4, #25
 80012f6:	68e3      	ldr	r3, [r4, #12]
 80012f8:	6832      	ldr	r2, [r6, #0]
 80012fa:	1a9b      	subs	r3, r3, r2
 80012fc:	42ab      	cmp	r3, r5
 80012fe:	dc26      	bgt.n	800134e <_printf_common+0x96>
 8001300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001304:	1e13      	subs	r3, r2, #0
 8001306:	6822      	ldr	r2, [r4, #0]
 8001308:	bf18      	it	ne
 800130a:	2301      	movne	r3, #1
 800130c:	0692      	lsls	r2, r2, #26
 800130e:	d42b      	bmi.n	8001368 <_printf_common+0xb0>
 8001310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001314:	4649      	mov	r1, r9
 8001316:	4638      	mov	r0, r7
 8001318:	47c0      	blx	r8
 800131a:	3001      	adds	r0, #1
 800131c:	d01e      	beq.n	800135c <_printf_common+0xa4>
 800131e:	6823      	ldr	r3, [r4, #0]
 8001320:	6922      	ldr	r2, [r4, #16]
 8001322:	f003 0306 	and.w	r3, r3, #6
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf02      	ittt	eq
 800132a:	68e5      	ldreq	r5, [r4, #12]
 800132c:	6833      	ldreq	r3, [r6, #0]
 800132e:	1aed      	subeq	r5, r5, r3
 8001330:	68a3      	ldr	r3, [r4, #8]
 8001332:	bf0c      	ite	eq
 8001334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001338:	2500      	movne	r5, #0
 800133a:	4293      	cmp	r3, r2
 800133c:	bfc4      	itt	gt
 800133e:	1a9b      	subgt	r3, r3, r2
 8001340:	18ed      	addgt	r5, r5, r3
 8001342:	2600      	movs	r6, #0
 8001344:	341a      	adds	r4, #26
 8001346:	42b5      	cmp	r5, r6
 8001348:	d11a      	bne.n	8001380 <_printf_common+0xc8>
 800134a:	2000      	movs	r0, #0
 800134c:	e008      	b.n	8001360 <_printf_common+0xa8>
 800134e:	2301      	movs	r3, #1
 8001350:	4652      	mov	r2, sl
 8001352:	4649      	mov	r1, r9
 8001354:	4638      	mov	r0, r7
 8001356:	47c0      	blx	r8
 8001358:	3001      	adds	r0, #1
 800135a:	d103      	bne.n	8001364 <_printf_common+0xac>
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001364:	3501      	adds	r5, #1
 8001366:	e7c6      	b.n	80012f6 <_printf_common+0x3e>
 8001368:	18e1      	adds	r1, r4, r3
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	2030      	movs	r0, #48	; 0x30
 800136e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001372:	4422      	add	r2, r4
 8001374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800137c:	3302      	adds	r3, #2
 800137e:	e7c7      	b.n	8001310 <_printf_common+0x58>
 8001380:	2301      	movs	r3, #1
 8001382:	4622      	mov	r2, r4
 8001384:	4649      	mov	r1, r9
 8001386:	4638      	mov	r0, r7
 8001388:	47c0      	blx	r8
 800138a:	3001      	adds	r0, #1
 800138c:	d0e6      	beq.n	800135c <_printf_common+0xa4>
 800138e:	3601      	adds	r6, #1
 8001390:	e7d9      	b.n	8001346 <_printf_common+0x8e>
	...

08001394 <_printf_i>:
 8001394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001398:	7e0f      	ldrb	r7, [r1, #24]
 800139a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800139c:	2f78      	cmp	r7, #120	; 0x78
 800139e:	4691      	mov	r9, r2
 80013a0:	4680      	mov	r8, r0
 80013a2:	460c      	mov	r4, r1
 80013a4:	469a      	mov	sl, r3
 80013a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80013aa:	d807      	bhi.n	80013bc <_printf_i+0x28>
 80013ac:	2f62      	cmp	r7, #98	; 0x62
 80013ae:	d80a      	bhi.n	80013c6 <_printf_i+0x32>
 80013b0:	2f00      	cmp	r7, #0
 80013b2:	f000 80d4 	beq.w	800155e <_printf_i+0x1ca>
 80013b6:	2f58      	cmp	r7, #88	; 0x58
 80013b8:	f000 80c0 	beq.w	800153c <_printf_i+0x1a8>
 80013bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80013c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80013c4:	e03a      	b.n	800143c <_printf_i+0xa8>
 80013c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80013ca:	2b15      	cmp	r3, #21
 80013cc:	d8f6      	bhi.n	80013bc <_printf_i+0x28>
 80013ce:	a101      	add	r1, pc, #4	; (adr r1, 80013d4 <_printf_i+0x40>)
 80013d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80013d4:	0800142d 	.word	0x0800142d
 80013d8:	08001441 	.word	0x08001441
 80013dc:	080013bd 	.word	0x080013bd
 80013e0:	080013bd 	.word	0x080013bd
 80013e4:	080013bd 	.word	0x080013bd
 80013e8:	080013bd 	.word	0x080013bd
 80013ec:	08001441 	.word	0x08001441
 80013f0:	080013bd 	.word	0x080013bd
 80013f4:	080013bd 	.word	0x080013bd
 80013f8:	080013bd 	.word	0x080013bd
 80013fc:	080013bd 	.word	0x080013bd
 8001400:	08001545 	.word	0x08001545
 8001404:	0800146d 	.word	0x0800146d
 8001408:	080014ff 	.word	0x080014ff
 800140c:	080013bd 	.word	0x080013bd
 8001410:	080013bd 	.word	0x080013bd
 8001414:	08001567 	.word	0x08001567
 8001418:	080013bd 	.word	0x080013bd
 800141c:	0800146d 	.word	0x0800146d
 8001420:	080013bd 	.word	0x080013bd
 8001424:	080013bd 	.word	0x080013bd
 8001428:	08001507 	.word	0x08001507
 800142c:	682b      	ldr	r3, [r5, #0]
 800142e:	1d1a      	adds	r2, r3, #4
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	602a      	str	r2, [r5, #0]
 8001434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800143c:	2301      	movs	r3, #1
 800143e:	e09f      	b.n	8001580 <_printf_i+0x1ec>
 8001440:	6820      	ldr	r0, [r4, #0]
 8001442:	682b      	ldr	r3, [r5, #0]
 8001444:	0607      	lsls	r7, r0, #24
 8001446:	f103 0104 	add.w	r1, r3, #4
 800144a:	6029      	str	r1, [r5, #0]
 800144c:	d501      	bpl.n	8001452 <_printf_i+0xbe>
 800144e:	681e      	ldr	r6, [r3, #0]
 8001450:	e003      	b.n	800145a <_printf_i+0xc6>
 8001452:	0646      	lsls	r6, r0, #25
 8001454:	d5fb      	bpl.n	800144e <_printf_i+0xba>
 8001456:	f9b3 6000 	ldrsh.w	r6, [r3]
 800145a:	2e00      	cmp	r6, #0
 800145c:	da03      	bge.n	8001466 <_printf_i+0xd2>
 800145e:	232d      	movs	r3, #45	; 0x2d
 8001460:	4276      	negs	r6, r6
 8001462:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001466:	485a      	ldr	r0, [pc, #360]	; (80015d0 <_printf_i+0x23c>)
 8001468:	230a      	movs	r3, #10
 800146a:	e012      	b.n	8001492 <_printf_i+0xfe>
 800146c:	682b      	ldr	r3, [r5, #0]
 800146e:	6820      	ldr	r0, [r4, #0]
 8001470:	1d19      	adds	r1, r3, #4
 8001472:	6029      	str	r1, [r5, #0]
 8001474:	0605      	lsls	r5, r0, #24
 8001476:	d501      	bpl.n	800147c <_printf_i+0xe8>
 8001478:	681e      	ldr	r6, [r3, #0]
 800147a:	e002      	b.n	8001482 <_printf_i+0xee>
 800147c:	0641      	lsls	r1, r0, #25
 800147e:	d5fb      	bpl.n	8001478 <_printf_i+0xe4>
 8001480:	881e      	ldrh	r6, [r3, #0]
 8001482:	4853      	ldr	r0, [pc, #332]	; (80015d0 <_printf_i+0x23c>)
 8001484:	2f6f      	cmp	r7, #111	; 0x6f
 8001486:	bf0c      	ite	eq
 8001488:	2308      	moveq	r3, #8
 800148a:	230a      	movne	r3, #10
 800148c:	2100      	movs	r1, #0
 800148e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001492:	6865      	ldr	r5, [r4, #4]
 8001494:	60a5      	str	r5, [r4, #8]
 8001496:	2d00      	cmp	r5, #0
 8001498:	bfa2      	ittt	ge
 800149a:	6821      	ldrge	r1, [r4, #0]
 800149c:	f021 0104 	bicge.w	r1, r1, #4
 80014a0:	6021      	strge	r1, [r4, #0]
 80014a2:	b90e      	cbnz	r6, 80014a8 <_printf_i+0x114>
 80014a4:	2d00      	cmp	r5, #0
 80014a6:	d04b      	beq.n	8001540 <_printf_i+0x1ac>
 80014a8:	4615      	mov	r5, r2
 80014aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80014ae:	fb03 6711 	mls	r7, r3, r1, r6
 80014b2:	5dc7      	ldrb	r7, [r0, r7]
 80014b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80014b8:	4637      	mov	r7, r6
 80014ba:	42bb      	cmp	r3, r7
 80014bc:	460e      	mov	r6, r1
 80014be:	d9f4      	bls.n	80014aa <_printf_i+0x116>
 80014c0:	2b08      	cmp	r3, #8
 80014c2:	d10b      	bne.n	80014dc <_printf_i+0x148>
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	07de      	lsls	r6, r3, #31
 80014c8:	d508      	bpl.n	80014dc <_printf_i+0x148>
 80014ca:	6923      	ldr	r3, [r4, #16]
 80014cc:	6861      	ldr	r1, [r4, #4]
 80014ce:	4299      	cmp	r1, r3
 80014d0:	bfde      	ittt	le
 80014d2:	2330      	movle	r3, #48	; 0x30
 80014d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80014d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80014dc:	1b52      	subs	r2, r2, r5
 80014de:	6122      	str	r2, [r4, #16]
 80014e0:	f8cd a000 	str.w	sl, [sp]
 80014e4:	464b      	mov	r3, r9
 80014e6:	aa03      	add	r2, sp, #12
 80014e8:	4621      	mov	r1, r4
 80014ea:	4640      	mov	r0, r8
 80014ec:	f7ff fee4 	bl	80012b8 <_printf_common>
 80014f0:	3001      	adds	r0, #1
 80014f2:	d14a      	bne.n	800158a <_printf_i+0x1f6>
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	b004      	add	sp, #16
 80014fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014fe:	6823      	ldr	r3, [r4, #0]
 8001500:	f043 0320 	orr.w	r3, r3, #32
 8001504:	6023      	str	r3, [r4, #0]
 8001506:	4833      	ldr	r0, [pc, #204]	; (80015d4 <_printf_i+0x240>)
 8001508:	2778      	movs	r7, #120	; 0x78
 800150a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800150e:	6823      	ldr	r3, [r4, #0]
 8001510:	6829      	ldr	r1, [r5, #0]
 8001512:	061f      	lsls	r7, r3, #24
 8001514:	f851 6b04 	ldr.w	r6, [r1], #4
 8001518:	d402      	bmi.n	8001520 <_printf_i+0x18c>
 800151a:	065f      	lsls	r7, r3, #25
 800151c:	bf48      	it	mi
 800151e:	b2b6      	uxthmi	r6, r6
 8001520:	07df      	lsls	r7, r3, #31
 8001522:	bf48      	it	mi
 8001524:	f043 0320 	orrmi.w	r3, r3, #32
 8001528:	6029      	str	r1, [r5, #0]
 800152a:	bf48      	it	mi
 800152c:	6023      	strmi	r3, [r4, #0]
 800152e:	b91e      	cbnz	r6, 8001538 <_printf_i+0x1a4>
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	f023 0320 	bic.w	r3, r3, #32
 8001536:	6023      	str	r3, [r4, #0]
 8001538:	2310      	movs	r3, #16
 800153a:	e7a7      	b.n	800148c <_printf_i+0xf8>
 800153c:	4824      	ldr	r0, [pc, #144]	; (80015d0 <_printf_i+0x23c>)
 800153e:	e7e4      	b.n	800150a <_printf_i+0x176>
 8001540:	4615      	mov	r5, r2
 8001542:	e7bd      	b.n	80014c0 <_printf_i+0x12c>
 8001544:	682b      	ldr	r3, [r5, #0]
 8001546:	6826      	ldr	r6, [r4, #0]
 8001548:	6961      	ldr	r1, [r4, #20]
 800154a:	1d18      	adds	r0, r3, #4
 800154c:	6028      	str	r0, [r5, #0]
 800154e:	0635      	lsls	r5, r6, #24
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	d501      	bpl.n	8001558 <_printf_i+0x1c4>
 8001554:	6019      	str	r1, [r3, #0]
 8001556:	e002      	b.n	800155e <_printf_i+0x1ca>
 8001558:	0670      	lsls	r0, r6, #25
 800155a:	d5fb      	bpl.n	8001554 <_printf_i+0x1c0>
 800155c:	8019      	strh	r1, [r3, #0]
 800155e:	2300      	movs	r3, #0
 8001560:	6123      	str	r3, [r4, #16]
 8001562:	4615      	mov	r5, r2
 8001564:	e7bc      	b.n	80014e0 <_printf_i+0x14c>
 8001566:	682b      	ldr	r3, [r5, #0]
 8001568:	1d1a      	adds	r2, r3, #4
 800156a:	602a      	str	r2, [r5, #0]
 800156c:	681d      	ldr	r5, [r3, #0]
 800156e:	6862      	ldr	r2, [r4, #4]
 8001570:	2100      	movs	r1, #0
 8001572:	4628      	mov	r0, r5
 8001574:	f7fe fe3c 	bl	80001f0 <memchr>
 8001578:	b108      	cbz	r0, 800157e <_printf_i+0x1ea>
 800157a:	1b40      	subs	r0, r0, r5
 800157c:	6060      	str	r0, [r4, #4]
 800157e:	6863      	ldr	r3, [r4, #4]
 8001580:	6123      	str	r3, [r4, #16]
 8001582:	2300      	movs	r3, #0
 8001584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001588:	e7aa      	b.n	80014e0 <_printf_i+0x14c>
 800158a:	6923      	ldr	r3, [r4, #16]
 800158c:	462a      	mov	r2, r5
 800158e:	4649      	mov	r1, r9
 8001590:	4640      	mov	r0, r8
 8001592:	47d0      	blx	sl
 8001594:	3001      	adds	r0, #1
 8001596:	d0ad      	beq.n	80014f4 <_printf_i+0x160>
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	079b      	lsls	r3, r3, #30
 800159c:	d413      	bmi.n	80015c6 <_printf_i+0x232>
 800159e:	68e0      	ldr	r0, [r4, #12]
 80015a0:	9b03      	ldr	r3, [sp, #12]
 80015a2:	4298      	cmp	r0, r3
 80015a4:	bfb8      	it	lt
 80015a6:	4618      	movlt	r0, r3
 80015a8:	e7a6      	b.n	80014f8 <_printf_i+0x164>
 80015aa:	2301      	movs	r3, #1
 80015ac:	4632      	mov	r2, r6
 80015ae:	4649      	mov	r1, r9
 80015b0:	4640      	mov	r0, r8
 80015b2:	47d0      	blx	sl
 80015b4:	3001      	adds	r0, #1
 80015b6:	d09d      	beq.n	80014f4 <_printf_i+0x160>
 80015b8:	3501      	adds	r5, #1
 80015ba:	68e3      	ldr	r3, [r4, #12]
 80015bc:	9903      	ldr	r1, [sp, #12]
 80015be:	1a5b      	subs	r3, r3, r1
 80015c0:	42ab      	cmp	r3, r5
 80015c2:	dcf2      	bgt.n	80015aa <_printf_i+0x216>
 80015c4:	e7eb      	b.n	800159e <_printf_i+0x20a>
 80015c6:	2500      	movs	r5, #0
 80015c8:	f104 0619 	add.w	r6, r4, #25
 80015cc:	e7f5      	b.n	80015ba <_printf_i+0x226>
 80015ce:	bf00      	nop
 80015d0:	08001aae 	.word	0x08001aae
 80015d4:	08001abf 	.word	0x08001abf

080015d8 <__sflush_r>:
 80015d8:	898a      	ldrh	r2, [r1, #12]
 80015da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015de:	4605      	mov	r5, r0
 80015e0:	0710      	lsls	r0, r2, #28
 80015e2:	460c      	mov	r4, r1
 80015e4:	d458      	bmi.n	8001698 <__sflush_r+0xc0>
 80015e6:	684b      	ldr	r3, [r1, #4]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	dc05      	bgt.n	80015f8 <__sflush_r+0x20>
 80015ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	dc02      	bgt.n	80015f8 <__sflush_r+0x20>
 80015f2:	2000      	movs	r0, #0
 80015f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015fa:	2e00      	cmp	r6, #0
 80015fc:	d0f9      	beq.n	80015f2 <__sflush_r+0x1a>
 80015fe:	2300      	movs	r3, #0
 8001600:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001604:	682f      	ldr	r7, [r5, #0]
 8001606:	6a21      	ldr	r1, [r4, #32]
 8001608:	602b      	str	r3, [r5, #0]
 800160a:	d032      	beq.n	8001672 <__sflush_r+0x9a>
 800160c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800160e:	89a3      	ldrh	r3, [r4, #12]
 8001610:	075a      	lsls	r2, r3, #29
 8001612:	d505      	bpl.n	8001620 <__sflush_r+0x48>
 8001614:	6863      	ldr	r3, [r4, #4]
 8001616:	1ac0      	subs	r0, r0, r3
 8001618:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800161a:	b10b      	cbz	r3, 8001620 <__sflush_r+0x48>
 800161c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800161e:	1ac0      	subs	r0, r0, r3
 8001620:	2300      	movs	r3, #0
 8001622:	4602      	mov	r2, r0
 8001624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001626:	6a21      	ldr	r1, [r4, #32]
 8001628:	4628      	mov	r0, r5
 800162a:	47b0      	blx	r6
 800162c:	1c43      	adds	r3, r0, #1
 800162e:	89a3      	ldrh	r3, [r4, #12]
 8001630:	d106      	bne.n	8001640 <__sflush_r+0x68>
 8001632:	6829      	ldr	r1, [r5, #0]
 8001634:	291d      	cmp	r1, #29
 8001636:	d82b      	bhi.n	8001690 <__sflush_r+0xb8>
 8001638:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <__sflush_r+0x108>)
 800163a:	410a      	asrs	r2, r1
 800163c:	07d6      	lsls	r6, r2, #31
 800163e:	d427      	bmi.n	8001690 <__sflush_r+0xb8>
 8001640:	2200      	movs	r2, #0
 8001642:	6062      	str	r2, [r4, #4]
 8001644:	04d9      	lsls	r1, r3, #19
 8001646:	6922      	ldr	r2, [r4, #16]
 8001648:	6022      	str	r2, [r4, #0]
 800164a:	d504      	bpl.n	8001656 <__sflush_r+0x7e>
 800164c:	1c42      	adds	r2, r0, #1
 800164e:	d101      	bne.n	8001654 <__sflush_r+0x7c>
 8001650:	682b      	ldr	r3, [r5, #0]
 8001652:	b903      	cbnz	r3, 8001656 <__sflush_r+0x7e>
 8001654:	6560      	str	r0, [r4, #84]	; 0x54
 8001656:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001658:	602f      	str	r7, [r5, #0]
 800165a:	2900      	cmp	r1, #0
 800165c:	d0c9      	beq.n	80015f2 <__sflush_r+0x1a>
 800165e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001662:	4299      	cmp	r1, r3
 8001664:	d002      	beq.n	800166c <__sflush_r+0x94>
 8001666:	4628      	mov	r0, r5
 8001668:	f7ff fbea 	bl	8000e40 <_free_r>
 800166c:	2000      	movs	r0, #0
 800166e:	6360      	str	r0, [r4, #52]	; 0x34
 8001670:	e7c0      	b.n	80015f4 <__sflush_r+0x1c>
 8001672:	2301      	movs	r3, #1
 8001674:	4628      	mov	r0, r5
 8001676:	47b0      	blx	r6
 8001678:	1c41      	adds	r1, r0, #1
 800167a:	d1c8      	bne.n	800160e <__sflush_r+0x36>
 800167c:	682b      	ldr	r3, [r5, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0c5      	beq.n	800160e <__sflush_r+0x36>
 8001682:	2b1d      	cmp	r3, #29
 8001684:	d001      	beq.n	800168a <__sflush_r+0xb2>
 8001686:	2b16      	cmp	r3, #22
 8001688:	d101      	bne.n	800168e <__sflush_r+0xb6>
 800168a:	602f      	str	r7, [r5, #0]
 800168c:	e7b1      	b.n	80015f2 <__sflush_r+0x1a>
 800168e:	89a3      	ldrh	r3, [r4, #12]
 8001690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001694:	81a3      	strh	r3, [r4, #12]
 8001696:	e7ad      	b.n	80015f4 <__sflush_r+0x1c>
 8001698:	690f      	ldr	r7, [r1, #16]
 800169a:	2f00      	cmp	r7, #0
 800169c:	d0a9      	beq.n	80015f2 <__sflush_r+0x1a>
 800169e:	0793      	lsls	r3, r2, #30
 80016a0:	680e      	ldr	r6, [r1, #0]
 80016a2:	bf08      	it	eq
 80016a4:	694b      	ldreq	r3, [r1, #20]
 80016a6:	600f      	str	r7, [r1, #0]
 80016a8:	bf18      	it	ne
 80016aa:	2300      	movne	r3, #0
 80016ac:	eba6 0807 	sub.w	r8, r6, r7
 80016b0:	608b      	str	r3, [r1, #8]
 80016b2:	f1b8 0f00 	cmp.w	r8, #0
 80016b6:	dd9c      	ble.n	80015f2 <__sflush_r+0x1a>
 80016b8:	6a21      	ldr	r1, [r4, #32]
 80016ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80016bc:	4643      	mov	r3, r8
 80016be:	463a      	mov	r2, r7
 80016c0:	4628      	mov	r0, r5
 80016c2:	47b0      	blx	r6
 80016c4:	2800      	cmp	r0, #0
 80016c6:	dc06      	bgt.n	80016d6 <__sflush_r+0xfe>
 80016c8:	89a3      	ldrh	r3, [r4, #12]
 80016ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ce:	81a3      	strh	r3, [r4, #12]
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	e78e      	b.n	80015f4 <__sflush_r+0x1c>
 80016d6:	4407      	add	r7, r0
 80016d8:	eba8 0800 	sub.w	r8, r8, r0
 80016dc:	e7e9      	b.n	80016b2 <__sflush_r+0xda>
 80016de:	bf00      	nop
 80016e0:	dfbffffe 	.word	0xdfbffffe

080016e4 <_fflush_r>:
 80016e4:	b538      	push	{r3, r4, r5, lr}
 80016e6:	690b      	ldr	r3, [r1, #16]
 80016e8:	4605      	mov	r5, r0
 80016ea:	460c      	mov	r4, r1
 80016ec:	b913      	cbnz	r3, 80016f4 <_fflush_r+0x10>
 80016ee:	2500      	movs	r5, #0
 80016f0:	4628      	mov	r0, r5
 80016f2:	bd38      	pop	{r3, r4, r5, pc}
 80016f4:	b118      	cbz	r0, 80016fe <_fflush_r+0x1a>
 80016f6:	6a03      	ldr	r3, [r0, #32]
 80016f8:	b90b      	cbnz	r3, 80016fe <_fflush_r+0x1a>
 80016fa:	f7ff fa93 	bl	8000c24 <__sinit>
 80016fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f3      	beq.n	80016ee <_fflush_r+0xa>
 8001706:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001708:	07d0      	lsls	r0, r2, #31
 800170a:	d404      	bmi.n	8001716 <_fflush_r+0x32>
 800170c:	0599      	lsls	r1, r3, #22
 800170e:	d402      	bmi.n	8001716 <_fflush_r+0x32>
 8001710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001712:	f7ff fb8c 	bl	8000e2e <__retarget_lock_acquire_recursive>
 8001716:	4628      	mov	r0, r5
 8001718:	4621      	mov	r1, r4
 800171a:	f7ff ff5d 	bl	80015d8 <__sflush_r>
 800171e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001720:	07da      	lsls	r2, r3, #31
 8001722:	4605      	mov	r5, r0
 8001724:	d4e4      	bmi.n	80016f0 <_fflush_r+0xc>
 8001726:	89a3      	ldrh	r3, [r4, #12]
 8001728:	059b      	lsls	r3, r3, #22
 800172a:	d4e1      	bmi.n	80016f0 <_fflush_r+0xc>
 800172c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800172e:	f7ff fb7f 	bl	8000e30 <__retarget_lock_release_recursive>
 8001732:	e7dd      	b.n	80016f0 <_fflush_r+0xc>

08001734 <__swbuf_r>:
 8001734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001736:	460e      	mov	r6, r1
 8001738:	4614      	mov	r4, r2
 800173a:	4605      	mov	r5, r0
 800173c:	b118      	cbz	r0, 8001746 <__swbuf_r+0x12>
 800173e:	6a03      	ldr	r3, [r0, #32]
 8001740:	b90b      	cbnz	r3, 8001746 <__swbuf_r+0x12>
 8001742:	f7ff fa6f 	bl	8000c24 <__sinit>
 8001746:	69a3      	ldr	r3, [r4, #24]
 8001748:	60a3      	str	r3, [r4, #8]
 800174a:	89a3      	ldrh	r3, [r4, #12]
 800174c:	071a      	lsls	r2, r3, #28
 800174e:	d525      	bpl.n	800179c <__swbuf_r+0x68>
 8001750:	6923      	ldr	r3, [r4, #16]
 8001752:	b31b      	cbz	r3, 800179c <__swbuf_r+0x68>
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	6922      	ldr	r2, [r4, #16]
 8001758:	1a98      	subs	r0, r3, r2
 800175a:	6963      	ldr	r3, [r4, #20]
 800175c:	b2f6      	uxtb	r6, r6
 800175e:	4283      	cmp	r3, r0
 8001760:	4637      	mov	r7, r6
 8001762:	dc04      	bgt.n	800176e <__swbuf_r+0x3a>
 8001764:	4621      	mov	r1, r4
 8001766:	4628      	mov	r0, r5
 8001768:	f7ff ffbc 	bl	80016e4 <_fflush_r>
 800176c:	b9e0      	cbnz	r0, 80017a8 <__swbuf_r+0x74>
 800176e:	68a3      	ldr	r3, [r4, #8]
 8001770:	3b01      	subs	r3, #1
 8001772:	60a3      	str	r3, [r4, #8]
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	1c5a      	adds	r2, r3, #1
 8001778:	6022      	str	r2, [r4, #0]
 800177a:	701e      	strb	r6, [r3, #0]
 800177c:	6962      	ldr	r2, [r4, #20]
 800177e:	1c43      	adds	r3, r0, #1
 8001780:	429a      	cmp	r2, r3
 8001782:	d004      	beq.n	800178e <__swbuf_r+0x5a>
 8001784:	89a3      	ldrh	r3, [r4, #12]
 8001786:	07db      	lsls	r3, r3, #31
 8001788:	d506      	bpl.n	8001798 <__swbuf_r+0x64>
 800178a:	2e0a      	cmp	r6, #10
 800178c:	d104      	bne.n	8001798 <__swbuf_r+0x64>
 800178e:	4621      	mov	r1, r4
 8001790:	4628      	mov	r0, r5
 8001792:	f7ff ffa7 	bl	80016e4 <_fflush_r>
 8001796:	b938      	cbnz	r0, 80017a8 <__swbuf_r+0x74>
 8001798:	4638      	mov	r0, r7
 800179a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800179c:	4621      	mov	r1, r4
 800179e:	4628      	mov	r0, r5
 80017a0:	f000 f806 	bl	80017b0 <__swsetup_r>
 80017a4:	2800      	cmp	r0, #0
 80017a6:	d0d5      	beq.n	8001754 <__swbuf_r+0x20>
 80017a8:	f04f 37ff 	mov.w	r7, #4294967295
 80017ac:	e7f4      	b.n	8001798 <__swbuf_r+0x64>
	...

080017b0 <__swsetup_r>:
 80017b0:	b538      	push	{r3, r4, r5, lr}
 80017b2:	4b2a      	ldr	r3, [pc, #168]	; (800185c <__swsetup_r+0xac>)
 80017b4:	4605      	mov	r5, r0
 80017b6:	6818      	ldr	r0, [r3, #0]
 80017b8:	460c      	mov	r4, r1
 80017ba:	b118      	cbz	r0, 80017c4 <__swsetup_r+0x14>
 80017bc:	6a03      	ldr	r3, [r0, #32]
 80017be:	b90b      	cbnz	r3, 80017c4 <__swsetup_r+0x14>
 80017c0:	f7ff fa30 	bl	8000c24 <__sinit>
 80017c4:	89a3      	ldrh	r3, [r4, #12]
 80017c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80017ca:	0718      	lsls	r0, r3, #28
 80017cc:	d422      	bmi.n	8001814 <__swsetup_r+0x64>
 80017ce:	06d9      	lsls	r1, r3, #27
 80017d0:	d407      	bmi.n	80017e2 <__swsetup_r+0x32>
 80017d2:	2309      	movs	r3, #9
 80017d4:	602b      	str	r3, [r5, #0]
 80017d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80017da:	81a3      	strh	r3, [r4, #12]
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	e034      	b.n	800184c <__swsetup_r+0x9c>
 80017e2:	0758      	lsls	r0, r3, #29
 80017e4:	d512      	bpl.n	800180c <__swsetup_r+0x5c>
 80017e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80017e8:	b141      	cbz	r1, 80017fc <__swsetup_r+0x4c>
 80017ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80017ee:	4299      	cmp	r1, r3
 80017f0:	d002      	beq.n	80017f8 <__swsetup_r+0x48>
 80017f2:	4628      	mov	r0, r5
 80017f4:	f7ff fb24 	bl	8000e40 <_free_r>
 80017f8:	2300      	movs	r3, #0
 80017fa:	6363      	str	r3, [r4, #52]	; 0x34
 80017fc:	89a3      	ldrh	r3, [r4, #12]
 80017fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001802:	81a3      	strh	r3, [r4, #12]
 8001804:	2300      	movs	r3, #0
 8001806:	6063      	str	r3, [r4, #4]
 8001808:	6923      	ldr	r3, [r4, #16]
 800180a:	6023      	str	r3, [r4, #0]
 800180c:	89a3      	ldrh	r3, [r4, #12]
 800180e:	f043 0308 	orr.w	r3, r3, #8
 8001812:	81a3      	strh	r3, [r4, #12]
 8001814:	6923      	ldr	r3, [r4, #16]
 8001816:	b94b      	cbnz	r3, 800182c <__swsetup_r+0x7c>
 8001818:	89a3      	ldrh	r3, [r4, #12]
 800181a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800181e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001822:	d003      	beq.n	800182c <__swsetup_r+0x7c>
 8001824:	4621      	mov	r1, r4
 8001826:	4628      	mov	r0, r5
 8001828:	f000 f894 	bl	8001954 <__smakebuf_r>
 800182c:	89a0      	ldrh	r0, [r4, #12]
 800182e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001832:	f010 0301 	ands.w	r3, r0, #1
 8001836:	d00a      	beq.n	800184e <__swsetup_r+0x9e>
 8001838:	2300      	movs	r3, #0
 800183a:	60a3      	str	r3, [r4, #8]
 800183c:	6963      	ldr	r3, [r4, #20]
 800183e:	425b      	negs	r3, r3
 8001840:	61a3      	str	r3, [r4, #24]
 8001842:	6923      	ldr	r3, [r4, #16]
 8001844:	b943      	cbnz	r3, 8001858 <__swsetup_r+0xa8>
 8001846:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800184a:	d1c4      	bne.n	80017d6 <__swsetup_r+0x26>
 800184c:	bd38      	pop	{r3, r4, r5, pc}
 800184e:	0781      	lsls	r1, r0, #30
 8001850:	bf58      	it	pl
 8001852:	6963      	ldrpl	r3, [r4, #20]
 8001854:	60a3      	str	r3, [r4, #8]
 8001856:	e7f4      	b.n	8001842 <__swsetup_r+0x92>
 8001858:	2000      	movs	r0, #0
 800185a:	e7f7      	b.n	800184c <__swsetup_r+0x9c>
 800185c:	20000304 	.word	0x20000304

08001860 <_raise_r>:
 8001860:	291f      	cmp	r1, #31
 8001862:	b538      	push	{r3, r4, r5, lr}
 8001864:	4604      	mov	r4, r0
 8001866:	460d      	mov	r5, r1
 8001868:	d904      	bls.n	8001874 <_raise_r+0x14>
 800186a:	2316      	movs	r3, #22
 800186c:	6003      	str	r3, [r0, #0]
 800186e:	f04f 30ff 	mov.w	r0, #4294967295
 8001872:	bd38      	pop	{r3, r4, r5, pc}
 8001874:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001876:	b112      	cbz	r2, 800187e <_raise_r+0x1e>
 8001878:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800187c:	b94b      	cbnz	r3, 8001892 <_raise_r+0x32>
 800187e:	4620      	mov	r0, r4
 8001880:	f000 f830 	bl	80018e4 <_getpid_r>
 8001884:	462a      	mov	r2, r5
 8001886:	4601      	mov	r1, r0
 8001888:	4620      	mov	r0, r4
 800188a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800188e:	f000 b817 	b.w	80018c0 <_kill_r>
 8001892:	2b01      	cmp	r3, #1
 8001894:	d00a      	beq.n	80018ac <_raise_r+0x4c>
 8001896:	1c59      	adds	r1, r3, #1
 8001898:	d103      	bne.n	80018a2 <_raise_r+0x42>
 800189a:	2316      	movs	r3, #22
 800189c:	6003      	str	r3, [r0, #0]
 800189e:	2001      	movs	r0, #1
 80018a0:	e7e7      	b.n	8001872 <_raise_r+0x12>
 80018a2:	2400      	movs	r4, #0
 80018a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80018a8:	4628      	mov	r0, r5
 80018aa:	4798      	blx	r3
 80018ac:	2000      	movs	r0, #0
 80018ae:	e7e0      	b.n	8001872 <_raise_r+0x12>

080018b0 <raise>:
 80018b0:	4b02      	ldr	r3, [pc, #8]	; (80018bc <raise+0xc>)
 80018b2:	4601      	mov	r1, r0
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	f7ff bfd3 	b.w	8001860 <_raise_r>
 80018ba:	bf00      	nop
 80018bc:	20000304 	.word	0x20000304

080018c0 <_kill_r>:
 80018c0:	b538      	push	{r3, r4, r5, lr}
 80018c2:	4d07      	ldr	r5, [pc, #28]	; (80018e0 <_kill_r+0x20>)
 80018c4:	2300      	movs	r3, #0
 80018c6:	4604      	mov	r4, r0
 80018c8:	4608      	mov	r0, r1
 80018ca:	4611      	mov	r1, r2
 80018cc:	602b      	str	r3, [r5, #0]
 80018ce:	f7ff f818 	bl	8000902 <_kill>
 80018d2:	1c43      	adds	r3, r0, #1
 80018d4:	d102      	bne.n	80018dc <_kill_r+0x1c>
 80018d6:	682b      	ldr	r3, [r5, #0]
 80018d8:	b103      	cbz	r3, 80018dc <_kill_r+0x1c>
 80018da:	6023      	str	r3, [r4, #0]
 80018dc:	bd38      	pop	{r3, r4, r5, pc}
 80018de:	bf00      	nop
 80018e0:	2000049c 	.word	0x2000049c

080018e4 <_getpid_r>:
 80018e4:	f7ff b805 	b.w	80008f2 <_getpid>

080018e8 <_sbrk_r>:
 80018e8:	b538      	push	{r3, r4, r5, lr}
 80018ea:	4d06      	ldr	r5, [pc, #24]	; (8001904 <_sbrk_r+0x1c>)
 80018ec:	2300      	movs	r3, #0
 80018ee:	4604      	mov	r4, r0
 80018f0:	4608      	mov	r0, r1
 80018f2:	602b      	str	r3, [r5, #0]
 80018f4:	f7ff f88c 	bl	8000a10 <_sbrk>
 80018f8:	1c43      	adds	r3, r0, #1
 80018fa:	d102      	bne.n	8001902 <_sbrk_r+0x1a>
 80018fc:	682b      	ldr	r3, [r5, #0]
 80018fe:	b103      	cbz	r3, 8001902 <_sbrk_r+0x1a>
 8001900:	6023      	str	r3, [r4, #0]
 8001902:	bd38      	pop	{r3, r4, r5, pc}
 8001904:	2000049c 	.word	0x2000049c

08001908 <__swhatbuf_r>:
 8001908:	b570      	push	{r4, r5, r6, lr}
 800190a:	460c      	mov	r4, r1
 800190c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001910:	2900      	cmp	r1, #0
 8001912:	b096      	sub	sp, #88	; 0x58
 8001914:	4615      	mov	r5, r2
 8001916:	461e      	mov	r6, r3
 8001918:	da0d      	bge.n	8001936 <__swhatbuf_r+0x2e>
 800191a:	89a3      	ldrh	r3, [r4, #12]
 800191c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001920:	f04f 0100 	mov.w	r1, #0
 8001924:	bf0c      	ite	eq
 8001926:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800192a:	2340      	movne	r3, #64	; 0x40
 800192c:	2000      	movs	r0, #0
 800192e:	6031      	str	r1, [r6, #0]
 8001930:	602b      	str	r3, [r5, #0]
 8001932:	b016      	add	sp, #88	; 0x58
 8001934:	bd70      	pop	{r4, r5, r6, pc}
 8001936:	466a      	mov	r2, sp
 8001938:	f000 f848 	bl	80019cc <_fstat_r>
 800193c:	2800      	cmp	r0, #0
 800193e:	dbec      	blt.n	800191a <__swhatbuf_r+0x12>
 8001940:	9901      	ldr	r1, [sp, #4]
 8001942:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001946:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800194a:	4259      	negs	r1, r3
 800194c:	4159      	adcs	r1, r3
 800194e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001952:	e7eb      	b.n	800192c <__swhatbuf_r+0x24>

08001954 <__smakebuf_r>:
 8001954:	898b      	ldrh	r3, [r1, #12]
 8001956:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001958:	079d      	lsls	r5, r3, #30
 800195a:	4606      	mov	r6, r0
 800195c:	460c      	mov	r4, r1
 800195e:	d507      	bpl.n	8001970 <__smakebuf_r+0x1c>
 8001960:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001964:	6023      	str	r3, [r4, #0]
 8001966:	6123      	str	r3, [r4, #16]
 8001968:	2301      	movs	r3, #1
 800196a:	6163      	str	r3, [r4, #20]
 800196c:	b002      	add	sp, #8
 800196e:	bd70      	pop	{r4, r5, r6, pc}
 8001970:	ab01      	add	r3, sp, #4
 8001972:	466a      	mov	r2, sp
 8001974:	f7ff ffc8 	bl	8001908 <__swhatbuf_r>
 8001978:	9900      	ldr	r1, [sp, #0]
 800197a:	4605      	mov	r5, r0
 800197c:	4630      	mov	r0, r6
 800197e:	f7ff facb 	bl	8000f18 <_malloc_r>
 8001982:	b948      	cbnz	r0, 8001998 <__smakebuf_r+0x44>
 8001984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001988:	059a      	lsls	r2, r3, #22
 800198a:	d4ef      	bmi.n	800196c <__smakebuf_r+0x18>
 800198c:	f023 0303 	bic.w	r3, r3, #3
 8001990:	f043 0302 	orr.w	r3, r3, #2
 8001994:	81a3      	strh	r3, [r4, #12]
 8001996:	e7e3      	b.n	8001960 <__smakebuf_r+0xc>
 8001998:	89a3      	ldrh	r3, [r4, #12]
 800199a:	6020      	str	r0, [r4, #0]
 800199c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a0:	81a3      	strh	r3, [r4, #12]
 80019a2:	9b00      	ldr	r3, [sp, #0]
 80019a4:	6163      	str	r3, [r4, #20]
 80019a6:	9b01      	ldr	r3, [sp, #4]
 80019a8:	6120      	str	r0, [r4, #16]
 80019aa:	b15b      	cbz	r3, 80019c4 <__smakebuf_r+0x70>
 80019ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019b0:	4630      	mov	r0, r6
 80019b2:	f000 f81d 	bl	80019f0 <_isatty_r>
 80019b6:	b128      	cbz	r0, 80019c4 <__smakebuf_r+0x70>
 80019b8:	89a3      	ldrh	r3, [r4, #12]
 80019ba:	f023 0303 	bic.w	r3, r3, #3
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	81a3      	strh	r3, [r4, #12]
 80019c4:	89a3      	ldrh	r3, [r4, #12]
 80019c6:	431d      	orrs	r5, r3
 80019c8:	81a5      	strh	r5, [r4, #12]
 80019ca:	e7cf      	b.n	800196c <__smakebuf_r+0x18>

080019cc <_fstat_r>:
 80019cc:	b538      	push	{r3, r4, r5, lr}
 80019ce:	4d07      	ldr	r5, [pc, #28]	; (80019ec <_fstat_r+0x20>)
 80019d0:	2300      	movs	r3, #0
 80019d2:	4604      	mov	r4, r0
 80019d4:	4608      	mov	r0, r1
 80019d6:	4611      	mov	r1, r2
 80019d8:	602b      	str	r3, [r5, #0]
 80019da:	f7fe fff1 	bl	80009c0 <_fstat>
 80019de:	1c43      	adds	r3, r0, #1
 80019e0:	d102      	bne.n	80019e8 <_fstat_r+0x1c>
 80019e2:	682b      	ldr	r3, [r5, #0]
 80019e4:	b103      	cbz	r3, 80019e8 <_fstat_r+0x1c>
 80019e6:	6023      	str	r3, [r4, #0]
 80019e8:	bd38      	pop	{r3, r4, r5, pc}
 80019ea:	bf00      	nop
 80019ec:	2000049c 	.word	0x2000049c

080019f0 <_isatty_r>:
 80019f0:	b538      	push	{r3, r4, r5, lr}
 80019f2:	4d06      	ldr	r5, [pc, #24]	; (8001a0c <_isatty_r+0x1c>)
 80019f4:	2300      	movs	r3, #0
 80019f6:	4604      	mov	r4, r0
 80019f8:	4608      	mov	r0, r1
 80019fa:	602b      	str	r3, [r5, #0]
 80019fc:	f7fe fff0 	bl	80009e0 <_isatty>
 8001a00:	1c43      	adds	r3, r0, #1
 8001a02:	d102      	bne.n	8001a0a <_isatty_r+0x1a>
 8001a04:	682b      	ldr	r3, [r5, #0]
 8001a06:	b103      	cbz	r3, 8001a0a <_isatty_r+0x1a>
 8001a08:	6023      	str	r3, [r4, #0]
 8001a0a:	bd38      	pop	{r3, r4, r5, pc}
 8001a0c:	2000049c 	.word	0x2000049c

08001a10 <_init>:
 8001a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a12:	bf00      	nop
 8001a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a16:	bc08      	pop	{r3}
 8001a18:	469e      	mov	lr, r3
 8001a1a:	4770      	bx	lr

08001a1c <_fini>:
 8001a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a1e:	bf00      	nop
 8001a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a22:	bc08      	pop	{r3}
 8001a24:	469e      	mov	lr, r3
 8001a26:	4770      	bx	lr
